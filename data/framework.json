{
	"meta": { "version": "0.3.3", "format": 20, "date": 1640877608904 },
	"custom": {
		"general": {
			"name": "General",
			"files": {
				"welcome": { "name": "Welcome", "type": "md", "content": "THIS IS A TEST DOCUMENT", "path": "test.md" },
				"welcome2": { "name": "Welcome2", "type": "md", "content": "THIS IS A TEST DOCUMENT", "path": "test.md" }
			}
		},
		"general2": {
			"name": "General2",
			"files": {
				"welcome3": { "name": "Welcome3", "type": "md", "content": "THIS IS A TEST DOCUMENT", "path": "test.md" },
				"welcome4": { "name": "Welcome4", "type": "md", "content": "THIS IS A TEST DOCUMENT", "path": "test.md" }
			}
		}
	},
	"classes": [
		{
			"name": "AliasPiece",
			"description": "The piece to be stored in {@link AliasStore} instances.",
			"extends": ["Piece<O>"],
			"construct": {
				"name": "constructor",
				"params": [
					{ "name": "context", "optional": false, "type": [[["PieceContext"]]] },
					{ "name": "options", "optional": true, "type": [[["AliasPieceOptions"]]] }
				],
				"returns": [
					[
						["AliasPiece", "<"],
						["O", ">"]
					]
				],
				"meta": { "line": 691, "file": "index.d.ts", "path": "node_modules/@sapphire/pieces/dist" }
			},
			"props": [
				{
					"name": "aliases",
					"description": "The aliases for the piece.",
					"type": [
						[
							["readonly", " "],
							["Array", "<"],
							["string", ">"]
						]
					],
					"meta": { "line": 690, "file": "index.d.ts", "path": "node_modules/@sapphire/pieces/dist" }
				},
				{
					"name": "enabled",
					"description": "Whether or not the piece is enabled.",
					"type": [[["boolean"]]],
					"meta": { "line": 447, "file": "index.d.ts", "path": "node_modules/@sapphire/pieces/dist" }
				},
				{
					"name": "location",
					"description": "The location metadata for the piece's file.",
					"readonly": true,
					"type": [[["PieceLocation"]]],
					"meta": { "line": 439, "file": "index.d.ts", "path": "node_modules/@sapphire/pieces/dist" }
				},
				{
					"name": "name",
					"description": "The name of the piece.",
					"readonly": true,
					"type": [[["string"]]],
					"meta": { "line": 443, "file": "index.d.ts", "path": "node_modules/@sapphire/pieces/dist" }
				},
				{
					"name": "options",
					"description": "The raw options passed to this {@link Piece}",
					"readonly": true,
					"type": [[["O"]]],
					"meta": { "line": 451, "file": "index.d.ts", "path": "node_modules/@sapphire/pieces/dist" }
				},
				{
					"name": "store",
					"description": "The store that contains the piece.",
					"readonly": true,
					"type": [
						[
							["Store", "<"],
							["Piece", "<"],
							["PieceOptions", ">>"]
						]
					],
					"meta": { "line": 435, "file": "index.d.ts", "path": "node_modules/@sapphire/pieces/dist" }
				},
				{
					"name": "container",
					"description": "A reference to the {@link Container} object for ease of use.",
					"see": ["container"],
					"readonly": true,
					"abstract": false,
					"deprecated": false,
					"type": [[["Container"]]],
					"meta": { "line": 457, "file": "index.d.ts", "path": "node_modules/@sapphire/pieces/dist" }
				}
			],
			"methods": [
				{
					"name": "onLoad",
					"description": "Per-piece listener that is called when the piece is loaded into the store.\nUseful to set-up asynchronous initialization tasks.",
					"returns": [[["unknown"]]],
					"meta": { "line": 462, "file": "index.d.ts", "path": "node_modules/@sapphire/pieces/dist" }
				},
				{
					"name": "onUnload",
					"description": "Per-piece listener that is called when the piece is unloaded from the store.\nUseful to set-up clean-up tasks.",
					"returns": [[["unknown"]]],
					"meta": { "line": 467, "file": "index.d.ts", "path": "node_modules/@sapphire/pieces/dist" }
				},
				{
					"name": "reload",
					"description": "Reloads the piece by loading the same path in the store.",
					"returns": [
						[
							["Promise", "<"],
							["void", ">"]
						]
					],
					"meta": { "line": 475, "file": "index.d.ts", "path": "node_modules/@sapphire/pieces/dist" }
				},
				{
					"name": "toJSON",
					"description": "Defines the `JSON.stringify` behavior of this alias piece.",
					"returns": [[["AliasPieceJSON"]]],
					"meta": { "line": 695, "file": "index.d.ts", "path": "node_modules/@sapphire/pieces/dist" }
				},
				{
					"name": "unload",
					"description": "Unloads and disables the piece.",
					"returns": [
						[
							["Promise", "<"],
							["void", ">"]
						]
					],
					"meta": { "line": 471, "file": "index.d.ts", "path": "node_modules/@sapphire/pieces/dist" }
				}
			],
			"meta": { "line": 686, "file": "index.d.ts", "path": "node_modules/@sapphire/pieces/dist" }
		},
		{
			"name": "AliasStore",
			"description": "The store class which contains {@link AliasPiece}s.",
			"extends": ["Store<T>"],
			"construct": {
				"name": "constructor",
				"params": [
					{
						"name": "constructor",
						"description": "The piece constructor this store loads.",
						"optional": false,
						"type": [
							[
								["Constructor", "<"],
								["T", ">"]
							]
						]
					},
					{
						"name": "options",
						"description": "The options for the store.",
						"optional": false,
						"type": [
							[
								["StoreOptions", "<"],
								["T", ">"]
							]
						]
					}
				],
				"returns": [
					[
						["AliasStore", "<"],
						["T", ">"]
					]
				]
			},
			"props": [
				{
					"name": "Constructor",
					"readonly": true,
					"type": [
						[
							["Constructor", "<"],
							["T", ">"]
						]
					],
					"meta": { "line": 281, "file": "index.d.ts", "path": "node_modules/@sapphire/pieces/dist" }
				},
				{
					"name": "[toStringTag]",
					"readonly": true,
					"type": [[["string"]]],
					"meta": { "line": 135, "file": "lib.es2015.symbol.wellknown.d.ts", "path": "node_modules/typescript/lib" }
				},
				{
					"name": "aliases",
					"description": "The aliases referencing to pieces.",
					"readonly": true,
					"type": [
						[
							["Collection", "<"],
							["string", ", "],
							["T", ">"]
						]
					],
					"meta": { "line": 712, "file": "index.d.ts", "path": "node_modules/@sapphire/pieces/dist" }
				},
				{
					"name": "constructor",
					"type": [[["CollectionConstructor"]]],
					"meta": { "line": 17, "file": "index.d.ts", "path": "node_modules/@discordjs/collection/dist" }
				},
				{
					"name": "name",
					"readonly": true,
					"type": [[["string"]]],
					"meta": { "line": 282, "file": "index.d.ts", "path": "node_modules/@sapphire/pieces/dist" }
				},
				{
					"name": "paths",
					"readonly": true,
					"type": [
						[
							["Set", "<"],
							["string", ">"]
						]
					],
					"meta": { "line": 283, "file": "index.d.ts", "path": "node_modules/@sapphire/pieces/dist" }
				},
				{
					"name": "size",
					"readonly": true,
					"type": [[["number"]]],
					"meta": { "line": 28, "file": "lib.es2015.collection.d.ts", "path": "node_modules/typescript/lib" }
				},
				{
					"name": "strategy",
					"readonly": true,
					"type": [
						[
							["ILoaderStrategy", "<"],
							["T", ">"]
						]
					],
					"meta": { "line": 284, "file": "index.d.ts", "path": "node_modules/@sapphire/pieces/dist" }
				},
				{
					"name": "[species]",
					"scope": "static",
					"readonly": true,
					"type": [[["MapConstructor"]]],
					"meta": { "line": 317, "file": "lib.es2015.symbol.wellknown.d.ts", "path": "node_modules/typescript/lib" }
				},
				{
					"name": "default",
					"scope": "static",
					"readonly": true,
					"type": [[["("], ["typeof", " "], ["Collection", ")"]]],
					"meta": { "line": 24, "file": "index.d.ts", "path": "node_modules/@discordjs/collection/dist" }
				},
				{
					"name": "defaultStrategy",
					"description": "The default strategy, defaults to {@link LoaderStrategy}, which is constructed on demand when a store is constructed,\nwhen none was set beforehand.",
					"scope": "static",
					"type": [
						[
							["ILoaderStrategy", "<"],
							["any", ">"]
						]
					],
					"meta": { "line": 369, "file": "index.d.ts", "path": "node_modules/@sapphire/pieces/dist" }
				},
				{
					"name": "logger",
					"description": "The default logger, defaults to `null`.",
					"scope": "static",
					"type": [[["null", " | "], ["StoreLogger"]]],
					"meta": { "line": 373, "file": "index.d.ts", "path": "node_modules/@sapphire/pieces/dist" }
				},
				{
					"name": "container",
					"description": "A reference to the {@link Container} object for ease of use.",
					"see": ["container"],
					"readonly": true,
					"abstract": false,
					"deprecated": false,
					"type": [[["Container"]]],
					"meta": { "line": 294, "file": "index.d.ts", "path": "node_modules/@sapphire/pieces/dist" }
				}
			],
			"methods": [
				{
					"name": "[iterator]",
					"description": "Returns an iterable of entries in the map.",
					"returns": [
						[
							["IterableIterator", "<["],
							["string", ", "],
							["T", "]>"]
						]
					]
				},
				{
					"name": "at",
					"description": "Identical to [Array.at()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/at).\nReturns the item at a given index, allowing for positive and negative integers.\nNegative integers count back from the last item in the collection.",
					"params": [
						{
							"name": "index",
							"description": "The index of the element to obtain",
							"optional": true,
							"type": [[["number"]]]
						}
					],
					"returns": [[["undefined", " | "], ["T"]]],
					"meta": { "line": 87, "file": "index.d.ts", "path": "node_modules/@discordjs/collection/dist" }
				},
				{ "name": "clear", "returns": [[["void"]]] },
				{
					"name": "clone",
					"description": "Creates an identical shallow copy of this collection.",
					"see": [],
					"examples": ["const newColl = someColl.clone();"],
					"abstract": false,
					"deprecated": false,
					"emits": [],
					"returns": [
						[
							["Collection", "<"],
							["string", ", "],
							["T", ">"]
						]
					],
					"meta": { "line": 301, "file": "index.d.ts", "path": "node_modules/@discordjs/collection/dist" }
				},
				{
					"name": "concat",
					"description": "Combines this collection with others into a new collection. None of the source collections are modified.",
					"see": [],
					"examples": ["const newColl = someColl.concat(someOtherColl, anotherColl, ohBoyAColl);"],
					"abstract": false,
					"deprecated": false,
					"emits": [],
					"params": [
						{
							"name": "collections",
							"description": "Collections to merge",
							"optional": false,
							"type": [
								[
									["Array", "<"],
									["Collection", "<"],
									["string", ", "],
									["T", ">>"]
								]
							]
						}
					],
					"returns": [
						[
							["Collection", "<"],
							["string", ", "],
							["T", ">"]
						]
					],
					"meta": { "line": 310, "file": "index.d.ts", "path": "node_modules/@discordjs/collection/dist" }
				},
				{
					"name": "construct",
					"description": "Constructs a {@link Piece} instance.",
					"params": [
						{
							"name": "Ctor",
							"description": "The {@link Piece}'s constructor used to build the instance.",
							"optional": false,
							"type": [
								[
									["ILoaderResultEntry", "<"],
									["T", ">"]
								]
							]
						},
						{
							"name": "data",
							"description": "The module's information",
							"optional": false,
							"type": [[["HydratedModuleData"]]]
						}
					],
					"returns": [[["T"]]],
					"returnsDescription": "An instance of the constructed piece.",
					"meta": { "line": 345, "file": "index.d.ts", "path": "node_modules/@sapphire/pieces/dist" }
				},
				{
					"name": "delete",
					"params": [{ "name": "key", "optional": false, "type": [[["string"]]] }],
					"returns": [[["boolean"]]]
				},
				{
					"name": "difference",
					"description": "The difference method returns a new structure containing items where the key is present in one of the original structures but not the other.",
					"params": [
						{
							"name": "other",
							"description": "The other Collection to filter against",
							"optional": false,
							"type": [
								[
									["Collection", "<"],
									["string", ", "],
									["T", ">"]
								]
							]
						}
					],
					"returns": [
						[
							["Collection", "<"],
							["string", ", "],
							["T", ">"]
						]
					],
					"meta": { "line": 344, "file": "index.d.ts", "path": "node_modules/@discordjs/collection/dist" }
				},
				{
					"name": "each",
					"description": "Identical to\n[Map.forEach()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/forEach),\nbut returns the collection instead of undefined.",
					"see": [],
					"examples": [
						"collection\n .each(user => console.log(user.username))\n .filter(user => user.bot)\n .each(user => console.log(user.username));"
					],
					"abstract": false,
					"deprecated": false,
					"emits": [],
					"params": [
						{
							"name": "fn",
							"description": "Function to execute for each element",
							"optional": false,
							"type": [
								[
									["("],
									["value", ": "],
									["T", ", "],
									["key", ": "],
									["string", ", "],
									["collection", ": "],
									["AliasStore", "<"],
									["T", ">) => "],
									["void"]
								]
							]
						}
					],
					"returns": [
						[
							["AliasStore", "<"],
							["T", ">"]
						]
					],
					"meta": { "line": 279, "file": "index.d.ts", "path": "node_modules/@discordjs/collection/dist" }
				},
				{
					"name": "entries",
					"description": "Returns an iterable of key, value pairs for every entry in the map.",
					"returns": [
						[
							["IterableIterator", "<["],
							["string", ", "],
							["T", "]>"]
						]
					]
				},
				{
					"name": "equals",
					"description": "Checks if this collection shares identical items with another.\nThis is different to checking for equality using equal-signs, because\nthe collections may be different objects, but contain the same data.",
					"params": [
						{
							"name": "collection",
							"description": "Collection to compare with",
							"optional": false,
							"type": [
								[
									["Collection", "<"],
									["string", ", "],
									["T", ">"]
								]
							]
						}
					],
					"returns": [[["boolean"]]],
					"returnsDescription": "Whether the collections have identical contents",
					"meta": { "line": 320, "file": "index.d.ts", "path": "node_modules/@discordjs/collection/dist" }
				},
				{
					"name": "every",
					"description": "Checks if all items passes a test. Identical in behavior to\n[Array.every()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every).",
					"see": [],
					"examples": ["collection.every(user => !user.bot);"],
					"abstract": false,
					"deprecated": false,
					"emits": [],
					"params": [
						{
							"name": "fn",
							"description": "Function used to test (should return a boolean)",
							"optional": false,
							"type": [
								[
									["("],
									["value", ": "],
									["T", ", "],
									["key", ": "],
									["string", ", "],
									["collection", ": "],
									["AliasStore", "<"],
									["T", ">) => "],
									["key", " "],
									["is", " "],
									["K2"]
								]
							]
						}
					],
					"returns": [
						[
							["this", " "],
							["is", " "],
							["Collection", "<"],
							["K2", ", "],
							["T", ">"]
						]
					],
					"meta": { "line": 247, "file": "index.d.ts", "path": "node_modules/@discordjs/collection/dist" }
				},
				{
					"name": "filter",
					"description": "Identical to\n[Array.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter),\nbut returns a Collection instead of an Array.",
					"see": [],
					"examples": ["collection.filter(user => user.username === 'Bob');"],
					"abstract": false,
					"deprecated": false,
					"emits": [],
					"params": [
						{
							"name": "fn",
							"description": "The function to test with (should return boolean)",
							"optional": false,
							"type": [
								[
									["("],
									["value", ": "],
									["T", ", "],
									["key", ": "],
									["string", ", "],
									["collection", ": "],
									["AliasStore", "<"],
									["T", ">) => "],
									["key", " "],
									["is", " "],
									["K2"]
								]
							]
						}
					],
					"returns": [
						[
							["Collection", "<"],
							["K2", ", "],
							["T", ">"]
						]
					],
					"meta": { "line": 167, "file": "index.d.ts", "path": "node_modules/@discordjs/collection/dist" }
				},
				{
					"name": "find",
					"description": "Searches for a single item where the given function returns a truthy value. This behaves like\n[Array.find()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find).\n<warn>All collections used in Discord.js are mapped using their `id` property, and if you want to find by id you\nshould use the `get` method. See\n[MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/get) for details.</warn>",
					"see": [],
					"examples": ["collection.find(user => user.username === 'Bob');"],
					"abstract": false,
					"deprecated": false,
					"emits": [],
					"params": [
						{
							"name": "fn",
							"description": "The function to test with (should return boolean)",
							"optional": false,
							"type": [
								[
									["("],
									["value", ": "],
									["T", ", "],
									["key", ": "],
									["string", ", "],
									["collection", ": "],
									["AliasStore", "<"],
									["T", ">) => "],
									["value", " "],
									["is", " "],
									["V2"]
								]
							]
						}
					],
					"returns": [[["undefined", " | "], ["V2"]]],
					"meta": { "line": 127, "file": "index.d.ts", "path": "node_modules/@discordjs/collection/dist" }
				},
				{
					"name": "findKey",
					"description": "Searches for the key of a single item where the given function returns a truthy value. This behaves like\n[Array.findIndex()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex),\nbut returns the key rather than the positional index.",
					"see": [],
					"examples": ["collection.findKey(user => user.username === 'Bob');"],
					"abstract": false,
					"deprecated": false,
					"emits": [],
					"params": [
						{
							"name": "fn",
							"description": "The function to test with (should return boolean)",
							"optional": false,
							"type": [
								[
									["("],
									["value", ": "],
									["T", ", "],
									["key", ": "],
									["string", ", "],
									["collection", ": "],
									["AliasStore", "<"],
									["T", ">) => "],
									["key", " "],
									["is", " "],
									["K2"]
								]
							]
						}
					],
					"returns": [[["undefined", " | "], ["K2"]]],
					"meta": { "line": 142, "file": "index.d.ts", "path": "node_modules/@discordjs/collection/dist" }
				},
				{
					"name": "first",
					"description": "Obtains the first value(s) in this collection.",
					"returns": [[["undefined", " | "], ["T"]]],
					"returnsDescription": "A single value if no amount is provided or an array of values, starting from the end if amount is negative",
					"meta": { "line": 48, "file": "index.d.ts", "path": "node_modules/@discordjs/collection/dist" }
				},
				{
					"name": "firstKey",
					"description": "Obtains the first key(s) in this collection.",
					"returns": [[["undefined", " | "], ["string"]]],
					"returnsDescription": "A single key if no amount is provided or an array of keys, starting from the end if\namount is negative",
					"meta": { "line": 58, "file": "index.d.ts", "path": "node_modules/@discordjs/collection/dist" }
				},
				{
					"name": "flatMap",
					"description": "Maps each item into a Collection, then joins the results into a single Collection. Identical in behavior to\n[Array.flatMap()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/flatMap).",
					"see": [],
					"examples": ["collection.flatMap(guild => guild.members.cache);"],
					"abstract": false,
					"deprecated": false,
					"emits": [],
					"params": [
						{
							"name": "fn",
							"description": "Function that produces a new Collection",
							"optional": false,
							"type": [
								[
									["("],
									["value", ": "],
									["T", ", "],
									["key", ": "],
									["string", ", "],
									["collection", ": "],
									["AliasStore", "<"],
									["T", ">) => "],
									["Collection", "<"],
									["string", ", "],
									["T", ">"]
								]
							]
						}
					],
					"returns": [
						[
							["Collection", "<"],
							["string", ", "],
							["T", ">"]
						]
					],
					"meta": { "line": 199, "file": "index.d.ts", "path": "node_modules/@discordjs/collection/dist" }
				},
				{
					"name": "forEach",
					"params": [
						{
							"name": "callbackfn",
							"optional": false,
							"type": [
								[
									["("],
									["value", ": "],
									["T", ", "],
									["key", ": "],
									["string", ", "],
									["map", ": "],
									["Map", "<"],
									["string", ", "],
									["T", ">) => "],
									["void"]
								]
							]
						},
						{ "name": "thisArg", "optional": true, "type": [[["any"]]] }
					],
					"returns": [[["void"]]]
				},
				{
					"name": "get",
					"description": "Looks up the name by the store, falling back to an alias lookup.",
					"params": [{ "name": "key", "description": "The key to look for.", "optional": false, "type": [[["string"]]] }],
					"returns": [[["undefined", " | "], ["T"]]],
					"meta": { "line": 717, "file": "index.d.ts", "path": "node_modules/@sapphire/pieces/dist" }
				},
				{
					"name": "has",
					"description": "Checks whether a key is in the store, or is an alias",
					"params": [{ "name": "key", "description": "The key to check", "optional": false, "type": [[["string"]]] }],
					"returns": [[["boolean"]]],
					"meta": { "line": 722, "file": "index.d.ts", "path": "node_modules/@sapphire/pieces/dist" }
				},
				{
					"name": "hasAll",
					"description": "Checks if all of the elements exist in the collection.",
					"params": [
						{
							"name": "keys",
							"description": "The keys of the elements to check for",
							"optional": false,
							"type": [
								[
									["Array", "<"],
									["string", ">"]
								]
							]
						}
					],
					"returns": [[["boolean"]]],
					"returnsDescription": "`true` if all of the elements exist, `false` if at least one does not exist.",
					"meta": { "line": 32, "file": "index.d.ts", "path": "node_modules/@discordjs/collection/dist" }
				},
				{
					"name": "hasAny",
					"description": "Checks if any of the elements exist in the collection.",
					"params": [
						{
							"name": "keys",
							"description": "The keys of the elements to check for",
							"optional": false,
							"type": [
								[
									["Array", "<"],
									["string", ">"]
								]
							]
						}
					],
					"returns": [[["boolean"]]],
					"returnsDescription": "`true` if any of the elements exist, `false` if none exist.",
					"meta": { "line": 40, "file": "index.d.ts", "path": "node_modules/@discordjs/collection/dist" }
				},
				{
					"name": "insert",
					"description": "Inserts a piece into the store, and adds all the aliases.",
					"params": [
						{
							"name": "piece",
							"description": "The piece to be inserted into the store.",
							"optional": false,
							"type": [[["T"]]]
						}
					],
					"returns": [
						[
							["Promise", "<"],
							["T", ">"]
						]
					],
					"returnsDescription": "The inserted piece.",
					"meta": { "line": 734, "file": "index.d.ts", "path": "node_modules/@sapphire/pieces/dist" }
				},
				{
					"name": "intersect",
					"description": "The intersect method returns a new structure containing items where the keys are present in both original structures.",
					"params": [
						{
							"name": "other",
							"description": "The other Collection to filter against",
							"optional": false,
							"type": [
								[
									["Collection", "<"],
									["string", ", "],
									["T", ">"]
								]
							]
						}
					],
					"returns": [
						[
							["Collection", "<"],
							["string", ", "],
							["T", ">"]
						]
					],
					"meta": { "line": 338, "file": "index.d.ts", "path": "node_modules/@discordjs/collection/dist" }
				},
				{
					"name": "keyAt",
					"description": "Identical to [Array.at()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/at).\nReturns the key at a given index, allowing for positive and negative integers.\nNegative integers count back from the last item in the collection.",
					"params": [
						{
							"name": "index",
							"description": "The index of the key to obtain",
							"optional": true,
							"type": [[["number"]]]
						}
					],
					"returns": [[["undefined", " | "], ["string"]]],
					"meta": { "line": 95, "file": "index.d.ts", "path": "node_modules/@discordjs/collection/dist" }
				},
				{
					"name": "keys",
					"description": "Returns an iterable of keys in the map",
					"returns": [
						[
							["IterableIterator", "<"],
							["string", ">"]
						]
					]
				},
				{
					"name": "last",
					"description": "Obtains the last value(s) in this collection.",
					"returns": [[["undefined", " | "], ["T"]]],
					"returnsDescription": "A single value if no amount is provided or an array of values, starting from the start if\namount is negative",
					"meta": { "line": 68, "file": "index.d.ts", "path": "node_modules/@discordjs/collection/dist" }
				},
				{
					"name": "lastKey",
					"description": "Obtains the last key(s) in this collection.",
					"returns": [[["undefined", " | "], ["string"]]],
					"returnsDescription": "A single key if no amount is provided or an array of keys, starting from the start if\namount is negative",
					"meta": { "line": 78, "file": "index.d.ts", "path": "node_modules/@discordjs/collection/dist" }
				},
				{
					"name": "load",
					"description": "Loads one or more pieces from a path.",
					"params": [
						{
							"name": "root",
							"description": "The root directory the file is from.",
							"optional": false,
							"type": [[["string"]]]
						},
						{
							"name": "path",
							"description": "The path of the file to load, relative to the `root`.",
							"optional": false,
							"type": [[["string"]]]
						}
					],
					"returns": [
						[
							["Promise", "<"],
							["Array", "<"],
							["T", ">>"]
						]
					],
					"returnsDescription": "All the loaded pieces.",
					"meta": { "line": 312, "file": "index.d.ts", "path": "node_modules/@sapphire/pieces/dist" }
				},
				{
					"name": "loadAll",
					"description": "Loads all pieces from all directories specified by {@link paths}.",
					"returns": [
						[
							["Promise", "<"],
							["void", ">"]
						]
					],
					"meta": { "line": 326, "file": "index.d.ts", "path": "node_modules/@sapphire/pieces/dist" }
				},
				{
					"name": "map",
					"description": "Maps each item to another value into an array. Identical in behavior to\n[Array.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map).",
					"see": [],
					"examples": ["collection.map(user => user.tag);"],
					"abstract": false,
					"deprecated": false,
					"emits": [],
					"params": [
						{
							"name": "fn",
							"description": "Function that produces an element of the new array, taking three arguments",
							"optional": false,
							"type": [
								[
									["("],
									["value", ": "],
									["T", ", "],
									["key", ": "],
									["string", ", "],
									["collection", ": "],
									["AliasStore", "<"],
									["T", ">) => "],
									["T"]
								]
							]
						}
					],
					"returns": [
						[
							["Array", "<"],
							["T", ">"]
						]
					],
					"meta": { "line": 211, "file": "index.d.ts", "path": "node_modules/@discordjs/collection/dist" }
				},
				{
					"name": "mapValues",
					"description": "Maps each item to another value into a collection. Identical in behavior to\n[Array.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map).",
					"see": [],
					"examples": ["collection.mapValues(user => user.tag);"],
					"abstract": false,
					"deprecated": false,
					"emits": [],
					"params": [
						{
							"name": "fn",
							"description": "Function that produces an element of the new collection, taking three arguments",
							"optional": false,
							"type": [
								[
									["("],
									["value", ": "],
									["T", ", "],
									["key", ": "],
									["string", ", "],
									["collection", ": "],
									["AliasStore", "<"],
									["T", ">) => "],
									["T"]
								]
							]
						}
					],
					"returns": [
						[
							["Collection", "<"],
							["string", ", "],
							["T", ">"]
						]
					],
					"meta": { "line": 223, "file": "index.d.ts", "path": "node_modules/@discordjs/collection/dist" }
				},
				{
					"name": "partition",
					"description": "Partitions the collection into two collections where the first collection\ncontains the items that passed and the second contains the items that failed.",
					"see": [],
					"examples": ["const [big, small] = collection.partition(guild => guild.memberCount > 250);"],
					"abstract": false,
					"deprecated": false,
					"emits": [],
					"params": [
						{
							"name": "fn",
							"description": "Function used to test (should return a boolean)",
							"optional": false,
							"type": [
								[
									["("],
									["value", ": "],
									["T", ", "],
									["key", ": "],
									["string", ", "],
									["collection", ": "],
									["AliasStore", "<"],
									["T", ">) => "],
									["key", " "],
									["is", " "],
									["K2"]
								]
							]
						}
					],
					"returns": [
						[
							["["],
							["Collection", "<"],
							["K2", ", "],
							["T", ">, "],
							["Collection", "<"],
							["Exclude", "<"],
							["string", ", "],
							["K2", ">, "],
							["T", ">]"]
						]
					],
					"meta": { "line": 183, "file": "index.d.ts", "path": "node_modules/@discordjs/collection/dist" }
				},
				{
					"name": "random",
					"description": "Obtains unique random value(s) from this collection.",
					"returns": [[["undefined", " | "], ["T"]]],
					"returnsDescription": "A single value if no amount is provided or an array of values",
					"meta": { "line": 103, "file": "index.d.ts", "path": "node_modules/@discordjs/collection/dist" }
				},
				{
					"name": "randomKey",
					"description": "Obtains unique random key(s) from this collection.",
					"returns": [[["undefined", " | "], ["string"]]],
					"returnsDescription": "A single key if no amount is provided or an array",
					"meta": { "line": 112, "file": "index.d.ts", "path": "node_modules/@discordjs/collection/dist" }
				},
				{
					"name": "reduce",
					"description": "Applies a function to produce a single value. Identical in behavior to\n[Array.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).",
					"see": [],
					"examples": ["collection.reduce((acc, guild) => acc + guild.memberCount, 0);"],
					"abstract": false,
					"deprecated": false,
					"emits": [],
					"params": [
						{
							"name": "fn",
							"description": "Function used to reduce, taking four arguments; `accumulator`, `currentValue`, `currentKey`,\nand `collection`",
							"optional": false,
							"type": [
								[
									["("],
									["accumulator", ": "],
									["T", ", "],
									["value", ": "],
									["T", ", "],
									["key", ": "],
									["string", ", "],
									["collection", ": "],
									["AliasStore", "<"],
									["T", ">) => "],
									["T"]
								]
							]
						},
						{
							"name": "initialValue",
							"description": "Starting value for the accumulator",
							"optional": true,
							"type": [[["T"]]]
						}
					],
					"returns": [[["T"]]],
					"meta": { "line": 264, "file": "index.d.ts", "path": "node_modules/@discordjs/collection/dist" }
				},
				{
					"name": "registerPath",
					"description": "Registers a directory into the store.",
					"see": [],
					"examples": [
						"```typescript\nstore\n  .registerPath(resolve('commands'))\n  .registerPath(resolve('third-party', 'commands'));\n```"
					],
					"abstract": false,
					"deprecated": false,
					"emits": [],
					"params": [{ "name": "path", "description": "The path to be added.", "optional": false, "type": [[["string"]]] }],
					"returns": [
						[
							["AliasStore", "<"],
							["T", ">"]
						]
					],
					"meta": { "line": 305, "file": "index.d.ts", "path": "node_modules/@sapphire/pieces/dist" }
				},
				{
					"name": "resolve",
					"description": "Resolves a piece by its name or its instance.",
					"params": [
						{
							"name": "name",
							"description": "The name of the piece or the instance itself.",
							"optional": false,
							"type": [[["string", " | "], ["T"]]]
						}
					],
					"returns": [[["T"]]],
					"returnsDescription": "The resolved piece.",
					"meta": { "line": 332, "file": "index.d.ts", "path": "node_modules/@sapphire/pieces/dist" }
				},
				{
					"name": "set",
					"params": [
						{ "name": "key", "optional": false, "type": [[["string"]]] },
						{ "name": "value", "optional": false, "type": [[["T"]]] }
					],
					"returns": [
						[
							["AliasStore", "<"],
							["T", ">"]
						]
					]
				},
				{
					"name": "some",
					"description": "Checks if there exists an item that passes a test. Identical in behavior to\n[Array.some()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some).",
					"see": [],
					"examples": ["collection.some(user => user.discriminator === '0000');"],
					"abstract": false,
					"deprecated": false,
					"emits": [],
					"params": [
						{
							"name": "fn",
							"description": "Function used to test (should return a boolean)",
							"optional": false,
							"type": [
								[
									["("],
									["value", ": "],
									["T", ", "],
									["key", ": "],
									["string", ", "],
									["collection", ": "],
									["AliasStore", "<"],
									["T", ">) => "],
									["boolean"]
								]
							]
						}
					],
					"returns": [[["boolean"]]],
					"meta": { "line": 235, "file": "index.d.ts", "path": "node_modules/@discordjs/collection/dist" }
				},
				{
					"name": "sort",
					"description": "The sort method sorts the items of a collection in place and returns it.\nThe sort is not necessarily stable in Node 10 or older.\nThe default sort order is according to string Unicode code points.",
					"see": [],
					"examples": ["collection.sort((userA, userB) => userA.createdTimestamp - userB.createdTimestamp);"],
					"abstract": false,
					"deprecated": false,
					"emits": [],
					"params": [
						{
							"name": "compareFunction",
							"description": "Specifies a function that defines the sort order.\nIf omitted, the collection is sorted according to each character's Unicode code point value, according to the string conversion of each element.",
							"optional": true,
							"type": [
								[
									["Comparator", "<"],
									["string", ", "],
									["T", ">"]
								]
							]
						}
					],
					"returns": [
						[
							["AliasStore", "<"],
							["T", ">"]
						]
					],
					"meta": { "line": 332, "file": "index.d.ts", "path": "node_modules/@discordjs/collection/dist" }
				},
				{
					"name": "sorted",
					"description": "The sorted method sorts the items of a collection and returns it.\nThe sort is not necessarily stable in Node 10 or older.\nThe default sort order is according to string Unicode code points.",
					"see": [],
					"examples": ["collection.sorted((userA, userB) => userA.createdTimestamp - userB.createdTimestamp);"],
					"abstract": false,
					"deprecated": false,
					"emits": [],
					"params": [
						{
							"name": "compareFunction",
							"description": "Specifies a function that defines the sort order.\nIf omitted, the collection is sorted according to each character's Unicode code point value,\naccording to the string conversion of each element.",
							"optional": true,
							"type": [
								[
									["Comparator", "<"],
									["string", ", "],
									["T", ">"]
								]
							]
						}
					],
					"returns": [
						[
							["Collection", "<"],
							["string", ", "],
							["T", ">"]
						]
					],
					"meta": { "line": 357, "file": "index.d.ts", "path": "node_modules/@discordjs/collection/dist" }
				},
				{
					"name": "sweep",
					"description": "Removes items that satisfy the provided filter function.",
					"params": [
						{
							"name": "fn",
							"description": "Function used to test (should return a boolean)",
							"optional": false,
							"type": [
								[
									["("],
									["value", ": "],
									["T", ", "],
									["key", ": "],
									["string", ", "],
									["collection", ": "],
									["AliasStore", "<"],
									["T", ">) => "],
									["boolean"]
								]
							]
						}
					],
					"returns": [[["number"]]],
					"returnsDescription": "The number of removed entries",
					"meta": { "line": 154, "file": "index.d.ts", "path": "node_modules/@discordjs/collection/dist" }
				},
				{
					"name": "tap",
					"description": "Runs a function on the collection and returns the collection.",
					"see": [],
					"examples": [
						"collection\n .tap(coll => console.log(coll.size))\n .filter(user => user.bot)\n .tap(coll => console.log(coll.size))"
					],
					"abstract": false,
					"deprecated": false,
					"emits": [],
					"params": [
						{
							"name": "fn",
							"description": "Function to execute",
							"optional": false,
							"type": [[["("], ["collection", ": "], ["AliasStore", "<"], ["T", ">) => "], ["void"]]]
						}
					],
					"returns": [
						[
							["AliasStore", "<"],
							["T", ">"]
						]
					],
					"meta": { "line": 293, "file": "index.d.ts", "path": "node_modules/@discordjs/collection/dist" }
				},
				{
					"name": "toJSON",
					"returns": [
						[
							["Array", "<"],
							["T", ">"]
						]
					],
					"meta": { "line": 358, "file": "index.d.ts", "path": "node_modules/@discordjs/collection/dist" }
				},
				{
					"name": "unload",
					"description": "Unloads a piece given its instance or its name, and removes all the aliases.",
					"params": [
						{
							"name": "name",
							"description": "The name of the file to load.",
							"optional": false,
							"type": [[["string", " | "], ["T"]]]
						}
					],
					"returns": [
						[
							["Promise", "<"],
							["T", ">"]
						]
					],
					"returnsDescription": "Returns the piece that was unloaded.",
					"meta": { "line": 728, "file": "index.d.ts", "path": "node_modules/@sapphire/pieces/dist" }
				},
				{
					"name": "unloadAll",
					"description": "Unloads all pieces from the store.",
					"returns": [
						[
							["Promise", "<"],
							["Array", "<"],
							["T", ">>"]
						]
					],
					"meta": { "line": 322, "file": "index.d.ts", "path": "node_modules/@sapphire/pieces/dist" }
				},
				{
					"name": "values",
					"description": "Returns an iterable of values in the map",
					"returns": [
						[
							["IterableIterator", "<"],
							["T", ">"]
						]
					]
				}
			],
			"meta": { "line": 708, "file": "index.d.ts", "path": "node_modules/@sapphire/pieces/dist" }
		},
		{
			"name": "Args",
			"description": "The argument parser to be used in {@link Command}.",
			"construct": {
				"name": "constructor",
				"params": [
					{
						"name": "message",
						"optional": false,
						"type": [
							[
								["Message", "<"],
								["boolean", ">"]
							]
						]
					},
					{
						"name": "command",
						"optional": false,
						"type": [
							[
								["Command", "<"],
								["Args", ", "],
								["CommandOptions", ">"]
							]
						]
					},
					{ "name": "parser", "optional": false, "type": [[["Args"]]] },
					{ "name": "context", "optional": false, "type": [[["CommandContext"]]] }
				],
				"returns": [[["Args"]]],
				"meta": { "line": 57, "file": "Args.ts", "path": "src/lib/parsers" }
			},
			"props": [
				{
					"name": "command",
					"description": "The command that is being run.",
					"readonly": true,
					"type": [
						[
							["Command", "<"],
							["Args", ", "],
							["CommandOptions", ">"]
						]
					],
					"meta": { "line": 38, "file": "Args.ts", "path": "src/lib/parsers" }
				},
				{
					"name": "commandContext",
					"description": "The context of the command being run.",
					"readonly": true,
					"type": [[["CommandContext"]]],
					"meta": { "line": 43, "file": "Args.ts", "path": "src/lib/parsers" }
				},
				{
					"name": "message",
					"description": "The original message that triggered the command.",
					"readonly": true,
					"type": [
						[
							["Message", "<"],
							["boolean", ">"]
						]
					],
					"meta": { "line": 33, "file": "Args.ts", "path": "src/lib/parsers" }
				},
				{
					"name": "parser",
					"description": "The internal Lexure parser.",
					"readonly": true,
					"type": [[["Args"]]],
					"meta": { "line": 48, "file": "Args.ts", "path": "src/lib/parsers" }
				},
				{
					"name": "states",
					"description": "The states stored in the args.",
					"see": ["Args#save", "Args#restore"],
					"access": "private",
					"readonly": true,
					"abstract": false,
					"deprecated": false,
					"default": "[]",
					"type": [
						[
							["Array", "<"],
							["ArgsState", ">"]
						]
					],
					"meta": { "line": 55, "file": "Args.ts", "path": "src/lib/parsers" }
				},
				{
					"name": "finished",
					"description": "Whether all arguments have been consumed.",
					"readonly": true,
					"type": [[["boolean"]]],
					"meta": { "line": 627, "file": "Args.ts", "path": "src/lib/parsers" }
				}
			],
			"methods": [
				{
					"name": "getFlags",
					"description": "Checks if one or more flag were given.",
					"see": [],
					"examples": [
						"```typescript\n// Suppose args are from '--f --g'.\nconsole.log(args.getFlags('f'));\n// >>> true\n\nconsole.log(args.getFlags('g', 'h'));\n// >>> true\n\nconsole.log(args.getFlags('h'));\n// >>> false\n```"
					],
					"abstract": false,
					"deprecated": false,
					"emits": [],
					"params": [
						{
							"name": "keys",
							"description": "The name(s) of the flag.",
							"optional": false,
							"type": [
								[
									["readonly", " "],
									["Array", "<"],
									["string", ">"]
								]
							]
						}
					],
					"returns": [[["boolean"]]],
					"meta": { "line": 564, "file": "Args.ts", "path": "src/lib/parsers" }
				},
				{
					"name": "getOption",
					"description": "Gets the last value of one or more options.",
					"see": [],
					"examples": [
						"```typescript\n// Suppose args are from '--a=1 --b=2 --c=3'.\nconsole.log(args.getOption('a'));\n// >>> '1'\n\nconsole.log(args.getOption('b', 'c'));\n// >>> '2'\n\nconsole.log(args.getOption('d'));\n// >>> null\n```"
					],
					"abstract": false,
					"deprecated": false,
					"emits": [],
					"params": [
						{
							"name": "keys",
							"description": "The name(s) of the option.",
							"optional": false,
							"type": [
								[
									["readonly", " "],
									["Array", "<"],
									["string", ">"]
								]
							]
						}
					],
					"returns": [[["null", " | "], ["string"]]],
					"meta": { "line": 584, "file": "Args.ts", "path": "src/lib/parsers" }
				},
				{
					"name": "getOptions",
					"description": "Gets all the values of one or more option.",
					"see": [],
					"examples": [
						"```typescript\n// Suppose args are from '--a=1 --a=1 --b=2 --c=3'.\nconsole.log(args.getOptions('a'));\n// >>> ['1', '1']\n\nconsole.log(args.getOptions('b', 'c'));\n// >>> ['2', '3']\n\nconsole.log(args.getOptions('d'));\n// >>> null\n```"
					],
					"abstract": false,
					"deprecated": false,
					"emits": [],
					"params": [
						{
							"name": "keys",
							"description": "The name(s) of the option.",
							"optional": false,
							"type": [
								[
									["readonly", " "],
									["Array", "<"],
									["string", ">"]
								]
							]
						}
					],
					"returns": [
						[
							["null", " | "],
							["Array", "<"],
							["string", ">"]
						]
					],
					"meta": { "line": 604, "file": "Args.ts", "path": "src/lib/parsers" }
				},
				{
					"name": "missingArguments",
					"returns": [
						[
							["Err", "<"],
							["UserError", ">"]
						]
					],
					"meta": { "line": 649, "file": "Args.ts", "path": "src/lib/parsers" }
				},
				{
					"name": "next",
					"description": "Similar to {@link Args.nextMaybe} but returns the value on success, null otherwise.",
					"see": [],
					"examples": ["```typescript\n// !numbers 1 2 3\n\nconsole.log(args.next());\n// -> '1'\n```"],
					"abstract": false,
					"deprecated": false,
					"emits": [],
					"returns": [[["string"]]],
					"meta": { "line": 525, "file": "Args.ts", "path": "src/lib/parsers" }
				},
				{
					"name": "nextMaybe",
					"description": "Retrieves the next raw argument from the parser.",
					"see": [],
					"examples": ["```typescript\n// !numbers 1 2 3\n\nconsole.log(args.nextMaybe());\n// -> { exists: true, value: '1' }\n```"],
					"abstract": false,
					"deprecated": false,
					"emits": [],
					"returns": [
						[
							["Maybe", "<"],
							["string", ">"]
						]
					],
					"meta": { "line": 492, "file": "Args.ts", "path": "src/lib/parsers" }
				},
				{
					"name": "peek",
					"description": "Similar to {@link Args.peekResult} but returns the value on success, throwing otherwise.",
					"see": [],
					"examples": [
						"```typescript\n// !bigintsumthensquarefirst 25 50 75\nconst resolver = Args.make((arg) => {\n  try {\n    return ok(BigInt(arg));\n  } catch {\n    return err(new UserError('InvalidBigInt', 'You must specify a valid number for a bigint.'));\n  }\n});\n\nconst peeked = await args.peek(() => args.repeatResult(resolver));\nawait message.channel.send(`Sum: **${peeked.reduce((x, y) => x + y, 0)}**`); // Sum: 150\n\nconst first = await args.pick(resolver);\nawait message.channel.send(`First bigint squared: ${first**2n}`); // First bigint squared: 625\n```"
					],
					"abstract": false,
					"deprecated": false,
					"emits": [],
					"params": [
						{
							"name": "type",
							"description": "The function, custom argument, or argument name.",
							"optional": false,
							"type": [[["(..."], ["args", ": "], ["unknown", "[]) => "], ["Result", "<"], ["T", ">"]]]
						}
					],
					"returns": [
						[
							["Promise", "<"],
							["T", ">"]
						]
					],
					"meta": { "line": 436, "file": "Args.ts", "path": "src/lib/parsers" }
				},
				{
					"name": "peekResult",
					"description": "Peeks the following parameter(s) without advancing the parser's state.\nPassing a function as a parameter allows for returning {@link Args.pickResult}, {@link Args.repeatResult},\nor {@link Args.restResult}; otherwise, passing the custom argument or the argument type with options\nwill use {@link Args.pickResult} and only peek a single argument.",
					"see": [],
					"examples": [
						"```typescript\n// !reversedandscreamfirst hello world\nconst resolver = Args.make((arg) => ok(arg.split('').reverse().join('')));\n\nconst result = await args.peekResult(() => args.repeatResult(resolver));\nif (isOk(result)) await message.channel.send(\n  `Reversed ${result.value.length} word(s): ${result.value.join(' ')}`\n); // Reversed 2 word(s): olleh dlrow\n\nconst firstWord = await args.pickResult('string');\nif (isOk(firstWord)) await message.channel.send(firstWord.value.toUpperCase()); // HELLO\n```"
					],
					"abstract": false,
					"deprecated": false,
					"emits": [],
					"params": [
						{
							"name": "type",
							"description": "The function, custom argument, or argument name.",
							"optional": false,
							"type": [[["(..."], ["args", ": "], ["unknown", "[]) => "], ["Result", "<"], ["T", ">"]]]
						}
					],
					"returns": [
						[
							["Promise", "<"],
							["Result", "<"],
							["T", ", "],
							["UserError", ">>"]
						]
					],
					"meta": { "line": 362, "file": "Args.ts", "path": "src/lib/parsers" }
				},
				{
					"name": "pick",
					"description": "Similar to {@link Args.pickResult} but returns the value on success, throwing otherwise.",
					"see": [],
					"examples": [
						"```typescript\n// !square 5\nconst resolver = Args.make((arg) => {\n  const parsed = Number(argument);\n  if (Number.isNaN(parsed)) return err(new UserError('ArgumentNumberNaN', 'You must write a valid number.'));\n  return ok(parsed);\n});\nconst a = await args.pick(resolver);\n\nawait message.channel.send(`The result is: ${a ** 2}!`);\n// Sends \"The result is: 25\"\n```"
					],
					"abstract": false,
					"deprecated": false,
					"emits": [],
					"params": [
						{
							"name": "type",
							"description": "The type of the argument.",
							"optional": false,
							"type": [
								[
									["IArgument", "<"],
									["T", ">"]
								]
							]
						},
						{ "name": "options", "optional": true, "type": [[["ArgOptions"]]] }
					],
					"returns": [
						[
							["Promise", "<"],
							["T", ">"]
						]
					],
					"meta": { "line": 148, "file": "Args.ts", "path": "src/lib/parsers" }
				},
				{
					"name": "pickResult",
					"description": "Retrieves the next parameter and parses it. Advances index on success.",
					"see": [],
					"examples": [
						"```typescript\n// !square 5\nconst resolver = Args.make((arg) => {\n  const parsed = Number(argument);\n  if (Number.isNaN(parsed)) return err(new UserError('ArgumentNumberNaN', 'You must write a valid number.'));\n  return ok(parsed);\n});\nconst a = await args.pickResult(resolver);\nif (!a.success) throw new UserError('ArgumentNumberNaN', 'You must write a valid number.');\n\nawait message.channel.send(`The result is: ${a.value ** 2}!`);\n// Sends \"The result is: 25\"\n```"
					],
					"abstract": false,
					"deprecated": false,
					"emits": [],
					"params": [
						{
							"name": "type",
							"description": "The type of the argument.",
							"optional": false,
							"type": [
								[
									["IArgument", "<"],
									["T", ">"]
								]
							]
						},
						{ "name": "options", "optional": true, "type": [[["ArgOptions"]]] }
					],
					"returns": [
						[
							["Promise", "<"],
							["Result", "<"],
							["T", ", "],
							["UserError", ">>"]
						]
					],
					"meta": { "line": 94, "file": "Args.ts", "path": "src/lib/parsers" }
				},
				{
					"name": "repeat",
					"description": "Similar to {@link Args.repeatResult} but returns the value on success, throwing otherwise.",
					"see": [],
					"examples": [
						"```typescript\n// !reverse-each 2 Hello World!\nconst resolver = Args.make((arg) => ok(arg.split('').reverse()));\nconst result = await args.repeat(resolver, { times: 5 });\nawait message.channel.send(`You have written ${result.length} word(s): ${result.join(' ')}`);\n// Sends \"You have written 2 word(s): Hello World!\"\n```"
					],
					"abstract": false,
					"deprecated": false,
					"emits": [],
					"params": [
						{
							"name": "type",
							"description": "The type of the argument.",
							"optional": false,
							"type": [
								[
									["IArgument", "<"],
									["T", ">"]
								]
							]
						},
						{ "name": "options", "optional": true, "type": [[["RepeatArgOptions"]]] }
					],
					"returns": [
						[
							["Promise", "<"],
							["Array", "<"],
							["T", ">>"]
						]
					],
					"meta": { "line": 323, "file": "Args.ts", "path": "src/lib/parsers" }
				},
				{
					"name": "repeatResult",
					"description": "Retrieves all the following arguments.",
					"see": [],
					"examples": [
						"```typescript\n// !add 2 Hello World!\nconst resolver = Args.make((arg) => ok(arg.split('').reverse()));\nconst result = await args.repeatResult(resolver, { times: 5 });\nif (!result.success) throw new UserError('CountArgumentError', 'You must write up to 5 words.');\n\nawait message.channel.send(`You have written ${result.value.length} word(s): ${result.value.join(' ')}`);\n// Sends \"You have written 2 word(s): olleH !dlroW\"\n```"
					],
					"abstract": false,
					"deprecated": false,
					"emits": [],
					"params": [
						{
							"name": "type",
							"description": "The type of the argument.",
							"optional": false,
							"type": [
								[
									["IArgument", "<"],
									["T", ">"]
								]
							]
						},
						{ "name": "options", "optional": true, "type": [[["RepeatArgOptions"]]] }
					],
					"returns": [
						[
							["Promise", "<"],
							["Result", "<"],
							["Array", "<"],
							["T", ">, "],
							["UserError", ">>"]
						]
					],
					"meta": { "line": 267, "file": "Args.ts", "path": "src/lib/parsers" }
				},
				{
					"name": "resolveArgument",
					"description": "Resolves an argument.",
					"access": "private",
					"params": [
						{
							"name": "arg",
							"description": "The argument name or {@link IArgument} instance.",
							"optional": false,
							"type": [
								[
									["keyof", " "],
									["ArgType", " | "],
									["IArgument", "<"],
									["T", ">"]
								]
							]
						}
					],
					"returns": [
						[
							["undefined", " | "],
							["IArgument", "<"],
							["T", ">"]
						]
					],
					"meta": { "line": 657, "file": "Args.ts", "path": "src/lib/parsers" }
				},
				{
					"name": "rest",
					"description": "Similar to {@link Args.restResult} but returns the value on success, throwing otherwise.",
					"see": [],
					"examples": [
						"```typescript\n// !reverse Hello world!\nconst resolver = Args.make((arg) => ok(arg.split('').reverse()));\nconst a = await args.rest(resolver);\nawait message.channel.send(`The reversed value is... ${a}`);\n// Sends \"The reversed value is... !dlrow olleH\"\n```"
					],
					"abstract": false,
					"deprecated": false,
					"emits": [],
					"params": [
						{
							"name": "type",
							"description": "The type of the argument.",
							"optional": false,
							"type": [
								[
									["IArgument", "<"],
									["T", ">"]
								]
							]
						},
						{ "name": "options", "optional": true, "type": [[["ArgOptions"]]] }
					],
					"returns": [
						[
							["Promise", "<"],
							["T", ">"]
						]
					],
					"meta": { "line": 233, "file": "Args.ts", "path": "src/lib/parsers" }
				},
				{
					"name": "restResult",
					"description": "Retrieves all the following arguments.",
					"see": [],
					"examples": [
						"```typescript\n// !reverse Hello world!\nconst resolver = Args.make((arg) => ok(arg.split('').reverse()));\nconst a = await args.restResult(resolver);\nif (!a.success) throw new UserError('AddArgumentError', 'You must write some text.');\n\nawait message.channel.send(`The reversed value is... ${a.value}`);\n// Sends \"The reversed value is... !dlrow olleH\"\n```"
					],
					"abstract": false,
					"deprecated": false,
					"emits": [],
					"params": [
						{
							"name": "type",
							"description": "The type of the argument.",
							"optional": false,
							"type": [
								[
									["IArgument", "<"],
									["T", ">"]
								]
							]
						},
						{ "name": "options", "optional": true, "type": [[["ArgOptions"]]] }
					],
					"returns": [
						[
							["Promise", "<"],
							["Result", "<"],
							["T", ", "],
							["UserError", ">>"]
						]
					],
					"meta": { "line": 182, "file": "Args.ts", "path": "src/lib/parsers" }
				},
				{
					"name": "restore",
					"description": "Restores the previously saved state from the stack.",
					"see": ["Args#save"],
					"examples": [],
					"abstract": false,
					"deprecated": false,
					"emits": [],
					"returns": [[["void"]]],
					"meta": { "line": 620, "file": "Args.ts", "path": "src/lib/parsers" }
				},
				{
					"name": "save",
					"description": "Saves the current state into the stack following a FILO strategy (first-in, last-out).",
					"see": ["Args#restore"],
					"examples": [],
					"abstract": false,
					"deprecated": false,
					"emits": [],
					"returns": [[["void"]]],
					"meta": { "line": 612, "file": "Args.ts", "path": "src/lib/parsers" }
				},
				{
					"name": "start",
					"description": "Sets the parser to the first token.",
					"returns": [[["Args"]]],
					"meta": { "line": 67, "file": "Args.ts", "path": "src/lib/parsers" }
				},
				{
					"name": "toJSON",
					"description": "Defines the `JSON.stringify` override.",
					"returns": [
						[
							["{"],
							["\ncommand", ": "],
							["Command", "<"],
							["Args", ", "],
							["CommandOptions", ">,"],
							["\ncommandContext", ": "],
							["CommandContext", ","],
							["\nmessage", ": "],
							["Message", "<"],
							["boolean", ">"],
							["\n", "}"]
						]
					],
					"meta": { "line": 634, "file": "Args.ts", "path": "src/lib/parsers" }
				},
				{
					"name": "unavailableArgument",
					"params": [
						{
							"name": "type",
							"optional": false,
							"type": [
								[
									["string", " | "],
									["IArgument", "<"],
									["T", ">"]
								]
							]
						}
					],
					"returns": [
						[
							["Err", "<"],
							["UserError", ">"]
						]
					],
					"meta": { "line": 638, "file": "Args.ts", "path": "src/lib/parsers" }
				},
				{
					"name": "error",
					"description": "Constructs an {@link Err} result containing an {@link ArgumentError}.",
					"scope": "static",
					"params": [
						{
							"name": "options",
							"description": "The options for the argument error.",
							"optional": false,
							"type": [
								[
									["Options", "<"],
									["T", ">"]
								]
							]
						}
					],
					"returns": [
						[
							["Err", "<"],
							["ArgumentError", "<"],
							["T", ">>"]
						]
					],
					"meta": { "line": 682, "file": "Args.ts", "path": "src/lib/parsers" }
				},
				{
					"name": "make",
					"description": "Converts a callback into an usable argument.",
					"scope": "static",
					"params": [
						{
							"name": "cb",
							"description": "The callback to convert into an {@link IArgument}.",
							"optional": false,
							"type": [
								[
									["("],
									["parameter", ": "],
									["string", ", "],
									["context", ": "],
									["Context", "<"],
									["T", ">) => "],
									["Result", "<"],
									["T", ">"]
								]
							]
						},
						{ "name": "name", "optional": true, "default": "''", "type": [[["string"]]] }
					],
					"returns": [
						[
							["IArgument", "<"],
							["T", ">"]
						]
					],
					"meta": { "line": 666, "file": "Args.ts", "path": "src/lib/parsers" }
				},
				{
					"name": "ok",
					"description": "Constructs an {@link Ok} result.",
					"scope": "static",
					"params": [{ "name": "value", "description": "The value to pass.", "optional": false, "type": [[["T"]]] }],
					"returns": [
						[
							["Ok", "<"],
							["T", ">"]
						]
					],
					"meta": { "line": 674, "file": "Args.ts", "path": "src/lib/parsers" }
				}
			],
			"meta": { "line": 29, "file": "Args.ts", "path": "src/lib/parsers" }
		},
		{
			"name": "Argument",
			"description": "The base argument class. This class is abstract and is to be extended by subclasses implementing the methods. In\nSapphire's workflow, arguments are called when using {@link Args}'s methods (usually used inside {@link Command}s by default).",
			"see": [],
			"extends": ["AliasPiece<O>"],
			"implements": ["IArgument<T>"],
			"abstract": false,
			"deprecated": false,
			"construct": {
				"name": "constructor",
				"params": [
					{ "name": "context", "optional": false, "type": [[["PieceContext"]]] },
					{ "name": "options", "optional": true, "type": [[["AliasPieceOptions"]]] }
				],
				"returns": [
					[
						["Argument", "<"],
						["T", ", "],
						["O", ">"]
					]
				]
			},
			"props": [
				{
					"name": "aliases",
					"description": "The aliases for the piece.",
					"type": [
						[
							["readonly", " "],
							["Array", "<"],
							["string", ">"]
						]
					],
					"meta": { "line": 690, "file": "index.d.ts", "path": "node_modules/@sapphire/pieces/dist" }
				},
				{
					"name": "enabled",
					"description": "Whether or not the piece is enabled.",
					"type": [[["boolean"]]],
					"meta": { "line": 447, "file": "index.d.ts", "path": "node_modules/@sapphire/pieces/dist" }
				},
				{
					"name": "location",
					"description": "The location metadata for the piece's file.",
					"readonly": true,
					"type": [[["PieceLocation"]]],
					"meta": { "line": 439, "file": "index.d.ts", "path": "node_modules/@sapphire/pieces/dist" }
				},
				{
					"name": "name",
					"description": "The name of the piece.",
					"readonly": true,
					"type": [[["string"]]],
					"meta": { "line": 443, "file": "index.d.ts", "path": "node_modules/@sapphire/pieces/dist" }
				},
				{
					"name": "options",
					"description": "The raw options passed to this {@link Piece}",
					"readonly": true,
					"type": [[["O"]]],
					"meta": { "line": 451, "file": "index.d.ts", "path": "node_modules/@sapphire/pieces/dist" }
				},
				{
					"name": "store",
					"description": "The store that contains the piece.",
					"readonly": true,
					"type": [
						[
							["Store", "<"],
							["Piece", "<"],
							["PieceOptions", ">>"]
						]
					],
					"meta": { "line": 435, "file": "index.d.ts", "path": "node_modules/@sapphire/pieces/dist" }
				},
				{
					"name": "container",
					"description": "A reference to the {@link Container} object for ease of use.",
					"see": ["container"],
					"readonly": true,
					"abstract": false,
					"deprecated": false,
					"type": [[["Container"]]],
					"meta": { "line": 457, "file": "index.d.ts", "path": "node_modules/@sapphire/pieces/dist" }
				}
			],
			"methods": [
				{
					"name": "error",
					"description": "Constructs an {@link ArgumentError} with a custom type.",
					"params": [
						{
							"name": "options",
							"optional": false,
							"type": [
								[
									["Omit", "<"],
									["Options", "<"],
									["T", ">, "],
									["'argument'", ">"]
								]
							]
						}
					],
					"returns": [
						[
							["Result", "<"],
							["T", ">"]
						]
					],
					"meta": { "line": 107, "file": "Argument.ts", "path": "src/lib/structures" }
				},
				{
					"name": "ok",
					"description": "Wraps a value into a successful value.",
					"params": [{ "name": "value", "description": "The value to wrap.", "optional": false, "type": [[["T"]]] }],
					"returns": [
						[
							["Result", "<"],
							["T", ">"]
						]
					],
					"meta": { "line": 97, "file": "Argument.ts", "path": "src/lib/structures" }
				},
				{
					"name": "onLoad",
					"description": "Per-piece listener that is called when the piece is loaded into the store.\nUseful to set-up asynchronous initialization tasks.",
					"returns": [[["unknown"]]],
					"meta": { "line": 462, "file": "index.d.ts", "path": "node_modules/@sapphire/pieces/dist" }
				},
				{
					"name": "onUnload",
					"description": "Per-piece listener that is called when the piece is unloaded from the store.\nUseful to set-up clean-up tasks.",
					"returns": [[["unknown"]]],
					"meta": { "line": 467, "file": "index.d.ts", "path": "node_modules/@sapphire/pieces/dist" }
				},
				{
					"name": "reload",
					"description": "Reloads the piece by loading the same path in the store.",
					"returns": [
						[
							["Promise", "<"],
							["void", ">"]
						]
					],
					"meta": { "line": 475, "file": "index.d.ts", "path": "node_modules/@sapphire/pieces/dist" }
				},
				{
					"name": "run",
					"description": "The method which is called when invoking the argument.",
					"params": [
						{ "name": "parameter", "optional": false, "type": [[["string"]]] },
						{
							"name": "context",
							"optional": false,
							"type": [
								[
									["Context", "<"],
									["T", ">"]
								]
							]
						}
					],
					"returns": [
						[
							["Result", "<"],
							["T", ">"]
						]
					],
					"meta": { "line": 91, "file": "Argument.ts", "path": "src/lib/structures" }
				},
				{
					"name": "toJSON",
					"description": "Defines the `JSON.stringify` behavior of this alias piece.",
					"returns": [[["AliasPieceJSON"]]],
					"meta": { "line": 695, "file": "index.d.ts", "path": "node_modules/@sapphire/pieces/dist" }
				},
				{
					"name": "unload",
					"description": "Unloads and disables the piece.",
					"returns": [
						[
							["Promise", "<"],
							["void", ">"]
						]
					],
					"meta": { "line": 471, "file": "index.d.ts", "path": "node_modules/@sapphire/pieces/dist" }
				}
			],
			"meta": { "line": 90, "file": "Argument.ts", "path": "src/lib/structures" }
		},
		{
			"name": "ArgumentError",
			"description": "Errors thrown by the argument parser",
			"see": [],
			"extends": ["UserError"],
			"abstract": false,
			"deprecated": false,
			"construct": {
				"name": "constructor",
				"description": "Constructs an UserError.",
				"params": [
					{
						"name": "options",
						"optional": false,
						"type": [
							[
								["Options", "<"],
								["T", ">"]
							]
						]
					}
				],
				"returns": [
					[
						["ArgumentError", "<"],
						["T", ">"]
					]
				],
				"meta": { "line": 13, "file": "ArgumentError.ts", "path": "src/lib/errors" }
			},
			"props": [
				{
					"name": "argument",
					"readonly": true,
					"type": [
						[
							["IArgument", "<"],
							["T", ">"]
						]
					],
					"meta": { "line": 10, "file": "ArgumentError.ts", "path": "src/lib/errors" }
				},
				{
					"name": "context",
					"description": "User-provided context.",
					"readonly": true,
					"type": [[["unknown"]]],
					"meta": { "line": 14, "file": "UserError.ts", "path": "src/lib/errors" }
				},
				{
					"name": "identifier",
					"description": "An identifier, useful to localize emitted errors.",
					"readonly": true,
					"type": [[["string"]]],
					"meta": { "line": 9, "file": "UserError.ts", "path": "src/lib/errors" }
				},
				{
					"name": "message",
					"type": [[["string"]]],
					"meta": { "line": 1023, "file": "lib.es5.d.ts", "path": "node_modules/typescript/lib" }
				},
				{
					"name": "parameter",
					"readonly": true,
					"type": [[["string"]]],
					"meta": { "line": 11, "file": "ArgumentError.ts", "path": "src/lib/errors" }
				},
				{
					"name": "stack",
					"type": [[["string"]]],
					"meta": { "line": 1024, "file": "lib.es5.d.ts", "path": "node_modules/typescript/lib" }
				},
				{
					"name": "prepareStackTrace",
					"description": "Optional override for formatting stack traces",
					"scope": "static",
					"type": [[["("], ["err", ": "], ["Error", ", "], ["stackTraces", ": "], ["Array", "<"], ["CallSite", ">) => "], ["any"]]],
					"meta": { "line": 11, "file": "globals.d.ts", "path": "node_modules/@types/node" }
				},
				{
					"name": "stackTraceLimit",
					"scope": "static",
					"type": [[["number"]]],
					"meta": { "line": 13, "file": "globals.d.ts", "path": "node_modules/@types/node" }
				},
				{
					"name": "name",
					"readonly": true,
					"type": [[["string"]]],
					"meta": { "line": 20, "file": "ArgumentError.ts", "path": "src/lib/errors" }
				}
			],
			"methods": [
				{
					"name": "captureStackTrace",
					"description": "Create .stack property on a target object",
					"scope": "static",
					"params": [
						{ "name": "targetObject", "optional": false, "type": [[["object"]]] },
						{ "name": "constructorOpt", "optional": true, "type": [[["Function"]]] }
					],
					"returns": [[["void"]]]
				}
			],
			"meta": { "line": 9, "file": "ArgumentError.ts", "path": "src/lib/errors" }
		},
		{
			"name": "ArgumentStore",
			"extends": ["AliasStore<Argument>"],
			"construct": {
				"name": "constructor",
				"returns": [[["ArgumentStore"]]],
				"meta": { "line": 5, "file": "ArgumentStore.ts", "path": "src/lib/structures" }
			},
			"props": [
				{
					"name": "Constructor",
					"readonly": true,
					"type": [
						[
							["Constructor", "<"],
							["Argument", "<"],
							["unknown", ", "],
							["ArgumentOptions", ">>"]
						]
					],
					"meta": { "line": 281, "file": "index.d.ts", "path": "node_modules/@sapphire/pieces/dist" }
				},
				{
					"name": "[toStringTag]",
					"readonly": true,
					"type": [[["string"]]],
					"meta": { "line": 135, "file": "lib.es2015.symbol.wellknown.d.ts", "path": "node_modules/typescript/lib" }
				},
				{
					"name": "aliases",
					"description": "The aliases referencing to pieces.",
					"readonly": true,
					"type": [
						[
							["Collection", "<"],
							["string", ", "],
							["Argument", "<"],
							["unknown", ", "],
							["ArgumentOptions", ">>"]
						]
					],
					"meta": { "line": 712, "file": "index.d.ts", "path": "node_modules/@sapphire/pieces/dist" }
				},
				{
					"name": "constructor",
					"type": [[["CollectionConstructor"]]],
					"meta": { "line": 17, "file": "index.d.ts", "path": "node_modules/@discordjs/collection/dist" }
				},
				{
					"name": "name",
					"readonly": true,
					"type": [[["string"]]],
					"meta": { "line": 282, "file": "index.d.ts", "path": "node_modules/@sapphire/pieces/dist" }
				},
				{
					"name": "paths",
					"readonly": true,
					"type": [
						[
							["Set", "<"],
							["string", ">"]
						]
					],
					"meta": { "line": 283, "file": "index.d.ts", "path": "node_modules/@sapphire/pieces/dist" }
				},
				{
					"name": "size",
					"readonly": true,
					"type": [[["number"]]],
					"meta": { "line": 28, "file": "lib.es2015.collection.d.ts", "path": "node_modules/typescript/lib" }
				},
				{
					"name": "strategy",
					"readonly": true,
					"type": [
						[
							["ILoaderStrategy", "<"],
							["Argument", "<"],
							["unknown", ", "],
							["ArgumentOptions", ">>"]
						]
					],
					"meta": { "line": 284, "file": "index.d.ts", "path": "node_modules/@sapphire/pieces/dist" }
				},
				{
					"name": "[species]",
					"scope": "static",
					"readonly": true,
					"type": [[["MapConstructor"]]],
					"meta": { "line": 317, "file": "lib.es2015.symbol.wellknown.d.ts", "path": "node_modules/typescript/lib" }
				},
				{
					"name": "default",
					"scope": "static",
					"readonly": true,
					"type": [[["("], ["typeof", " "], ["Collection", ")"]]],
					"meta": { "line": 24, "file": "index.d.ts", "path": "node_modules/@discordjs/collection/dist" }
				},
				{
					"name": "defaultStrategy",
					"description": "The default strategy, defaults to {@link LoaderStrategy}, which is constructed on demand when a store is constructed,\nwhen none was set beforehand.",
					"scope": "static",
					"type": [
						[
							["ILoaderStrategy", "<"],
							["any", ">"]
						]
					],
					"meta": { "line": 369, "file": "index.d.ts", "path": "node_modules/@sapphire/pieces/dist" }
				},
				{
					"name": "logger",
					"description": "The default logger, defaults to `null`.",
					"scope": "static",
					"type": [[["null", " | "], ["StoreLogger"]]],
					"meta": { "line": 373, "file": "index.d.ts", "path": "node_modules/@sapphire/pieces/dist" }
				},
				{
					"name": "container",
					"description": "A reference to the {@link Container} object for ease of use.",
					"see": ["container"],
					"readonly": true,
					"abstract": false,
					"deprecated": false,
					"type": [[["Container"]]],
					"meta": { "line": 294, "file": "index.d.ts", "path": "node_modules/@sapphire/pieces/dist" }
				}
			],
			"methods": [
				{
					"name": "[iterator]",
					"description": "Returns an iterable of entries in the map.",
					"returns": [
						[
							["IterableIterator", "<["],
							["string", ", "],
							["Argument", "<"],
							["unknown", ", "],
							["ArgumentOptions", ">]>"]
						]
					]
				},
				{
					"name": "at",
					"description": "Identical to [Array.at()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/at).\nReturns the item at a given index, allowing for positive and negative integers.\nNegative integers count back from the last item in the collection.",
					"params": [
						{
							"name": "index",
							"description": "The index of the element to obtain",
							"optional": true,
							"type": [[["number"]]]
						}
					],
					"returns": [
						[
							["undefined", " | "],
							["Argument", "<"],
							["unknown", ", "],
							["ArgumentOptions", ">"]
						]
					],
					"meta": { "line": 87, "file": "index.d.ts", "path": "node_modules/@discordjs/collection/dist" }
				},
				{ "name": "clear", "returns": [[["void"]]] },
				{
					"name": "clone",
					"description": "Creates an identical shallow copy of this collection.",
					"see": [],
					"examples": ["const newColl = someColl.clone();"],
					"abstract": false,
					"deprecated": false,
					"emits": [],
					"returns": [
						[
							["Collection", "<"],
							["string", ", "],
							["Argument", "<"],
							["unknown", ", "],
							["ArgumentOptions", ">>"]
						]
					],
					"meta": { "line": 301, "file": "index.d.ts", "path": "node_modules/@discordjs/collection/dist" }
				},
				{
					"name": "concat",
					"description": "Combines this collection with others into a new collection. None of the source collections are modified.",
					"see": [],
					"examples": ["const newColl = someColl.concat(someOtherColl, anotherColl, ohBoyAColl);"],
					"abstract": false,
					"deprecated": false,
					"emits": [],
					"params": [
						{
							"name": "collections",
							"description": "Collections to merge",
							"optional": false,
							"type": [
								[
									["Array", "<"],
									["Collection", "<"],
									["string", ", "],
									["Argument", "<"],
									["unknown", ", "],
									["ArgumentOptions", ">>>"]
								]
							]
						}
					],
					"returns": [
						[
							["Collection", "<"],
							["string", ", "],
							["Argument", "<"],
							["unknown", ", "],
							["ArgumentOptions", ">>"]
						]
					],
					"meta": { "line": 310, "file": "index.d.ts", "path": "node_modules/@discordjs/collection/dist" }
				},
				{
					"name": "construct",
					"description": "Constructs a {@link Piece} instance.",
					"params": [
						{
							"name": "Ctor",
							"description": "The {@link Piece}'s constructor used to build the instance.",
							"optional": false,
							"type": [
								[
									["ILoaderResultEntry", "<"],
									["Argument", "<"],
									["unknown", ", "],
									["ArgumentOptions", ">>"]
								]
							]
						},
						{
							"name": "data",
							"description": "The module's information",
							"optional": false,
							"type": [[["HydratedModuleData"]]]
						}
					],
					"returns": [
						[
							["Argument", "<"],
							["unknown", ", "],
							["ArgumentOptions", ">"]
						]
					],
					"returnsDescription": "An instance of the constructed piece.",
					"meta": { "line": 345, "file": "index.d.ts", "path": "node_modules/@sapphire/pieces/dist" }
				},
				{
					"name": "delete",
					"params": [{ "name": "key", "optional": false, "type": [[["string"]]] }],
					"returns": [[["boolean"]]]
				},
				{
					"name": "difference",
					"description": "The difference method returns a new structure containing items where the key is present in one of the original structures but not the other.",
					"params": [
						{
							"name": "other",
							"description": "The other Collection to filter against",
							"optional": false,
							"type": [
								[
									["Collection", "<"],
									["string", ", "],
									["Argument", "<"],
									["unknown", ", "],
									["ArgumentOptions", ">>"]
								]
							]
						}
					],
					"returns": [
						[
							["Collection", "<"],
							["string", ", "],
							["Argument", "<"],
							["unknown", ", "],
							["ArgumentOptions", ">>"]
						]
					],
					"meta": { "line": 344, "file": "index.d.ts", "path": "node_modules/@discordjs/collection/dist" }
				},
				{
					"name": "each",
					"description": "Identical to\n[Map.forEach()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/forEach),\nbut returns the collection instead of undefined.",
					"see": [],
					"examples": [
						"collection\n .each(user => console.log(user.username))\n .filter(user => user.bot)\n .each(user => console.log(user.username));"
					],
					"abstract": false,
					"deprecated": false,
					"emits": [],
					"params": [
						{
							"name": "fn",
							"description": "Function to execute for each element",
							"optional": false,
							"type": [
								[
									["("],
									["value", ": "],
									["Argument", "<"],
									["unknown", ", "],
									["ArgumentOptions", ">, "],
									["key", ": "],
									["string", ", "],
									["collection", ": "],
									["ArgumentStore", ") => "],
									["void"]
								]
							]
						}
					],
					"returns": [[["ArgumentStore"]]],
					"meta": { "line": 279, "file": "index.d.ts", "path": "node_modules/@discordjs/collection/dist" }
				},
				{
					"name": "entries",
					"description": "Returns an iterable of key, value pairs for every entry in the map.",
					"returns": [
						[
							["IterableIterator", "<["],
							["string", ", "],
							["Argument", "<"],
							["unknown", ", "],
							["ArgumentOptions", ">]>"]
						]
					]
				},
				{
					"name": "equals",
					"description": "Checks if this collection shares identical items with another.\nThis is different to checking for equality using equal-signs, because\nthe collections may be different objects, but contain the same data.",
					"params": [
						{
							"name": "collection",
							"description": "Collection to compare with",
							"optional": false,
							"type": [
								[
									["Collection", "<"],
									["string", ", "],
									["Argument", "<"],
									["unknown", ", "],
									["ArgumentOptions", ">>"]
								]
							]
						}
					],
					"returns": [[["boolean"]]],
					"returnsDescription": "Whether the collections have identical contents",
					"meta": { "line": 320, "file": "index.d.ts", "path": "node_modules/@discordjs/collection/dist" }
				},
				{
					"name": "every",
					"description": "Checks if all items passes a test. Identical in behavior to\n[Array.every()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every).",
					"see": [],
					"examples": ["collection.every(user => !user.bot);"],
					"abstract": false,
					"deprecated": false,
					"emits": [],
					"params": [
						{
							"name": "fn",
							"description": "Function used to test (should return a boolean)",
							"optional": false,
							"type": [
								[
									["("],
									["value", ": "],
									["Argument", "<"],
									["unknown", ", "],
									["ArgumentOptions", ">, "],
									["key", ": "],
									["string", ", "],
									["collection", ": "],
									["ArgumentStore", ") => "],
									["key", " "],
									["is", " "],
									["K2"]
								]
							]
						}
					],
					"returns": [
						[
							["this", " "],
							["is", " "],
							["Collection", "<"],
							["K2", ", "],
							["Argument", "<"],
							["unknown", ", "],
							["ArgumentOptions", ">>"]
						]
					],
					"meta": { "line": 247, "file": "index.d.ts", "path": "node_modules/@discordjs/collection/dist" }
				},
				{
					"name": "filter",
					"description": "Identical to\n[Array.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter),\nbut returns a Collection instead of an Array.",
					"see": [],
					"examples": ["collection.filter(user => user.username === 'Bob');"],
					"abstract": false,
					"deprecated": false,
					"emits": [],
					"params": [
						{
							"name": "fn",
							"description": "The function to test with (should return boolean)",
							"optional": false,
							"type": [
								[
									["("],
									["value", ": "],
									["Argument", "<"],
									["unknown", ", "],
									["ArgumentOptions", ">, "],
									["key", ": "],
									["string", ", "],
									["collection", ": "],
									["ArgumentStore", ") => "],
									["key", " "],
									["is", " "],
									["K2"]
								]
							]
						}
					],
					"returns": [
						[
							["Collection", "<"],
							["K2", ", "],
							["Argument", "<"],
							["unknown", ", "],
							["ArgumentOptions", ">>"]
						]
					],
					"meta": { "line": 167, "file": "index.d.ts", "path": "node_modules/@discordjs/collection/dist" }
				},
				{
					"name": "find",
					"description": "Searches for a single item where the given function returns a truthy value. This behaves like\n[Array.find()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find).\n<warn>All collections used in Discord.js are mapped using their `id` property, and if you want to find by id you\nshould use the `get` method. See\n[MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/get) for details.</warn>",
					"see": [],
					"examples": ["collection.find(user => user.username === 'Bob');"],
					"abstract": false,
					"deprecated": false,
					"emits": [],
					"params": [
						{
							"name": "fn",
							"description": "The function to test with (should return boolean)",
							"optional": false,
							"type": [
								[
									["("],
									["value", ": "],
									["Argument", "<"],
									["unknown", ", "],
									["ArgumentOptions", ">, "],
									["key", ": "],
									["string", ", "],
									["collection", ": "],
									["ArgumentStore", ") => "],
									["value", " "],
									["is", " "],
									["V2"]
								]
							]
						}
					],
					"returns": [[["undefined", " | "], ["V2"]]],
					"meta": { "line": 127, "file": "index.d.ts", "path": "node_modules/@discordjs/collection/dist" }
				},
				{
					"name": "findKey",
					"description": "Searches for the key of a single item where the given function returns a truthy value. This behaves like\n[Array.findIndex()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex),\nbut returns the key rather than the positional index.",
					"see": [],
					"examples": ["collection.findKey(user => user.username === 'Bob');"],
					"abstract": false,
					"deprecated": false,
					"emits": [],
					"params": [
						{
							"name": "fn",
							"description": "The function to test with (should return boolean)",
							"optional": false,
							"type": [
								[
									["("],
									["value", ": "],
									["Argument", "<"],
									["unknown", ", "],
									["ArgumentOptions", ">, "],
									["key", ": "],
									["string", ", "],
									["collection", ": "],
									["ArgumentStore", ") => "],
									["key", " "],
									["is", " "],
									["K2"]
								]
							]
						}
					],
					"returns": [[["undefined", " | "], ["K2"]]],
					"meta": { "line": 142, "file": "index.d.ts", "path": "node_modules/@discordjs/collection/dist" }
				},
				{
					"name": "first",
					"description": "Obtains the first value(s) in this collection.",
					"returns": [
						[
							["undefined", " | "],
							["Argument", "<"],
							["unknown", ", "],
							["ArgumentOptions", ">"]
						]
					],
					"returnsDescription": "A single value if no amount is provided or an array of values, starting from the end if amount is negative",
					"meta": { "line": 48, "file": "index.d.ts", "path": "node_modules/@discordjs/collection/dist" }
				},
				{
					"name": "firstKey",
					"description": "Obtains the first key(s) in this collection.",
					"returns": [[["undefined", " | "], ["string"]]],
					"returnsDescription": "A single key if no amount is provided or an array of keys, starting from the end if\namount is negative",
					"meta": { "line": 58, "file": "index.d.ts", "path": "node_modules/@discordjs/collection/dist" }
				},
				{
					"name": "flatMap",
					"description": "Maps each item into a Collection, then joins the results into a single Collection. Identical in behavior to\n[Array.flatMap()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/flatMap).",
					"see": [],
					"examples": ["collection.flatMap(guild => guild.members.cache);"],
					"abstract": false,
					"deprecated": false,
					"emits": [],
					"params": [
						{
							"name": "fn",
							"description": "Function that produces a new Collection",
							"optional": false,
							"type": [
								[
									["("],
									["value", ": "],
									["Argument", "<"],
									["unknown", ", "],
									["ArgumentOptions", ">, "],
									["key", ": "],
									["string", ", "],
									["collection", ": "],
									["ArgumentStore", ") => "],
									["Collection", "<"],
									["string", ", "],
									["T", ">"]
								]
							]
						}
					],
					"returns": [
						[
							["Collection", "<"],
							["string", ", "],
							["T", ">"]
						]
					],
					"meta": { "line": 199, "file": "index.d.ts", "path": "node_modules/@discordjs/collection/dist" }
				},
				{
					"name": "forEach",
					"params": [
						{
							"name": "callbackfn",
							"optional": false,
							"type": [
								[
									["("],
									["value", ": "],
									["Argument", "<"],
									["unknown", ", "],
									["ArgumentOptions", ">, "],
									["key", ": "],
									["string", ", "],
									["map", ": "],
									["Map", "<"],
									["string", ", "],
									["Argument", "<"],
									["unknown", ", "],
									["ArgumentOptions", ">>) => "],
									["void"]
								]
							]
						},
						{ "name": "thisArg", "optional": true, "type": [[["any"]]] }
					],
					"returns": [[["void"]]]
				},
				{
					"name": "get",
					"description": "Looks up the name by the store, falling back to an alias lookup.",
					"params": [{ "name": "key", "description": "The key to look for.", "optional": false, "type": [[["string"]]] }],
					"returns": [
						[
							["undefined", " | "],
							["Argument", "<"],
							["unknown", ", "],
							["ArgumentOptions", ">"]
						]
					],
					"meta": { "line": 717, "file": "index.d.ts", "path": "node_modules/@sapphire/pieces/dist" }
				},
				{
					"name": "has",
					"description": "Checks whether a key is in the store, or is an alias",
					"params": [{ "name": "key", "description": "The key to check", "optional": false, "type": [[["string"]]] }],
					"returns": [[["boolean"]]],
					"meta": { "line": 722, "file": "index.d.ts", "path": "node_modules/@sapphire/pieces/dist" }
				},
				{
					"name": "hasAll",
					"description": "Checks if all of the elements exist in the collection.",
					"params": [
						{
							"name": "keys",
							"description": "The keys of the elements to check for",
							"optional": false,
							"type": [
								[
									["Array", "<"],
									["string", ">"]
								]
							]
						}
					],
					"returns": [[["boolean"]]],
					"returnsDescription": "`true` if all of the elements exist, `false` if at least one does not exist.",
					"meta": { "line": 32, "file": "index.d.ts", "path": "node_modules/@discordjs/collection/dist" }
				},
				{
					"name": "hasAny",
					"description": "Checks if any of the elements exist in the collection.",
					"params": [
						{
							"name": "keys",
							"description": "The keys of the elements to check for",
							"optional": false,
							"type": [
								[
									["Array", "<"],
									["string", ">"]
								]
							]
						}
					],
					"returns": [[["boolean"]]],
					"returnsDescription": "`true` if any of the elements exist, `false` if none exist.",
					"meta": { "line": 40, "file": "index.d.ts", "path": "node_modules/@discordjs/collection/dist" }
				},
				{
					"name": "insert",
					"description": "Inserts a piece into the store, and adds all the aliases.",
					"params": [
						{
							"name": "piece",
							"description": "The piece to be inserted into the store.",
							"optional": false,
							"type": [
								[
									["Argument", "<"],
									["unknown", ", "],
									["ArgumentOptions", ">"]
								]
							]
						}
					],
					"returns": [
						[
							["Promise", "<"],
							["Argument", "<"],
							["unknown", ", "],
							["ArgumentOptions", ">>"]
						]
					],
					"returnsDescription": "The inserted piece.",
					"meta": { "line": 734, "file": "index.d.ts", "path": "node_modules/@sapphire/pieces/dist" }
				},
				{
					"name": "intersect",
					"description": "The intersect method returns a new structure containing items where the keys are present in both original structures.",
					"params": [
						{
							"name": "other",
							"description": "The other Collection to filter against",
							"optional": false,
							"type": [
								[
									["Collection", "<"],
									["string", ", "],
									["Argument", "<"],
									["unknown", ", "],
									["ArgumentOptions", ">>"]
								]
							]
						}
					],
					"returns": [
						[
							["Collection", "<"],
							["string", ", "],
							["Argument", "<"],
							["unknown", ", "],
							["ArgumentOptions", ">>"]
						]
					],
					"meta": { "line": 338, "file": "index.d.ts", "path": "node_modules/@discordjs/collection/dist" }
				},
				{
					"name": "keyAt",
					"description": "Identical to [Array.at()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/at).\nReturns the key at a given index, allowing for positive and negative integers.\nNegative integers count back from the last item in the collection.",
					"params": [
						{
							"name": "index",
							"description": "The index of the key to obtain",
							"optional": true,
							"type": [[["number"]]]
						}
					],
					"returns": [[["undefined", " | "], ["string"]]],
					"meta": { "line": 95, "file": "index.d.ts", "path": "node_modules/@discordjs/collection/dist" }
				},
				{
					"name": "keys",
					"description": "Returns an iterable of keys in the map",
					"returns": [
						[
							["IterableIterator", "<"],
							["string", ">"]
						]
					]
				},
				{
					"name": "last",
					"description": "Obtains the last value(s) in this collection.",
					"returns": [
						[
							["undefined", " | "],
							["Argument", "<"],
							["unknown", ", "],
							["ArgumentOptions", ">"]
						]
					],
					"returnsDescription": "A single value if no amount is provided or an array of values, starting from the start if\namount is negative",
					"meta": { "line": 68, "file": "index.d.ts", "path": "node_modules/@discordjs/collection/dist" }
				},
				{
					"name": "lastKey",
					"description": "Obtains the last key(s) in this collection.",
					"returns": [[["undefined", " | "], ["string"]]],
					"returnsDescription": "A single key if no amount is provided or an array of keys, starting from the start if\namount is negative",
					"meta": { "line": 78, "file": "index.d.ts", "path": "node_modules/@discordjs/collection/dist" }
				},
				{
					"name": "load",
					"description": "Loads one or more pieces from a path.",
					"params": [
						{
							"name": "root",
							"description": "The root directory the file is from.",
							"optional": false,
							"type": [[["string"]]]
						},
						{
							"name": "path",
							"description": "The path of the file to load, relative to the `root`.",
							"optional": false,
							"type": [[["string"]]]
						}
					],
					"returns": [
						[
							["Promise", "<"],
							["Array", "<"],
							["Argument", "<"],
							["unknown", ", "],
							["ArgumentOptions", ">>>"]
						]
					],
					"returnsDescription": "All the loaded pieces.",
					"meta": { "line": 312, "file": "index.d.ts", "path": "node_modules/@sapphire/pieces/dist" }
				},
				{
					"name": "loadAll",
					"description": "Loads all pieces from all directories specified by {@link paths}.",
					"returns": [
						[
							["Promise", "<"],
							["void", ">"]
						]
					],
					"meta": { "line": 326, "file": "index.d.ts", "path": "node_modules/@sapphire/pieces/dist" }
				},
				{
					"name": "map",
					"description": "Maps each item to another value into an array. Identical in behavior to\n[Array.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map).",
					"see": [],
					"examples": ["collection.map(user => user.tag);"],
					"abstract": false,
					"deprecated": false,
					"emits": [],
					"params": [
						{
							"name": "fn",
							"description": "Function that produces an element of the new array, taking three arguments",
							"optional": false,
							"type": [
								[
									["("],
									["value", ": "],
									["Argument", "<"],
									["unknown", ", "],
									["ArgumentOptions", ">, "],
									["key", ": "],
									["string", ", "],
									["collection", ": "],
									["ArgumentStore", ") => "],
									["T"]
								]
							]
						}
					],
					"returns": [
						[
							["Array", "<"],
							["T", ">"]
						]
					],
					"meta": { "line": 211, "file": "index.d.ts", "path": "node_modules/@discordjs/collection/dist" }
				},
				{
					"name": "mapValues",
					"description": "Maps each item to another value into a collection. Identical in behavior to\n[Array.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map).",
					"see": [],
					"examples": ["collection.mapValues(user => user.tag);"],
					"abstract": false,
					"deprecated": false,
					"emits": [],
					"params": [
						{
							"name": "fn",
							"description": "Function that produces an element of the new collection, taking three arguments",
							"optional": false,
							"type": [
								[
									["("],
									["value", ": "],
									["Argument", "<"],
									["unknown", ", "],
									["ArgumentOptions", ">, "],
									["key", ": "],
									["string", ", "],
									["collection", ": "],
									["ArgumentStore", ") => "],
									["T"]
								]
							]
						}
					],
					"returns": [
						[
							["Collection", "<"],
							["string", ", "],
							["T", ">"]
						]
					],
					"meta": { "line": 223, "file": "index.d.ts", "path": "node_modules/@discordjs/collection/dist" }
				},
				{
					"name": "partition",
					"description": "Partitions the collection into two collections where the first collection\ncontains the items that passed and the second contains the items that failed.",
					"see": [],
					"examples": ["const [big, small] = collection.partition(guild => guild.memberCount > 250);"],
					"abstract": false,
					"deprecated": false,
					"emits": [],
					"params": [
						{
							"name": "fn",
							"description": "Function used to test (should return a boolean)",
							"optional": false,
							"type": [
								[
									["("],
									["value", ": "],
									["Argument", "<"],
									["unknown", ", "],
									["ArgumentOptions", ">, "],
									["key", ": "],
									["string", ", "],
									["collection", ": "],
									["ArgumentStore", ") => "],
									["key", " "],
									["is", " "],
									["K2"]
								]
							]
						}
					],
					"returns": [
						[
							["["],
							["Collection", "<"],
							["K2", ", "],
							["Argument", "<"],
							["unknown", ", "],
							["ArgumentOptions", ">>, "],
							["Collection", "<"],
							["Exclude", "<"],
							["string", ", "],
							["K2", ">, "],
							["Argument", "<"],
							["unknown", ", "],
							["ArgumentOptions", ">>]"]
						]
					],
					"meta": { "line": 183, "file": "index.d.ts", "path": "node_modules/@discordjs/collection/dist" }
				},
				{
					"name": "random",
					"description": "Obtains unique random value(s) from this collection.",
					"returns": [
						[
							["undefined", " | "],
							["Argument", "<"],
							["unknown", ", "],
							["ArgumentOptions", ">"]
						]
					],
					"returnsDescription": "A single value if no amount is provided or an array of values",
					"meta": { "line": 103, "file": "index.d.ts", "path": "node_modules/@discordjs/collection/dist" }
				},
				{
					"name": "randomKey",
					"description": "Obtains unique random key(s) from this collection.",
					"returns": [[["undefined", " | "], ["string"]]],
					"returnsDescription": "A single key if no amount is provided or an array",
					"meta": { "line": 112, "file": "index.d.ts", "path": "node_modules/@discordjs/collection/dist" }
				},
				{
					"name": "reduce",
					"description": "Applies a function to produce a single value. Identical in behavior to\n[Array.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).",
					"see": [],
					"examples": ["collection.reduce((acc, guild) => acc + guild.memberCount, 0);"],
					"abstract": false,
					"deprecated": false,
					"emits": [],
					"params": [
						{
							"name": "fn",
							"description": "Function used to reduce, taking four arguments; `accumulator`, `currentValue`, `currentKey`,\nand `collection`",
							"optional": false,
							"type": [
								[
									["("],
									["accumulator", ": "],
									["T", ", "],
									["value", ": "],
									["Argument", "<"],
									["unknown", ", "],
									["ArgumentOptions", ">, "],
									["key", ": "],
									["string", ", "],
									["collection", ": "],
									["ArgumentStore", ") => "],
									["T"]
								]
							]
						},
						{
							"name": "initialValue",
							"description": "Starting value for the accumulator",
							"optional": true,
							"type": [[["T"]]]
						}
					],
					"returns": [[["T"]]],
					"meta": { "line": 264, "file": "index.d.ts", "path": "node_modules/@discordjs/collection/dist" }
				},
				{
					"name": "registerPath",
					"description": "Registers a directory into the store.",
					"see": [],
					"examples": [
						"```typescript\nstore\n  .registerPath(resolve('commands'))\n  .registerPath(resolve('third-party', 'commands'));\n```"
					],
					"abstract": false,
					"deprecated": false,
					"emits": [],
					"params": [{ "name": "path", "description": "The path to be added.", "optional": false, "type": [[["string"]]] }],
					"returns": [[["ArgumentStore"]]],
					"meta": { "line": 305, "file": "index.d.ts", "path": "node_modules/@sapphire/pieces/dist" }
				},
				{
					"name": "resolve",
					"description": "Resolves a piece by its name or its instance.",
					"params": [
						{
							"name": "name",
							"description": "The name of the piece or the instance itself.",
							"optional": false,
							"type": [
								[
									["string", " | "],
									["Argument", "<"],
									["unknown", ", "],
									["ArgumentOptions", ">"]
								]
							]
						}
					],
					"returns": [
						[
							["Argument", "<"],
							["unknown", ", "],
							["ArgumentOptions", ">"]
						]
					],
					"returnsDescription": "The resolved piece.",
					"meta": { "line": 332, "file": "index.d.ts", "path": "node_modules/@sapphire/pieces/dist" }
				},
				{
					"name": "set",
					"params": [
						{ "name": "key", "optional": false, "type": [[["string"]]] },
						{
							"name": "value",
							"optional": false,
							"type": [
								[
									["Argument", "<"],
									["unknown", ", "],
									["ArgumentOptions", ">"]
								]
							]
						}
					],
					"returns": [[["ArgumentStore"]]]
				},
				{
					"name": "some",
					"description": "Checks if there exists an item that passes a test. Identical in behavior to\n[Array.some()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some).",
					"see": [],
					"examples": ["collection.some(user => user.discriminator === '0000');"],
					"abstract": false,
					"deprecated": false,
					"emits": [],
					"params": [
						{
							"name": "fn",
							"description": "Function used to test (should return a boolean)",
							"optional": false,
							"type": [
								[
									["("],
									["value", ": "],
									["Argument", "<"],
									["unknown", ", "],
									["ArgumentOptions", ">, "],
									["key", ": "],
									["string", ", "],
									["collection", ": "],
									["ArgumentStore", ") => "],
									["boolean"]
								]
							]
						}
					],
					"returns": [[["boolean"]]],
					"meta": { "line": 235, "file": "index.d.ts", "path": "node_modules/@discordjs/collection/dist" }
				},
				{
					"name": "sort",
					"description": "The sort method sorts the items of a collection in place and returns it.\nThe sort is not necessarily stable in Node 10 or older.\nThe default sort order is according to string Unicode code points.",
					"see": [],
					"examples": ["collection.sort((userA, userB) => userA.createdTimestamp - userB.createdTimestamp);"],
					"abstract": false,
					"deprecated": false,
					"emits": [],
					"params": [
						{
							"name": "compareFunction",
							"description": "Specifies a function that defines the sort order.\nIf omitted, the collection is sorted according to each character's Unicode code point value, according to the string conversion of each element.",
							"optional": true,
							"type": [
								[
									["Comparator", "<"],
									["string", ", "],
									["Argument", "<"],
									["unknown", ", "],
									["ArgumentOptions", ">>"]
								]
							]
						}
					],
					"returns": [[["ArgumentStore"]]],
					"meta": { "line": 332, "file": "index.d.ts", "path": "node_modules/@discordjs/collection/dist" }
				},
				{
					"name": "sorted",
					"description": "The sorted method sorts the items of a collection and returns it.\nThe sort is not necessarily stable in Node 10 or older.\nThe default sort order is according to string Unicode code points.",
					"see": [],
					"examples": ["collection.sorted((userA, userB) => userA.createdTimestamp - userB.createdTimestamp);"],
					"abstract": false,
					"deprecated": false,
					"emits": [],
					"params": [
						{
							"name": "compareFunction",
							"description": "Specifies a function that defines the sort order.\nIf omitted, the collection is sorted according to each character's Unicode code point value,\naccording to the string conversion of each element.",
							"optional": true,
							"type": [
								[
									["Comparator", "<"],
									["string", ", "],
									["Argument", "<"],
									["unknown", ", "],
									["ArgumentOptions", ">>"]
								]
							]
						}
					],
					"returns": [
						[
							["Collection", "<"],
							["string", ", "],
							["Argument", "<"],
							["unknown", ", "],
							["ArgumentOptions", ">>"]
						]
					],
					"meta": { "line": 357, "file": "index.d.ts", "path": "node_modules/@discordjs/collection/dist" }
				},
				{
					"name": "sweep",
					"description": "Removes items that satisfy the provided filter function.",
					"params": [
						{
							"name": "fn",
							"description": "Function used to test (should return a boolean)",
							"optional": false,
							"type": [
								[
									["("],
									["value", ": "],
									["Argument", "<"],
									["unknown", ", "],
									["ArgumentOptions", ">, "],
									["key", ": "],
									["string", ", "],
									["collection", ": "],
									["ArgumentStore", ") => "],
									["boolean"]
								]
							]
						}
					],
					"returns": [[["number"]]],
					"returnsDescription": "The number of removed entries",
					"meta": { "line": 154, "file": "index.d.ts", "path": "node_modules/@discordjs/collection/dist" }
				},
				{
					"name": "tap",
					"description": "Runs a function on the collection and returns the collection.",
					"see": [],
					"examples": [
						"collection\n .tap(coll => console.log(coll.size))\n .filter(user => user.bot)\n .tap(coll => console.log(coll.size))"
					],
					"abstract": false,
					"deprecated": false,
					"emits": [],
					"params": [
						{
							"name": "fn",
							"description": "Function to execute",
							"optional": false,
							"type": [[["("], ["collection", ": "], ["ArgumentStore", ") => "], ["void"]]]
						}
					],
					"returns": [[["ArgumentStore"]]],
					"meta": { "line": 293, "file": "index.d.ts", "path": "node_modules/@discordjs/collection/dist" }
				},
				{
					"name": "toJSON",
					"returns": [
						[
							["Array", "<"],
							["Argument", "<"],
							["unknown", ", "],
							["ArgumentOptions", ">>"]
						]
					],
					"meta": { "line": 358, "file": "index.d.ts", "path": "node_modules/@discordjs/collection/dist" }
				},
				{
					"name": "unload",
					"description": "Unloads a piece given its instance or its name, and removes all the aliases.",
					"params": [
						{
							"name": "name",
							"description": "The name of the file to load.",
							"optional": false,
							"type": [
								[
									["string", " | "],
									["Argument", "<"],
									["unknown", ", "],
									["ArgumentOptions", ">"]
								]
							]
						}
					],
					"returns": [
						[
							["Promise", "<"],
							["Argument", "<"],
							["unknown", ", "],
							["ArgumentOptions", ">>"]
						]
					],
					"returnsDescription": "Returns the piece that was unloaded.",
					"meta": { "line": 728, "file": "index.d.ts", "path": "node_modules/@sapphire/pieces/dist" }
				},
				{
					"name": "unloadAll",
					"description": "Unloads all pieces from the store.",
					"returns": [
						[
							["Promise", "<"],
							["Array", "<"],
							["Argument", "<"],
							["unknown", ", "],
							["ArgumentOptions", ">>>"]
						]
					],
					"meta": { "line": 322, "file": "index.d.ts", "path": "node_modules/@sapphire/pieces/dist" }
				},
				{
					"name": "values",
					"description": "Returns an iterable of values in the map",
					"returns": [
						[
							["IterableIterator", "<"],
							["Argument", "<"],
							["unknown", ", "],
							["ArgumentOptions", ">>"]
						]
					]
				}
			],
			"meta": { "line": 4, "file": "ArgumentStore.ts", "path": "src/lib/structures" }
		},
		{
			"name": "ClientPermissionsPrecondition",
			"description": "Constructs a contextful permissions precondition requirement.",
			"see": [],
			"implements": ["PreconditionSingleResolvableDetails<'ClientPermissions'>"],
			"abstract": false,
			"deprecated": false,
			"construct": {
				"name": "constructor",
				"description": "Constructs a precondition container entry.",
				"params": [
					{
						"name": "permissions",
						"description": "The permissions that will be required by this command.",
						"optional": false,
						"type": [[["PermissionResolvable"]]]
					}
				],
				"returns": [[["ClientPermissionsPrecondition"]]],
				"meta": {
					"line": 33,
					"file": "ClientPermissionsPrecondition.ts",
					"path": "src/lib/utils/preconditions/containers"
				}
			},
			"props": [
				{
					"name": "context",
					"description": "The context to be set at {@link PreconditionContainerSingle.context}.",
					"type": [[["{"], ["\npermissions", ": "], ["Permissions\n", "}"]]],
					"meta": {
						"line": 27,
						"file": "ClientPermissionsPrecondition.ts",
						"path": "src/lib/utils/preconditions/containers"
					}
				},
				{
					"name": "name",
					"description": "The name of the precondition to retrieve from {@link SapphireClient.preconditions}.",
					"type": [[["'ClientPermissions'"]]],
					"meta": {
						"line": 26,
						"file": "ClientPermissionsPrecondition.ts",
						"path": "src/lib/utils/preconditions/containers"
					}
				}
			],
			"meta": {
				"line": 25,
				"file": "ClientPermissionsPrecondition.ts",
				"path": "src/lib/utils/preconditions/containers"
			}
		},
		{
			"name": "Command",
			"extends": ["AliasPiece<O>"],
			"construct": {
				"name": "constructor",
				"see": [],
				"examples": [],
				"abstract": false,
				"deprecated": false,
				"emits": [],
				"params": [
					{ "name": "context", "description": "The context.", "optional": false, "type": [[["PieceContext"]]] },
					{
						"name": "options",
						"description": "Optional Command settings.",
						"optional": true,
						"default": "{}",
						"type": [[["CommandOptions"]]]
					}
				],
				"returns": [
					[
						["Command", "<"],
						["T", ", "],
						["O", ">"]
					]
				],
				"meta": { "line": 64, "file": "Command.ts", "path": "src/lib/structures" }
			},
			"props": [
				{
					"name": "aliases",
					"description": "The aliases for the piece.",
					"type": [
						[
							["readonly", " "],
							["Array", "<"],
							["string", ">"]
						]
					],
					"meta": { "line": 690, "file": "index.d.ts", "path": "node_modules/@sapphire/pieces/dist" }
				},
				{
					"name": "description",
					"description": "A basic summary about the command",
					"see": [],
					"abstract": false,
					"deprecated": false,
					"type": [[["string"]]],
					"meta": { "line": 15, "file": "Command.ts", "path": "src/lib/structures" }
				},
				{
					"name": "detailedDescription",
					"description": "Longer version of command's summary and how to use it",
					"see": [],
					"abstract": false,
					"deprecated": false,
					"type": [[["string"]]],
					"meta": { "line": 27, "file": "Command.ts", "path": "src/lib/structures" }
				},
				{
					"name": "enabled",
					"description": "Whether or not the piece is enabled.",
					"type": [[["boolean"]]],
					"meta": { "line": 447, "file": "index.d.ts", "path": "node_modules/@sapphire/pieces/dist" }
				},
				{
					"name": "fullCategory",
					"description": "The full category for the command. Either an array of strings that denote every (sub)folder the command is in,\nor `null` if it could not be resolved automatically.",
					"see": [],
					"readonly": true,
					"abstract": false,
					"deprecated": false,
					"type": [
						[
							["readonly", " "],
							["Array", "<"],
							["string", ">"]
						]
					],
					"meta": { "line": 37, "file": "Command.ts", "path": "src/lib/structures" }
				},
				{
					"name": "lexer",
					"description": "The lexer to be used for command parsing",
					"see": [],
					"access": "private",
					"abstract": false,
					"deprecated": false,
					"type": [[["Lexer"]]],
					"meta": { "line": 57, "file": "Command.ts", "path": "src/lib/structures" }
				},
				{
					"name": "location",
					"description": "The location metadata for the piece's file.",
					"readonly": true,
					"type": [[["PieceLocation"]]],
					"meta": { "line": 439, "file": "index.d.ts", "path": "node_modules/@sapphire/pieces/dist" }
				},
				{
					"name": "name",
					"description": "The name of the piece.",
					"readonly": true,
					"type": [[["string"]]],
					"meta": { "line": 443, "file": "index.d.ts", "path": "node_modules/@sapphire/pieces/dist" }
				},
				{
					"name": "options",
					"description": "The raw options passed to this {@link Piece}",
					"readonly": true,
					"type": [[["O"]]],
					"meta": { "line": 451, "file": "index.d.ts", "path": "node_modules/@sapphire/pieces/dist" }
				},
				{
					"name": "preconditions",
					"description": "The preconditions to be run.",
					"see": [],
					"abstract": false,
					"deprecated": false,
					"type": [[["PreconditionContainerArray"]]],
					"meta": { "line": 21, "file": "Command.ts", "path": "src/lib/structures" }
				},
				{
					"name": "store",
					"description": "The store that contains the piece.",
					"readonly": true,
					"type": [
						[
							["Store", "<"],
							["Piece", "<"],
							["PieceOptions", ">>"]
						]
					],
					"meta": { "line": 435, "file": "index.d.ts", "path": "node_modules/@sapphire/pieces/dist" }
				},
				{
					"name": "strategy",
					"description": "The strategy to use for the lexer.",
					"see": [],
					"abstract": false,
					"deprecated": false,
					"type": [[["UnorderedStrategy"]]],
					"meta": { "line": 43, "file": "Command.ts", "path": "src/lib/structures" }
				},
				{
					"name": "typing",
					"description": "If {@link SapphireClient.typing} is true, it can be overridden for a specific command using this property, set via its options.\nOtherwise, this property will be ignored.",
					"see": [],
					"abstract": false,
					"deprecated": false,
					"default": "true",
					"type": [[["boolean"]]],
					"meta": { "line": 50, "file": "Command.ts", "path": "src/lib/structures" }
				},
				{
					"name": "category",
					"description": "The main category for the command, if any.",
					"see": [],
					"readonly": true,
					"abstract": false,
					"deprecated": false,
					"type": [[["null", " | "], ["string"]]],
					"meta": { "line": 122, "file": "Command.ts", "path": "src/lib/structures" }
				},
				{
					"name": "container",
					"description": "A reference to the {@link Container} object for ease of use.",
					"see": ["container"],
					"readonly": true,
					"abstract": false,
					"deprecated": false,
					"type": [[["Container"]]],
					"meta": { "line": 457, "file": "index.d.ts", "path": "node_modules/@sapphire/pieces/dist" }
				},
				{
					"name": "parentCategory",
					"description": "The parent category for the command.",
					"see": [],
					"readonly": true,
					"abstract": false,
					"deprecated": false,
					"type": [[["null", " | "], ["string"]]],
					"meta": { "line": 146, "file": "Command.ts", "path": "src/lib/structures" }
				},
				{
					"name": "subCategory",
					"description": "The sub-category for the command, if any.",
					"see": [],
					"readonly": true,
					"abstract": false,
					"deprecated": false,
					"type": [[["null", " | "], ["string"]]],
					"meta": { "line": 134, "file": "Command.ts", "path": "src/lib/structures" }
				}
			],
			"methods": [
				{
					"name": "messageRun",
					"description": "Executes the command's logic for a message.",
					"params": [
						{
							"name": "message",
							"description": "The message that triggered the command.",
							"optional": false,
							"type": [
								[
									["Message", "<"],
									["boolean", ">"]
								]
							]
						},
						{
							"name": "args",
							"description": "The value returned by {@link Command.preParse}, by default an instance of {@link Args}.",
							"optional": false,
							"type": [[["T"]]]
						},
						{ "name": "context", "optional": false, "type": [[["CommandContext"]]] }
					],
					"returns": [[["unknown"]]],
					"meta": { "line": 155, "file": "Command.ts", "path": "src/lib/structures" }
				},
				{
					"name": "onLoad",
					"description": "Per-piece listener that is called when the piece is loaded into the store.\nUseful to set-up asynchronous initialization tasks.",
					"returns": [[["unknown"]]],
					"meta": { "line": 462, "file": "index.d.ts", "path": "node_modules/@sapphire/pieces/dist" }
				},
				{
					"name": "onUnload",
					"description": "Per-piece listener that is called when the piece is unloaded from the store.\nUseful to set-up clean-up tasks.",
					"returns": [[["unknown"]]],
					"meta": { "line": 467, "file": "index.d.ts", "path": "node_modules/@sapphire/pieces/dist" }
				},
				{
					"name": "parseConstructorPreConditions",
					"description": "Parses the command's options and processes them, calling {@link Command#parseConstructorPreConditionsRunIn},\n{@link Command#parseConstructorPreConditionsNsfw},\n{@link Command#parseConstructorPreConditionsRequiredClientPermissions}, and\n{@link Command#parseConstructorPreConditionsCooldown}.",
					"see": [],
					"examples": [],
					"abstract": false,
					"deprecated": false,
					"emits": [],
					"params": [
						{
							"name": "options",
							"description": "The command options given from the constructor.",
							"optional": false,
							"type": [[["CommandOptions"]]]
						}
					],
					"returns": [[["void"]]],
					"meta": { "line": 177, "file": "Command.ts", "path": "src/lib/structures" }
				},
				{
					"name": "parseConstructorPreConditionsCooldown",
					"description": "Appends the `Cooldown` precondition when {@link Command.Options.cooldownLimit} and\n{@link Command.Options.cooldownDelay} are both non-zero.",
					"params": [
						{
							"name": "options",
							"description": "The command options given from the constructor.",
							"optional": false,
							"type": [[["CommandOptions"]]]
						}
					],
					"returns": [[["void"]]],
					"meta": { "line": 233, "file": "Command.ts", "path": "src/lib/structures" }
				},
				{
					"name": "parseConstructorPreConditionsNsfw",
					"description": "Appends the `NSFW` precondition if {@link Command.Options.nsfw} is set to true.",
					"params": [
						{
							"name": "options",
							"description": "The command options given from the constructor.",
							"optional": false,
							"type": [[["CommandOptions"]]]
						}
					],
					"returns": [[["void"]]],
					"meta": { "line": 189, "file": "Command.ts", "path": "src/lib/structures" }
				},
				{
					"name": "parseConstructorPreConditionsRequiredClientPermissions",
					"description": "Appends the `ClientPermissions` precondition when {@link Command.Options.requiredClientPermissions} resolves to a\nnon-zero bitfield.",
					"params": [
						{
							"name": "options",
							"description": "The command options given from the constructor.",
							"optional": false,
							"type": [[["CommandOptions"]]]
						}
					],
					"returns": [[["void"]]],
					"meta": { "line": 209, "file": "Command.ts", "path": "src/lib/structures" }
				},
				{
					"name": "parseConstructorPreConditionsRequiredUserPermissions",
					"description": "Appends the `UserPermissions` precondition when {@link Command.Options.requiredUserPermissions} resolves to a\nnon-zero bitfield.",
					"params": [
						{
							"name": "options",
							"description": "The command options given from the constructor.",
							"optional": false,
							"type": [[["CommandOptions"]]]
						}
					],
					"returns": [[["void"]]],
					"meta": { "line": 221, "file": "Command.ts", "path": "src/lib/structures" }
				},
				{
					"name": "parseConstructorPreConditionsRunIn",
					"description": "Appends the `DMOnly`, `GuildOnly`, `NewsOnly`, and `TextOnly` preconditions based on the values passed in\n{@link Command.Options.runIn}, optimizing in specific cases (`NewsOnly` + `TextOnly` = `GuildOnly`; `DMOnly` +\n`GuildOnly` = `null`), defaulting to `null`, which doesn't add a precondition.",
					"params": [
						{
							"name": "options",
							"description": "The command options given from the constructor.",
							"optional": false,
							"type": [[["CommandOptions"]]]
						}
					],
					"returns": [[["void"]]],
					"meta": { "line": 199, "file": "Command.ts", "path": "src/lib/structures" }
				},
				{
					"name": "preParse",
					"description": "The pre-parse method. This method can be overridden by plugins to define their own argument parser.",
					"params": [
						{
							"name": "message",
							"description": "The message that triggered the command.",
							"optional": false,
							"type": [
								[
									["Message", "<"],
									["boolean", ">"]
								]
							]
						},
						{
							"name": "parameters",
							"description": "The raw parameters as a single string.",
							"optional": false,
							"type": [[["string"]]]
						},
						{
							"name": "context",
							"description": "The command-context used in this execution.",
							"optional": false,
							"type": [[["CommandContext"]]]
						}
					],
					"returns": [
						[
							["Awaitable", "<"],
							["T", ">"]
						]
					],
					"meta": { "line": 108, "file": "Command.ts", "path": "src/lib/structures" }
				},
				{
					"name": "reload",
					"description": "Reloads the piece by loading the same path in the store.",
					"returns": [
						[
							["Promise", "<"],
							["void", ">"]
						]
					],
					"meta": { "line": 475, "file": "index.d.ts", "path": "node_modules/@sapphire/pieces/dist" }
				},
				{
					"name": "resolveConstructorPreConditionsRunType",
					"access": "private",
					"params": [
						{
							"name": "runIn",
							"optional": false,
							"type": [
								[
									["undefined", " | "],
									["null", " | "],
									["CommandOptionsRunType", " | "],
									["CommandOptionsRunTypeEnum", " | "],
									["readonly", " "],
									["Array", "<"],
									["CommandOptionsRunType", " | "],
									["CommandOptionsRunTypeEnum", ">"]
								]
							]
						}
					],
					"returns": [[["null", " | "], ["PreconditionContainerArray", " | "], ["CommandPreConditions"]]],
					"meta": { "line": 253, "file": "Command.ts", "path": "src/lib/structures" }
				},
				{
					"name": "run",
					"description": "Executes the command's logic.",
					"see": [],
					"examples": [],
					"abstract": false,
					"deprecated": true,
					"emits": [],
					"params": [
						{
							"name": "message",
							"description": "The message that triggered the command.",
							"optional": false,
							"type": [
								[
									["Message", "<"],
									["boolean", ">"]
								]
							]
						},
						{
							"name": "args",
							"description": "The value returned by {@link Command.preParse}, by default an instance of {@link Args}.",
							"optional": false,
							"type": [[["T"]]]
						},
						{ "name": "context", "optional": false, "type": [[["CommandContext"]]] }
					],
					"returns": [[["unknown"]]]
				},
				{
					"name": "toJSON",
					"description": "Defines the JSON.stringify behavior of the command.",
					"returns": [[["CommandJSON"]]],
					"meta": { "line": 160, "file": "Command.ts", "path": "src/lib/structures" }
				},
				{
					"name": "unload",
					"description": "Unloads and disables the piece.",
					"returns": [
						[
							["Promise", "<"],
							["void", ">"]
						]
					],
					"meta": { "line": 471, "file": "index.d.ts", "path": "node_modules/@sapphire/pieces/dist" }
				}
			],
			"meta": { "line": 10, "file": "Command.ts", "path": "src/lib/structures" }
		},
		{
			"name": "CommandStore",
			"description": "Stores all Command pieces",
			"see": [],
			"extends": ["AliasStore<Command>"],
			"abstract": false,
			"deprecated": false,
			"construct": {
				"name": "constructor",
				"returns": [[["CommandStore"]]],
				"meta": { "line": 9, "file": "CommandStore.ts", "path": "src/lib/structures" }
			},
			"props": [
				{
					"name": "Constructor",
					"readonly": true,
					"type": [
						[
							["Constructor", "<"],
							["Command", "<"],
							["Args", ", "],
							["CommandOptions", ">>"]
						]
					],
					"meta": { "line": 281, "file": "index.d.ts", "path": "node_modules/@sapphire/pieces/dist" }
				},
				{
					"name": "[toStringTag]",
					"readonly": true,
					"type": [[["string"]]],
					"meta": { "line": 135, "file": "lib.es2015.symbol.wellknown.d.ts", "path": "node_modules/typescript/lib" }
				},
				{
					"name": "aliases",
					"description": "The aliases referencing to pieces.",
					"readonly": true,
					"type": [
						[
							["Collection", "<"],
							["string", ", "],
							["Command", "<"],
							["Args", ", "],
							["CommandOptions", ">>"]
						]
					],
					"meta": { "line": 712, "file": "index.d.ts", "path": "node_modules/@sapphire/pieces/dist" }
				},
				{
					"name": "constructor",
					"type": [[["CollectionConstructor"]]],
					"meta": { "line": 17, "file": "index.d.ts", "path": "node_modules/@discordjs/collection/dist" }
				},
				{
					"name": "name",
					"readonly": true,
					"type": [[["string"]]],
					"meta": { "line": 282, "file": "index.d.ts", "path": "node_modules/@sapphire/pieces/dist" }
				},
				{
					"name": "paths",
					"readonly": true,
					"type": [
						[
							["Set", "<"],
							["string", ">"]
						]
					],
					"meta": { "line": 283, "file": "index.d.ts", "path": "node_modules/@sapphire/pieces/dist" }
				},
				{
					"name": "size",
					"readonly": true,
					"type": [[["number"]]],
					"meta": { "line": 28, "file": "lib.es2015.collection.d.ts", "path": "node_modules/typescript/lib" }
				},
				{
					"name": "strategy",
					"readonly": true,
					"type": [
						[
							["ILoaderStrategy", "<"],
							["Command", "<"],
							["Args", ", "],
							["CommandOptions", ">>"]
						]
					],
					"meta": { "line": 284, "file": "index.d.ts", "path": "node_modules/@sapphire/pieces/dist" }
				},
				{
					"name": "[species]",
					"scope": "static",
					"readonly": true,
					"type": [[["MapConstructor"]]],
					"meta": { "line": 317, "file": "lib.es2015.symbol.wellknown.d.ts", "path": "node_modules/typescript/lib" }
				},
				{
					"name": "default",
					"scope": "static",
					"readonly": true,
					"type": [[["("], ["typeof", " "], ["Collection", ")"]]],
					"meta": { "line": 24, "file": "index.d.ts", "path": "node_modules/@discordjs/collection/dist" }
				},
				{
					"name": "defaultStrategy",
					"description": "The default strategy, defaults to {@link LoaderStrategy}, which is constructed on demand when a store is constructed,\nwhen none was set beforehand.",
					"scope": "static",
					"type": [
						[
							["ILoaderStrategy", "<"],
							["any", ">"]
						]
					],
					"meta": { "line": 369, "file": "index.d.ts", "path": "node_modules/@sapphire/pieces/dist" }
				},
				{
					"name": "logger",
					"description": "The default logger, defaults to `null`.",
					"scope": "static",
					"type": [[["null", " | "], ["StoreLogger"]]],
					"meta": { "line": 373, "file": "index.d.ts", "path": "node_modules/@sapphire/pieces/dist" }
				},
				{
					"name": "categories",
					"description": "Get all the command categories.",
					"readonly": true,
					"type": [
						[
							["Array", "<"],
							["string", ">"]
						]
					],
					"meta": { "line": 16, "file": "CommandStore.ts", "path": "src/lib/structures" }
				},
				{
					"name": "container",
					"description": "A reference to the {@link Container} object for ease of use.",
					"see": ["container"],
					"readonly": true,
					"abstract": false,
					"deprecated": false,
					"type": [[["Container"]]],
					"meta": { "line": 294, "file": "index.d.ts", "path": "node_modules/@sapphire/pieces/dist" }
				}
			],
			"methods": [
				{
					"name": "[iterator]",
					"description": "Returns an iterable of entries in the map.",
					"returns": [
						[
							["IterableIterator", "<["],
							["string", ", "],
							["Command", "<"],
							["Args", ", "],
							["CommandOptions", ">]>"]
						]
					]
				},
				{
					"name": "at",
					"description": "Identical to [Array.at()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/at).\nReturns the item at a given index, allowing for positive and negative integers.\nNegative integers count back from the last item in the collection.",
					"params": [
						{
							"name": "index",
							"description": "The index of the element to obtain",
							"optional": true,
							"type": [[["number"]]]
						}
					],
					"returns": [
						[
							["undefined", " | "],
							["Command", "<"],
							["Args", ", "],
							["CommandOptions", ">"]
						]
					],
					"meta": { "line": 87, "file": "index.d.ts", "path": "node_modules/@discordjs/collection/dist" }
				},
				{ "name": "clear", "returns": [[["void"]]] },
				{
					"name": "clone",
					"description": "Creates an identical shallow copy of this collection.",
					"see": [],
					"examples": ["const newColl = someColl.clone();"],
					"abstract": false,
					"deprecated": false,
					"emits": [],
					"returns": [
						[
							["Collection", "<"],
							["string", ", "],
							["Command", "<"],
							["Args", ", "],
							["CommandOptions", ">>"]
						]
					],
					"meta": { "line": 301, "file": "index.d.ts", "path": "node_modules/@discordjs/collection/dist" }
				},
				{
					"name": "concat",
					"description": "Combines this collection with others into a new collection. None of the source collections are modified.",
					"see": [],
					"examples": ["const newColl = someColl.concat(someOtherColl, anotherColl, ohBoyAColl);"],
					"abstract": false,
					"deprecated": false,
					"emits": [],
					"params": [
						{
							"name": "collections",
							"description": "Collections to merge",
							"optional": false,
							"type": [
								[
									["Array", "<"],
									["Collection", "<"],
									["string", ", "],
									["Command", "<"],
									["Args", ", "],
									["CommandOptions", ">>>"]
								]
							]
						}
					],
					"returns": [
						[
							["Collection", "<"],
							["string", ", "],
							["Command", "<"],
							["Args", ", "],
							["CommandOptions", ">>"]
						]
					],
					"meta": { "line": 310, "file": "index.d.ts", "path": "node_modules/@discordjs/collection/dist" }
				},
				{
					"name": "construct",
					"description": "Constructs a {@link Piece} instance.",
					"params": [
						{
							"name": "Ctor",
							"description": "The {@link Piece}'s constructor used to build the instance.",
							"optional": false,
							"type": [
								[
									["ILoaderResultEntry", "<"],
									["Command", "<"],
									["Args", ", "],
									["CommandOptions", ">>"]
								]
							]
						},
						{
							"name": "data",
							"description": "The module's information",
							"optional": false,
							"type": [[["HydratedModuleData"]]]
						}
					],
					"returns": [
						[
							["Command", "<"],
							["Args", ", "],
							["CommandOptions", ">"]
						]
					],
					"returnsDescription": "An instance of the constructed piece.",
					"meta": { "line": 345, "file": "index.d.ts", "path": "node_modules/@sapphire/pieces/dist" }
				},
				{
					"name": "delete",
					"params": [{ "name": "key", "optional": false, "type": [[["string"]]] }],
					"returns": [[["boolean"]]]
				},
				{
					"name": "difference",
					"description": "The difference method returns a new structure containing items where the key is present in one of the original structures but not the other.",
					"params": [
						{
							"name": "other",
							"description": "The other Collection to filter against",
							"optional": false,
							"type": [
								[
									["Collection", "<"],
									["string", ", "],
									["Command", "<"],
									["Args", ", "],
									["CommandOptions", ">>"]
								]
							]
						}
					],
					"returns": [
						[
							["Collection", "<"],
							["string", ", "],
							["Command", "<"],
							["Args", ", "],
							["CommandOptions", ">>"]
						]
					],
					"meta": { "line": 344, "file": "index.d.ts", "path": "node_modules/@discordjs/collection/dist" }
				},
				{
					"name": "each",
					"description": "Identical to\n[Map.forEach()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/forEach),\nbut returns the collection instead of undefined.",
					"see": [],
					"examples": [
						"collection\n .each(user => console.log(user.username))\n .filter(user => user.bot)\n .each(user => console.log(user.username));"
					],
					"abstract": false,
					"deprecated": false,
					"emits": [],
					"params": [
						{
							"name": "fn",
							"description": "Function to execute for each element",
							"optional": false,
							"type": [
								[
									["("],
									["value", ": "],
									["Command", "<"],
									["Args", ", "],
									["CommandOptions", ">, "],
									["key", ": "],
									["string", ", "],
									["collection", ": "],
									["CommandStore", ") => "],
									["void"]
								]
							]
						}
					],
					"returns": [[["CommandStore"]]],
					"meta": { "line": 279, "file": "index.d.ts", "path": "node_modules/@discordjs/collection/dist" }
				},
				{
					"name": "entries",
					"description": "Returns an iterable of key, value pairs for every entry in the map.",
					"returns": [
						[
							["IterableIterator", "<["],
							["string", ", "],
							["Command", "<"],
							["Args", ", "],
							["CommandOptions", ">]>"]
						]
					]
				},
				{
					"name": "equals",
					"description": "Checks if this collection shares identical items with another.\nThis is different to checking for equality using equal-signs, because\nthe collections may be different objects, but contain the same data.",
					"params": [
						{
							"name": "collection",
							"description": "Collection to compare with",
							"optional": false,
							"type": [
								[
									["Collection", "<"],
									["string", ", "],
									["Command", "<"],
									["Args", ", "],
									["CommandOptions", ">>"]
								]
							]
						}
					],
					"returns": [[["boolean"]]],
					"returnsDescription": "Whether the collections have identical contents",
					"meta": { "line": 320, "file": "index.d.ts", "path": "node_modules/@discordjs/collection/dist" }
				},
				{
					"name": "every",
					"description": "Checks if all items passes a test. Identical in behavior to\n[Array.every()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every).",
					"see": [],
					"examples": ["collection.every(user => !user.bot);"],
					"abstract": false,
					"deprecated": false,
					"emits": [],
					"params": [
						{
							"name": "fn",
							"description": "Function used to test (should return a boolean)",
							"optional": false,
							"type": [
								[
									["("],
									["value", ": "],
									["Command", "<"],
									["Args", ", "],
									["CommandOptions", ">, "],
									["key", ": "],
									["string", ", "],
									["collection", ": "],
									["CommandStore", ") => "],
									["key", " "],
									["is", " "],
									["K2"]
								]
							]
						}
					],
					"returns": [
						[
							["this", " "],
							["is", " "],
							["Collection", "<"],
							["K2", ", "],
							["Command", "<"],
							["Args", ", "],
							["CommandOptions", ">>"]
						]
					],
					"meta": { "line": 247, "file": "index.d.ts", "path": "node_modules/@discordjs/collection/dist" }
				},
				{
					"name": "filter",
					"description": "Identical to\n[Array.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter),\nbut returns a Collection instead of an Array.",
					"see": [],
					"examples": ["collection.filter(user => user.username === 'Bob');"],
					"abstract": false,
					"deprecated": false,
					"emits": [],
					"params": [
						{
							"name": "fn",
							"description": "The function to test with (should return boolean)",
							"optional": false,
							"type": [
								[
									["("],
									["value", ": "],
									["Command", "<"],
									["Args", ", "],
									["CommandOptions", ">, "],
									["key", ": "],
									["string", ", "],
									["collection", ": "],
									["CommandStore", ") => "],
									["key", " "],
									["is", " "],
									["K2"]
								]
							]
						}
					],
					"returns": [
						[
							["Collection", "<"],
							["K2", ", "],
							["Command", "<"],
							["Args", ", "],
							["CommandOptions", ">>"]
						]
					],
					"meta": { "line": 167, "file": "index.d.ts", "path": "node_modules/@discordjs/collection/dist" }
				},
				{
					"name": "find",
					"description": "Searches for a single item where the given function returns a truthy value. This behaves like\n[Array.find()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find).\n<warn>All collections used in Discord.js are mapped using their `id` property, and if you want to find by id you\nshould use the `get` method. See\n[MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/get) for details.</warn>",
					"see": [],
					"examples": ["collection.find(user => user.username === 'Bob');"],
					"abstract": false,
					"deprecated": false,
					"emits": [],
					"params": [
						{
							"name": "fn",
							"description": "The function to test with (should return boolean)",
							"optional": false,
							"type": [
								[
									["("],
									["value", ": "],
									["Command", "<"],
									["Args", ", "],
									["CommandOptions", ">, "],
									["key", ": "],
									["string", ", "],
									["collection", ": "],
									["CommandStore", ") => "],
									["value", " "],
									["is", " "],
									["V2"]
								]
							]
						}
					],
					"returns": [[["undefined", " | "], ["V2"]]],
					"meta": { "line": 127, "file": "index.d.ts", "path": "node_modules/@discordjs/collection/dist" }
				},
				{
					"name": "findKey",
					"description": "Searches for the key of a single item where the given function returns a truthy value. This behaves like\n[Array.findIndex()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex),\nbut returns the key rather than the positional index.",
					"see": [],
					"examples": ["collection.findKey(user => user.username === 'Bob');"],
					"abstract": false,
					"deprecated": false,
					"emits": [],
					"params": [
						{
							"name": "fn",
							"description": "The function to test with (should return boolean)",
							"optional": false,
							"type": [
								[
									["("],
									["value", ": "],
									["Command", "<"],
									["Args", ", "],
									["CommandOptions", ">, "],
									["key", ": "],
									["string", ", "],
									["collection", ": "],
									["CommandStore", ") => "],
									["key", " "],
									["is", " "],
									["K2"]
								]
							]
						}
					],
					"returns": [[["undefined", " | "], ["K2"]]],
					"meta": { "line": 142, "file": "index.d.ts", "path": "node_modules/@discordjs/collection/dist" }
				},
				{
					"name": "first",
					"description": "Obtains the first value(s) in this collection.",
					"returns": [
						[
							["undefined", " | "],
							["Command", "<"],
							["Args", ", "],
							["CommandOptions", ">"]
						]
					],
					"returnsDescription": "A single value if no amount is provided or an array of values, starting from the end if amount is negative",
					"meta": { "line": 48, "file": "index.d.ts", "path": "node_modules/@discordjs/collection/dist" }
				},
				{
					"name": "firstKey",
					"description": "Obtains the first key(s) in this collection.",
					"returns": [[["undefined", " | "], ["string"]]],
					"returnsDescription": "A single key if no amount is provided or an array of keys, starting from the end if\namount is negative",
					"meta": { "line": 58, "file": "index.d.ts", "path": "node_modules/@discordjs/collection/dist" }
				},
				{
					"name": "flatMap",
					"description": "Maps each item into a Collection, then joins the results into a single Collection. Identical in behavior to\n[Array.flatMap()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/flatMap).",
					"see": [],
					"examples": ["collection.flatMap(guild => guild.members.cache);"],
					"abstract": false,
					"deprecated": false,
					"emits": [],
					"params": [
						{
							"name": "fn",
							"description": "Function that produces a new Collection",
							"optional": false,
							"type": [
								[
									["("],
									["value", ": "],
									["Command", "<"],
									["Args", ", "],
									["CommandOptions", ">, "],
									["key", ": "],
									["string", ", "],
									["collection", ": "],
									["CommandStore", ") => "],
									["Collection", "<"],
									["string", ", "],
									["T", ">"]
								]
							]
						}
					],
					"returns": [
						[
							["Collection", "<"],
							["string", ", "],
							["T", ">"]
						]
					],
					"meta": { "line": 199, "file": "index.d.ts", "path": "node_modules/@discordjs/collection/dist" }
				},
				{
					"name": "forEach",
					"params": [
						{
							"name": "callbackfn",
							"optional": false,
							"type": [
								[
									["("],
									["value", ": "],
									["Command", "<"],
									["Args", ", "],
									["CommandOptions", ">, "],
									["key", ": "],
									["string", ", "],
									["map", ": "],
									["Map", "<"],
									["string", ", "],
									["Command", "<"],
									["Args", ", "],
									["CommandOptions", ">>) => "],
									["void"]
								]
							]
						},
						{ "name": "thisArg", "optional": true, "type": [[["any"]]] }
					],
					"returns": [[["void"]]]
				},
				{
					"name": "get",
					"description": "Looks up the name by the store, falling back to an alias lookup.",
					"params": [{ "name": "key", "description": "The key to look for.", "optional": false, "type": [[["string"]]] }],
					"returns": [
						[
							["undefined", " | "],
							["Command", "<"],
							["Args", ", "],
							["CommandOptions", ">"]
						]
					],
					"meta": { "line": 717, "file": "index.d.ts", "path": "node_modules/@sapphire/pieces/dist" }
				},
				{
					"name": "has",
					"description": "Checks whether a key is in the store, or is an alias",
					"params": [{ "name": "key", "description": "The key to check", "optional": false, "type": [[["string"]]] }],
					"returns": [[["boolean"]]],
					"meta": { "line": 722, "file": "index.d.ts", "path": "node_modules/@sapphire/pieces/dist" }
				},
				{
					"name": "hasAll",
					"description": "Checks if all of the elements exist in the collection.",
					"params": [
						{
							"name": "keys",
							"description": "The keys of the elements to check for",
							"optional": false,
							"type": [
								[
									["Array", "<"],
									["string", ">"]
								]
							]
						}
					],
					"returns": [[["boolean"]]],
					"returnsDescription": "`true` if all of the elements exist, `false` if at least one does not exist.",
					"meta": { "line": 32, "file": "index.d.ts", "path": "node_modules/@discordjs/collection/dist" }
				},
				{
					"name": "hasAny",
					"description": "Checks if any of the elements exist in the collection.",
					"params": [
						{
							"name": "keys",
							"description": "The keys of the elements to check for",
							"optional": false,
							"type": [
								[
									["Array", "<"],
									["string", ">"]
								]
							]
						}
					],
					"returns": [[["boolean"]]],
					"returnsDescription": "`true` if any of the elements exist, `false` if none exist.",
					"meta": { "line": 40, "file": "index.d.ts", "path": "node_modules/@discordjs/collection/dist" }
				},
				{
					"name": "insert",
					"description": "Inserts a piece into the store, and adds all the aliases.",
					"params": [
						{
							"name": "piece",
							"description": "The piece to be inserted into the store.",
							"optional": false,
							"type": [
								[
									["Command", "<"],
									["Args", ", "],
									["CommandOptions", ">"]
								]
							]
						}
					],
					"returns": [
						[
							["Promise", "<"],
							["Command", "<"],
							["Args", ", "],
							["CommandOptions", ">>"]
						]
					],
					"returnsDescription": "The inserted piece.",
					"meta": { "line": 734, "file": "index.d.ts", "path": "node_modules/@sapphire/pieces/dist" }
				},
				{
					"name": "intersect",
					"description": "The intersect method returns a new structure containing items where the keys are present in both original structures.",
					"params": [
						{
							"name": "other",
							"description": "The other Collection to filter against",
							"optional": false,
							"type": [
								[
									["Collection", "<"],
									["string", ", "],
									["Command", "<"],
									["Args", ", "],
									["CommandOptions", ">>"]
								]
							]
						}
					],
					"returns": [
						[
							["Collection", "<"],
							["string", ", "],
							["Command", "<"],
							["Args", ", "],
							["CommandOptions", ">>"]
						]
					],
					"meta": { "line": 338, "file": "index.d.ts", "path": "node_modules/@discordjs/collection/dist" }
				},
				{
					"name": "keyAt",
					"description": "Identical to [Array.at()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/at).\nReturns the key at a given index, allowing for positive and negative integers.\nNegative integers count back from the last item in the collection.",
					"params": [
						{
							"name": "index",
							"description": "The index of the key to obtain",
							"optional": true,
							"type": [[["number"]]]
						}
					],
					"returns": [[["undefined", " | "], ["string"]]],
					"meta": { "line": 95, "file": "index.d.ts", "path": "node_modules/@discordjs/collection/dist" }
				},
				{
					"name": "keys",
					"description": "Returns an iterable of keys in the map",
					"returns": [
						[
							["IterableIterator", "<"],
							["string", ">"]
						]
					]
				},
				{
					"name": "last",
					"description": "Obtains the last value(s) in this collection.",
					"returns": [
						[
							["undefined", " | "],
							["Command", "<"],
							["Args", ", "],
							["CommandOptions", ">"]
						]
					],
					"returnsDescription": "A single value if no amount is provided or an array of values, starting from the start if\namount is negative",
					"meta": { "line": 68, "file": "index.d.ts", "path": "node_modules/@discordjs/collection/dist" }
				},
				{
					"name": "lastKey",
					"description": "Obtains the last key(s) in this collection.",
					"returns": [[["undefined", " | "], ["string"]]],
					"returnsDescription": "A single key if no amount is provided or an array of keys, starting from the start if\namount is negative",
					"meta": { "line": 78, "file": "index.d.ts", "path": "node_modules/@discordjs/collection/dist" }
				},
				{
					"name": "load",
					"description": "Loads one or more pieces from a path.",
					"params": [
						{
							"name": "root",
							"description": "The root directory the file is from.",
							"optional": false,
							"type": [[["string"]]]
						},
						{
							"name": "path",
							"description": "The path of the file to load, relative to the `root`.",
							"optional": false,
							"type": [[["string"]]]
						}
					],
					"returns": [
						[
							["Promise", "<"],
							["Array", "<"],
							["Command", "<"],
							["Args", ", "],
							["CommandOptions", ">>>"]
						]
					],
					"returnsDescription": "All the loaded pieces.",
					"meta": { "line": 312, "file": "index.d.ts", "path": "node_modules/@sapphire/pieces/dist" }
				},
				{
					"name": "loadAll",
					"description": "Loads all pieces from all directories specified by {@link paths}.",
					"returns": [
						[
							["Promise", "<"],
							["void", ">"]
						]
					],
					"meta": { "line": 326, "file": "index.d.ts", "path": "node_modules/@sapphire/pieces/dist" }
				},
				{
					"name": "map",
					"description": "Maps each item to another value into an array. Identical in behavior to\n[Array.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map).",
					"see": [],
					"examples": ["collection.map(user => user.tag);"],
					"abstract": false,
					"deprecated": false,
					"emits": [],
					"params": [
						{
							"name": "fn",
							"description": "Function that produces an element of the new array, taking three arguments",
							"optional": false,
							"type": [
								[
									["("],
									["value", ": "],
									["Command", "<"],
									["Args", ", "],
									["CommandOptions", ">, "],
									["key", ": "],
									["string", ", "],
									["collection", ": "],
									["CommandStore", ") => "],
									["T"]
								]
							]
						}
					],
					"returns": [
						[
							["Array", "<"],
							["T", ">"]
						]
					],
					"meta": { "line": 211, "file": "index.d.ts", "path": "node_modules/@discordjs/collection/dist" }
				},
				{
					"name": "mapValues",
					"description": "Maps each item to another value into a collection. Identical in behavior to\n[Array.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map).",
					"see": [],
					"examples": ["collection.mapValues(user => user.tag);"],
					"abstract": false,
					"deprecated": false,
					"emits": [],
					"params": [
						{
							"name": "fn",
							"description": "Function that produces an element of the new collection, taking three arguments",
							"optional": false,
							"type": [
								[
									["("],
									["value", ": "],
									["Command", "<"],
									["Args", ", "],
									["CommandOptions", ">, "],
									["key", ": "],
									["string", ", "],
									["collection", ": "],
									["CommandStore", ") => "],
									["T"]
								]
							]
						}
					],
					"returns": [
						[
							["Collection", "<"],
							["string", ", "],
							["T", ">"]
						]
					],
					"meta": { "line": 223, "file": "index.d.ts", "path": "node_modules/@discordjs/collection/dist" }
				},
				{
					"name": "partition",
					"description": "Partitions the collection into two collections where the first collection\ncontains the items that passed and the second contains the items that failed.",
					"see": [],
					"examples": ["const [big, small] = collection.partition(guild => guild.memberCount > 250);"],
					"abstract": false,
					"deprecated": false,
					"emits": [],
					"params": [
						{
							"name": "fn",
							"description": "Function used to test (should return a boolean)",
							"optional": false,
							"type": [
								[
									["("],
									["value", ": "],
									["Command", "<"],
									["Args", ", "],
									["CommandOptions", ">, "],
									["key", ": "],
									["string", ", "],
									["collection", ": "],
									["CommandStore", ") => "],
									["key", " "],
									["is", " "],
									["K2"]
								]
							]
						}
					],
					"returns": [
						[
							["["],
							["Collection", "<"],
							["K2", ", "],
							["Command", "<"],
							["Args", ", "],
							["CommandOptions", ">>, "],
							["Collection", "<"],
							["Exclude", "<"],
							["string", ", "],
							["K2", ">, "],
							["Command", "<"],
							["Args", ", "],
							["CommandOptions", ">>]"]
						]
					],
					"meta": { "line": 183, "file": "index.d.ts", "path": "node_modules/@discordjs/collection/dist" }
				},
				{
					"name": "random",
					"description": "Obtains unique random value(s) from this collection.",
					"returns": [
						[
							["undefined", " | "],
							["Command", "<"],
							["Args", ", "],
							["CommandOptions", ">"]
						]
					],
					"returnsDescription": "A single value if no amount is provided or an array of values",
					"meta": { "line": 103, "file": "index.d.ts", "path": "node_modules/@discordjs/collection/dist" }
				},
				{
					"name": "randomKey",
					"description": "Obtains unique random key(s) from this collection.",
					"returns": [[["undefined", " | "], ["string"]]],
					"returnsDescription": "A single key if no amount is provided or an array",
					"meta": { "line": 112, "file": "index.d.ts", "path": "node_modules/@discordjs/collection/dist" }
				},
				{
					"name": "reduce",
					"description": "Applies a function to produce a single value. Identical in behavior to\n[Array.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).",
					"see": [],
					"examples": ["collection.reduce((acc, guild) => acc + guild.memberCount, 0);"],
					"abstract": false,
					"deprecated": false,
					"emits": [],
					"params": [
						{
							"name": "fn",
							"description": "Function used to reduce, taking four arguments; `accumulator`, `currentValue`, `currentKey`,\nand `collection`",
							"optional": false,
							"type": [
								[
									["("],
									["accumulator", ": "],
									["T", ", "],
									["value", ": "],
									["Command", "<"],
									["Args", ", "],
									["CommandOptions", ">, "],
									["key", ": "],
									["string", ", "],
									["collection", ": "],
									["CommandStore", ") => "],
									["T"]
								]
							]
						},
						{
							"name": "initialValue",
							"description": "Starting value for the accumulator",
							"optional": true,
							"type": [[["T"]]]
						}
					],
					"returns": [[["T"]]],
					"meta": { "line": 264, "file": "index.d.ts", "path": "node_modules/@discordjs/collection/dist" }
				},
				{
					"name": "registerPath",
					"description": "Registers a directory into the store.",
					"see": [],
					"examples": [
						"```typescript\nstore\n  .registerPath(resolve('commands'))\n  .registerPath(resolve('third-party', 'commands'));\n```"
					],
					"abstract": false,
					"deprecated": false,
					"emits": [],
					"params": [{ "name": "path", "description": "The path to be added.", "optional": false, "type": [[["string"]]] }],
					"returns": [[["CommandStore"]]],
					"meta": { "line": 305, "file": "index.d.ts", "path": "node_modules/@sapphire/pieces/dist" }
				},
				{
					"name": "resolve",
					"description": "Resolves a piece by its name or its instance.",
					"params": [
						{
							"name": "name",
							"description": "The name of the piece or the instance itself.",
							"optional": false,
							"type": [
								[
									["string", " | "],
									["Command", "<"],
									["Args", ", "],
									["CommandOptions", ">"]
								]
							]
						}
					],
					"returns": [
						[
							["Command", "<"],
							["Args", ", "],
							["CommandOptions", ">"]
						]
					],
					"returnsDescription": "The resolved piece.",
					"meta": { "line": 332, "file": "index.d.ts", "path": "node_modules/@sapphire/pieces/dist" }
				},
				{
					"name": "set",
					"params": [
						{ "name": "key", "optional": false, "type": [[["string"]]] },
						{
							"name": "value",
							"optional": false,
							"type": [
								[
									["Command", "<"],
									["Args", ", "],
									["CommandOptions", ">"]
								]
							]
						}
					],
					"returns": [[["CommandStore"]]]
				},
				{
					"name": "some",
					"description": "Checks if there exists an item that passes a test. Identical in behavior to\n[Array.some()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some).",
					"see": [],
					"examples": ["collection.some(user => user.discriminator === '0000');"],
					"abstract": false,
					"deprecated": false,
					"emits": [],
					"params": [
						{
							"name": "fn",
							"description": "Function used to test (should return a boolean)",
							"optional": false,
							"type": [
								[
									["("],
									["value", ": "],
									["Command", "<"],
									["Args", ", "],
									["CommandOptions", ">, "],
									["key", ": "],
									["string", ", "],
									["collection", ": "],
									["CommandStore", ") => "],
									["boolean"]
								]
							]
						}
					],
					"returns": [[["boolean"]]],
					"meta": { "line": 235, "file": "index.d.ts", "path": "node_modules/@discordjs/collection/dist" }
				},
				{
					"name": "sort",
					"description": "The sort method sorts the items of a collection in place and returns it.\nThe sort is not necessarily stable in Node 10 or older.\nThe default sort order is according to string Unicode code points.",
					"see": [],
					"examples": ["collection.sort((userA, userB) => userA.createdTimestamp - userB.createdTimestamp);"],
					"abstract": false,
					"deprecated": false,
					"emits": [],
					"params": [
						{
							"name": "compareFunction",
							"description": "Specifies a function that defines the sort order.\nIf omitted, the collection is sorted according to each character's Unicode code point value, according to the string conversion of each element.",
							"optional": true,
							"type": [
								[
									["Comparator", "<"],
									["string", ", "],
									["Command", "<"],
									["Args", ", "],
									["CommandOptions", ">>"]
								]
							]
						}
					],
					"returns": [[["CommandStore"]]],
					"meta": { "line": 332, "file": "index.d.ts", "path": "node_modules/@discordjs/collection/dist" }
				},
				{
					"name": "sorted",
					"description": "The sorted method sorts the items of a collection and returns it.\nThe sort is not necessarily stable in Node 10 or older.\nThe default sort order is according to string Unicode code points.",
					"see": [],
					"examples": ["collection.sorted((userA, userB) => userA.createdTimestamp - userB.createdTimestamp);"],
					"abstract": false,
					"deprecated": false,
					"emits": [],
					"params": [
						{
							"name": "compareFunction",
							"description": "Specifies a function that defines the sort order.\nIf omitted, the collection is sorted according to each character's Unicode code point value,\naccording to the string conversion of each element.",
							"optional": true,
							"type": [
								[
									["Comparator", "<"],
									["string", ", "],
									["Command", "<"],
									["Args", ", "],
									["CommandOptions", ">>"]
								]
							]
						}
					],
					"returns": [
						[
							["Collection", "<"],
							["string", ", "],
							["Command", "<"],
							["Args", ", "],
							["CommandOptions", ">>"]
						]
					],
					"meta": { "line": 357, "file": "index.d.ts", "path": "node_modules/@discordjs/collection/dist" }
				},
				{
					"name": "sweep",
					"description": "Removes items that satisfy the provided filter function.",
					"params": [
						{
							"name": "fn",
							"description": "Function used to test (should return a boolean)",
							"optional": false,
							"type": [
								[
									["("],
									["value", ": "],
									["Command", "<"],
									["Args", ", "],
									["CommandOptions", ">, "],
									["key", ": "],
									["string", ", "],
									["collection", ": "],
									["CommandStore", ") => "],
									["boolean"]
								]
							]
						}
					],
					"returns": [[["number"]]],
					"returnsDescription": "The number of removed entries",
					"meta": { "line": 154, "file": "index.d.ts", "path": "node_modules/@discordjs/collection/dist" }
				},
				{
					"name": "tap",
					"description": "Runs a function on the collection and returns the collection.",
					"see": [],
					"examples": [
						"collection\n .tap(coll => console.log(coll.size))\n .filter(user => user.bot)\n .tap(coll => console.log(coll.size))"
					],
					"abstract": false,
					"deprecated": false,
					"emits": [],
					"params": [
						{
							"name": "fn",
							"description": "Function to execute",
							"optional": false,
							"type": [[["("], ["collection", ": "], ["CommandStore", ") => "], ["void"]]]
						}
					],
					"returns": [[["CommandStore"]]],
					"meta": { "line": 293, "file": "index.d.ts", "path": "node_modules/@discordjs/collection/dist" }
				},
				{
					"name": "toJSON",
					"returns": [
						[
							["Array", "<"],
							["Command", "<"],
							["Args", ", "],
							["CommandOptions", ">>"]
						]
					],
					"meta": { "line": 358, "file": "index.d.ts", "path": "node_modules/@discordjs/collection/dist" }
				},
				{
					"name": "unload",
					"description": "Unloads a piece given its instance or its name, and removes all the aliases.",
					"params": [
						{
							"name": "name",
							"description": "The name of the file to load.",
							"optional": false,
							"type": [
								[
									["string", " | "],
									["Command", "<"],
									["Args", ", "],
									["CommandOptions", ">"]
								]
							]
						}
					],
					"returns": [
						[
							["Promise", "<"],
							["Command", "<"],
							["Args", ", "],
							["CommandOptions", ">>"]
						]
					],
					"returnsDescription": "Returns the piece that was unloaded.",
					"meta": { "line": 728, "file": "index.d.ts", "path": "node_modules/@sapphire/pieces/dist" }
				},
				{
					"name": "unloadAll",
					"description": "Unloads all pieces from the store.",
					"returns": [
						[
							["Promise", "<"],
							["Array", "<"],
							["Command", "<"],
							["Args", ", "],
							["CommandOptions", ">>>"]
						]
					],
					"meta": { "line": 322, "file": "index.d.ts", "path": "node_modules/@sapphire/pieces/dist" }
				},
				{
					"name": "values",
					"description": "Returns an iterable of values in the map",
					"returns": [
						[
							["IterableIterator", "<"],
							["Command", "<"],
							["Args", ", "],
							["CommandOptions", ">>"]
						]
					]
				}
			],
			"meta": { "line": 8, "file": "CommandStore.ts", "path": "src/lib/structures" }
		},
		{
			"name": "ExtendedArgument",
			"see": [],
			"extends": ["Argument<T>"],
			"abstract": false,
			"deprecated": true,
			"construct": {
				"name": "constructor",
				"see": [],
				"examples": [],
				"abstract": false,
				"deprecated": true,
				"emits": [],
				"params": [
					{ "name": "context", "optional": false, "type": [[["PieceContext"]]] },
					{
						"name": "options",
						"optional": false,
						"type": [
							[
								["ExtendedArgumentOptions", "<"],
								["K", ">"]
							]
						]
					}
				],
				"returns": [
					[
						["ExtendedArgument", "<"],
						["K", ", "],
						["T", ">"]
					]
				],
				"meta": { "line": 61, "file": "ExtendedArgument.ts", "path": "src/lib/structures" }
			},
			"props": [
				{
					"name": "aliases",
					"description": "The aliases for the piece.",
					"type": [
						[
							["readonly", " "],
							["Array", "<"],
							["string", ">"]
						]
					],
					"meta": { "line": 690, "file": "index.d.ts", "path": "node_modules/@sapphire/pieces/dist" }
				},
				{
					"name": "baseArgument",
					"type": [[["K"]]],
					"meta": { "line": 56, "file": "ExtendedArgument.ts", "path": "src/lib/structures" }
				},
				{
					"name": "enabled",
					"description": "Whether or not the piece is enabled.",
					"type": [[["boolean"]]],
					"meta": { "line": 447, "file": "index.d.ts", "path": "node_modules/@sapphire/pieces/dist" }
				},
				{
					"name": "location",
					"description": "The location metadata for the piece's file.",
					"readonly": true,
					"type": [[["PieceLocation"]]],
					"meta": { "line": 439, "file": "index.d.ts", "path": "node_modules/@sapphire/pieces/dist" }
				},
				{
					"name": "name",
					"description": "The name of the piece.",
					"readonly": true,
					"type": [[["string"]]],
					"meta": { "line": 443, "file": "index.d.ts", "path": "node_modules/@sapphire/pieces/dist" }
				},
				{
					"name": "options",
					"description": "The raw options passed to this {@link Piece}",
					"readonly": true,
					"type": [[["ArgumentOptions"]]],
					"meta": { "line": 451, "file": "index.d.ts", "path": "node_modules/@sapphire/pieces/dist" }
				},
				{
					"name": "store",
					"description": "The store that contains the piece.",
					"readonly": true,
					"type": [
						[
							["Store", "<"],
							["Piece", "<"],
							["PieceOptions", ">>"]
						]
					],
					"meta": { "line": 435, "file": "index.d.ts", "path": "node_modules/@sapphire/pieces/dist" }
				},
				{
					"name": "base",
					"description": "Represents the underlying argument that transforms the raw argument\ninto the value used to compute the extended argument's value.",
					"see": [],
					"readonly": true,
					"abstract": false,
					"deprecated": true,
					"type": [
						[
							["IArgument", "<"],
							["ArgType", "["],
							["K", "]>"]
						]
					],
					"meta": { "line": 71, "file": "ExtendedArgument.ts", "path": "src/lib/structures" }
				},
				{
					"name": "container",
					"description": "A reference to the {@link Container} object for ease of use.",
					"see": ["container"],
					"readonly": true,
					"abstract": false,
					"deprecated": false,
					"type": [[["Container"]]],
					"meta": { "line": 457, "file": "index.d.ts", "path": "node_modules/@sapphire/pieces/dist" }
				}
			],
			"methods": [
				{
					"name": "error",
					"description": "Constructs an {@link ArgumentError} with a custom type.",
					"params": [
						{
							"name": "options",
							"optional": false,
							"type": [
								[
									["Omit", "<"],
									["Options", "<"],
									["T", ">, "],
									["'argument'", ">"]
								]
							]
						}
					],
					"returns": [
						[
							["Result", "<"],
							["T", ">"]
						]
					],
					"meta": { "line": 107, "file": "Argument.ts", "path": "src/lib/structures" }
				},
				{
					"name": "handle",
					"see": [],
					"examples": [],
					"abstract": false,
					"deprecated": true,
					"emits": [],
					"params": [
						{
							"name": "parsed",
							"optional": false,
							"type": [
								[
									["ArgType", "["],
									["K", "]"]
								]
							]
						},
						{ "name": "context", "optional": false, "type": [[["ExtendedArgumentContext"]]] }
					],
					"returns": [
						[
							["Result", "<"],
							["T", ">"]
						]
					],
					"meta": { "line": 89, "file": "ExtendedArgument.ts", "path": "src/lib/structures" }
				},
				{
					"name": "ok",
					"description": "Wraps a value into a successful value.",
					"params": [{ "name": "value", "description": "The value to wrap.", "optional": false, "type": [[["T"]]] }],
					"returns": [
						[
							["Result", "<"],
							["T", ">"]
						]
					],
					"meta": { "line": 97, "file": "Argument.ts", "path": "src/lib/structures" }
				},
				{
					"name": "onLoad",
					"description": "Per-piece listener that is called when the piece is loaded into the store.\nUseful to set-up asynchronous initialization tasks.",
					"returns": [[["unknown"]]],
					"meta": { "line": 462, "file": "index.d.ts", "path": "node_modules/@sapphire/pieces/dist" }
				},
				{
					"name": "onUnload",
					"description": "Per-piece listener that is called when the piece is unloaded from the store.\nUseful to set-up clean-up tasks.",
					"returns": [[["unknown"]]],
					"meta": { "line": 467, "file": "index.d.ts", "path": "node_modules/@sapphire/pieces/dist" }
				},
				{
					"name": "reload",
					"description": "Reloads the piece by loading the same path in the store.",
					"returns": [
						[
							["Promise", "<"],
							["void", ">"]
						]
					],
					"meta": { "line": 475, "file": "index.d.ts", "path": "node_modules/@sapphire/pieces/dist" }
				},
				{
					"name": "run",
					"see": [],
					"examples": [],
					"abstract": false,
					"deprecated": true,
					"emits": [],
					"params": [
						{ "name": "parameter", "optional": false, "type": [[["string"]]] },
						{
							"name": "context",
							"optional": false,
							"type": [
								[
									["Context", "<"],
									["T", ">"]
								]
							]
						}
					],
					"returns": [
						[
							["AsyncResult", "<"],
							["T", ">"]
						]
					],
					"meta": { "line": 78, "file": "ExtendedArgument.ts", "path": "src/lib/structures" }
				},
				{
					"name": "toJSON",
					"description": "Defines the `JSON.stringify` behavior of this alias piece.",
					"returns": [[["AliasPieceJSON"]]],
					"meta": { "line": 695, "file": "index.d.ts", "path": "node_modules/@sapphire/pieces/dist" }
				},
				{
					"name": "unload",
					"description": "Unloads and disables the piece.",
					"returns": [
						[
							["Promise", "<"],
							["void", ">"]
						]
					],
					"meta": { "line": 471, "file": "index.d.ts", "path": "node_modules/@sapphire/pieces/dist" }
				}
			],
			"meta": { "line": 55, "file": "ExtendedArgument.ts", "path": "src/lib/structures" }
		},
		{
			"name": "Listener",
			"description": "The base event class. This class is abstract and is to be extended by subclasses, which should implement the methods. In\nSapphire's workflow, listeners are called when the emitter they listen on emits a new message with the same event name.",
			"see": [],
			"extends": ["Piece<O>"],
			"abstract": false,
			"deprecated": false,
			"construct": {
				"name": "constructor",
				"params": [
					{ "name": "context", "optional": false, "type": [[["PieceContext"]]] },
					{ "name": "options", "optional": true, "default": "{}", "type": [[["ListenerOptions"]]] }
				],
				"returns": [
					[
						["Listener", "<"],
						["E", ", "],
						["O", ">"]
					]
				],
				"meta": { "line": 67, "file": "Listener.ts", "path": "src/lib/structures" }
			},
			"props": [
				{
					"name": "_listener",
					"access": "private",
					"type": [[["null", " | ("], ["args", ": "], ["Array", "<"], ["any", ">) => "], ["void"]]],
					"meta": { "line": 65, "file": "Listener.ts", "path": "src/lib/structures" }
				},
				{
					"name": "emitter",
					"description": "The emitter, if any.",
					"see": [],
					"readonly": true,
					"abstract": false,
					"deprecated": false,
					"type": [[["null", " | "], ["EventEmitter"]]],
					"meta": { "line": 51, "file": "Listener.ts", "path": "src/lib/structures" }
				},
				{
					"name": "enabled",
					"description": "Whether or not the piece is enabled.",
					"type": [[["boolean"]]],
					"meta": { "line": 447, "file": "index.d.ts", "path": "node_modules/@sapphire/pieces/dist" }
				},
				{
					"name": "event",
					"description": "The name of the event the listener listens to.",
					"see": [],
					"readonly": true,
					"abstract": false,
					"deprecated": false,
					"type": [[["string"]]],
					"meta": { "line": 57, "file": "Listener.ts", "path": "src/lib/structures" }
				},
				{
					"name": "location",
					"description": "The location metadata for the piece's file.",
					"readonly": true,
					"type": [[["PieceLocation"]]],
					"meta": { "line": 439, "file": "index.d.ts", "path": "node_modules/@sapphire/pieces/dist" }
				},
				{
					"name": "name",
					"description": "The name of the piece.",
					"readonly": true,
					"type": [[["string"]]],
					"meta": { "line": 443, "file": "index.d.ts", "path": "node_modules/@sapphire/pieces/dist" }
				},
				{
					"name": "once",
					"description": "Whether or not the listener will be unloaded after the first run.",
					"see": [],
					"readonly": true,
					"abstract": false,
					"deprecated": false,
					"type": [[["boolean"]]],
					"meta": { "line": 63, "file": "Listener.ts", "path": "src/lib/structures" }
				},
				{
					"name": "options",
					"description": "The raw options passed to this {@link Piece}",
					"readonly": true,
					"type": [[["O"]]],
					"meta": { "line": 451, "file": "index.d.ts", "path": "node_modules/@sapphire/pieces/dist" }
				},
				{
					"name": "store",
					"description": "The store that contains the piece.",
					"readonly": true,
					"type": [
						[
							["Store", "<"],
							["Piece", "<"],
							["PieceOptions", ">>"]
						]
					],
					"meta": { "line": 435, "file": "index.d.ts", "path": "node_modules/@sapphire/pieces/dist" }
				},
				{
					"name": "container",
					"description": "A reference to the {@link Container} object for ease of use.",
					"see": ["container"],
					"readonly": true,
					"abstract": false,
					"deprecated": false,
					"type": [[["Container"]]],
					"meta": { "line": 457, "file": "index.d.ts", "path": "node_modules/@sapphire/pieces/dist" }
				}
			],
			"methods": [
				{
					"name": "_run",
					"access": "private",
					"params": [
						{
							"name": "args",
							"optional": false,
							"type": [
								[
									["Array", "<"],
									["unknown", ">"]
								]
							]
						}
					],
					"returns": [
						[
							["Promise", "<"],
							["void", ">"]
						]
					],
					"meta": { "line": 122, "file": "Listener.ts", "path": "src/lib/structures" }
				},
				{
					"name": "_runOnce",
					"access": "private",
					"params": [
						{
							"name": "args",
							"optional": false,
							"type": [
								[
									["Array", "<"],
									["unknown", ">"]
								]
							]
						}
					],
					"returns": [
						[
							["Promise", "<"],
							["void", ">"]
						]
					],
					"meta": { "line": 130, "file": "Listener.ts", "path": "src/lib/structures" }
				},
				{
					"name": "onLoad",
					"description": "Per-piece listener that is called when the piece is loaded into the store.\nUseful to set-up asynchronous initialization tasks.",
					"returns": [[["unknown"]]],
					"meta": { "line": 86, "file": "Listener.ts", "path": "src/lib/structures" }
				},
				{
					"name": "onUnload",
					"description": "Per-piece listener that is called when the piece is unloaded from the store.\nUseful to set-up clean-up tasks.",
					"returns": [[["unknown"]]],
					"meta": { "line": 99, "file": "Listener.ts", "path": "src/lib/structures" }
				},
				{
					"name": "reload",
					"description": "Reloads the piece by loading the same path in the store.",
					"returns": [
						[
							["Promise", "<"],
							["void", ">"]
						]
					],
					"meta": { "line": 475, "file": "index.d.ts", "path": "node_modules/@sapphire/pieces/dist" }
				},
				{
					"name": "run",
					"params": [
						{
							"name": "args",
							"optional": false,
							"type": [
								[
									["E", " "],
									["extends", " "],
									["keyof", " "],
									["ClientEvents", " ? "],
									["ClientEvents", "["],
									["E", "] : "],
									["Array", "<"],
									["unknown", ">"]
								]
							]
						}
					],
					"returns": [[["unknown"]]],
					"meta": { "line": 84, "file": "Listener.ts", "path": "src/lib/structures" }
				},
				{
					"name": "toJSON",
					"description": "Defines the `JSON.stringify` behavior of this piece.",
					"returns": [[["ListenerJSON"]]],
					"meta": { "line": 114, "file": "Listener.ts", "path": "src/lib/structures" }
				},
				{
					"name": "unload",
					"description": "Unloads and disables the piece.",
					"returns": [
						[
							["Promise", "<"],
							["void", ">"]
						]
					],
					"meta": { "line": 471, "file": "index.d.ts", "path": "node_modules/@sapphire/pieces/dist" }
				}
			],
			"meta": { "line": 46, "file": "Listener.ts", "path": "src/lib/structures" }
		},
		{
			"name": "ListenerStore",
			"extends": ["Store<Listener>"],
			"construct": {
				"name": "constructor",
				"returns": [[["ListenerStore"]]],
				"meta": { "line": 5, "file": "ListenerStore.ts", "path": "src/lib/structures" }
			},
			"props": [
				{
					"name": "Constructor",
					"readonly": true,
					"type": [
						[
							["Constructor", "<"],
							["Listener", "<"],
							["''", ", "],
							["ListenerOptions", ">>"]
						]
					],
					"meta": { "line": 281, "file": "index.d.ts", "path": "node_modules/@sapphire/pieces/dist" }
				},
				{
					"name": "[toStringTag]",
					"readonly": true,
					"type": [[["string"]]],
					"meta": { "line": 135, "file": "lib.es2015.symbol.wellknown.d.ts", "path": "node_modules/typescript/lib" }
				},
				{
					"name": "constructor",
					"type": [[["CollectionConstructor"]]],
					"meta": { "line": 17, "file": "index.d.ts", "path": "node_modules/@discordjs/collection/dist" }
				},
				{
					"name": "name",
					"readonly": true,
					"type": [[["string"]]],
					"meta": { "line": 282, "file": "index.d.ts", "path": "node_modules/@sapphire/pieces/dist" }
				},
				{
					"name": "paths",
					"readonly": true,
					"type": [
						[
							["Set", "<"],
							["string", ">"]
						]
					],
					"meta": { "line": 283, "file": "index.d.ts", "path": "node_modules/@sapphire/pieces/dist" }
				},
				{
					"name": "size",
					"readonly": true,
					"type": [[["number"]]],
					"meta": { "line": 28, "file": "lib.es2015.collection.d.ts", "path": "node_modules/typescript/lib" }
				},
				{
					"name": "strategy",
					"readonly": true,
					"type": [
						[
							["ILoaderStrategy", "<"],
							["Listener", "<"],
							["''", ", "],
							["ListenerOptions", ">>"]
						]
					],
					"meta": { "line": 284, "file": "index.d.ts", "path": "node_modules/@sapphire/pieces/dist" }
				},
				{
					"name": "[species]",
					"scope": "static",
					"readonly": true,
					"type": [[["MapConstructor"]]],
					"meta": { "line": 317, "file": "lib.es2015.symbol.wellknown.d.ts", "path": "node_modules/typescript/lib" }
				},
				{
					"name": "default",
					"scope": "static",
					"readonly": true,
					"type": [[["("], ["typeof", " "], ["Collection", ")"]]],
					"meta": { "line": 24, "file": "index.d.ts", "path": "node_modules/@discordjs/collection/dist" }
				},
				{
					"name": "defaultStrategy",
					"description": "The default strategy, defaults to {@link LoaderStrategy}, which is constructed on demand when a store is constructed,\nwhen none was set beforehand.",
					"scope": "static",
					"type": [
						[
							["ILoaderStrategy", "<"],
							["any", ">"]
						]
					],
					"meta": { "line": 369, "file": "index.d.ts", "path": "node_modules/@sapphire/pieces/dist" }
				},
				{
					"name": "logger",
					"description": "The default logger, defaults to `null`.",
					"scope": "static",
					"type": [[["null", " | "], ["StoreLogger"]]],
					"meta": { "line": 373, "file": "index.d.ts", "path": "node_modules/@sapphire/pieces/dist" }
				},
				{
					"name": "container",
					"description": "A reference to the {@link Container} object for ease of use.",
					"see": ["container"],
					"readonly": true,
					"abstract": false,
					"deprecated": false,
					"type": [[["Container"]]],
					"meta": { "line": 294, "file": "index.d.ts", "path": "node_modules/@sapphire/pieces/dist" }
				}
			],
			"methods": [
				{
					"name": "[iterator]",
					"description": "Returns an iterable of entries in the map.",
					"returns": [
						[
							["IterableIterator", "<["],
							["string", ", "],
							["Listener", "<"],
							["''", ", "],
							["ListenerOptions", ">]>"]
						]
					]
				},
				{
					"name": "at",
					"description": "Identical to [Array.at()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/at).\nReturns the item at a given index, allowing for positive and negative integers.\nNegative integers count back from the last item in the collection.",
					"params": [
						{
							"name": "index",
							"description": "The index of the element to obtain",
							"optional": true,
							"type": [[["number"]]]
						}
					],
					"returns": [
						[
							["undefined", " | "],
							["Listener", "<"],
							["''", ", "],
							["ListenerOptions", ">"]
						]
					],
					"meta": { "line": 87, "file": "index.d.ts", "path": "node_modules/@discordjs/collection/dist" }
				},
				{ "name": "clear", "returns": [[["void"]]] },
				{
					"name": "clone",
					"description": "Creates an identical shallow copy of this collection.",
					"see": [],
					"examples": ["const newColl = someColl.clone();"],
					"abstract": false,
					"deprecated": false,
					"emits": [],
					"returns": [
						[
							["Collection", "<"],
							["string", ", "],
							["Listener", "<"],
							["''", ", "],
							["ListenerOptions", ">>"]
						]
					],
					"meta": { "line": 301, "file": "index.d.ts", "path": "node_modules/@discordjs/collection/dist" }
				},
				{
					"name": "concat",
					"description": "Combines this collection with others into a new collection. None of the source collections are modified.",
					"see": [],
					"examples": ["const newColl = someColl.concat(someOtherColl, anotherColl, ohBoyAColl);"],
					"abstract": false,
					"deprecated": false,
					"emits": [],
					"params": [
						{
							"name": "collections",
							"description": "Collections to merge",
							"optional": false,
							"type": [
								[
									["Array", "<"],
									["Collection", "<"],
									["string", ", "],
									["Listener", "<"],
									["''", ", "],
									["ListenerOptions", ">>>"]
								]
							]
						}
					],
					"returns": [
						[
							["Collection", "<"],
							["string", ", "],
							["Listener", "<"],
							["''", ", "],
							["ListenerOptions", ">>"]
						]
					],
					"meta": { "line": 310, "file": "index.d.ts", "path": "node_modules/@discordjs/collection/dist" }
				},
				{
					"name": "construct",
					"description": "Constructs a {@link Piece} instance.",
					"params": [
						{
							"name": "Ctor",
							"description": "The {@link Piece}'s constructor used to build the instance.",
							"optional": false,
							"type": [
								[
									["ILoaderResultEntry", "<"],
									["Listener", "<"],
									["''", ", "],
									["ListenerOptions", ">>"]
								]
							]
						},
						{
							"name": "data",
							"description": "The module's information",
							"optional": false,
							"type": [[["HydratedModuleData"]]]
						}
					],
					"returns": [
						[
							["Listener", "<"],
							["''", ", "],
							["ListenerOptions", ">"]
						]
					],
					"returnsDescription": "An instance of the constructed piece.",
					"meta": { "line": 345, "file": "index.d.ts", "path": "node_modules/@sapphire/pieces/dist" }
				},
				{
					"name": "delete",
					"params": [{ "name": "key", "optional": false, "type": [[["string"]]] }],
					"returns": [[["boolean"]]]
				},
				{
					"name": "difference",
					"description": "The difference method returns a new structure containing items where the key is present in one of the original structures but not the other.",
					"params": [
						{
							"name": "other",
							"description": "The other Collection to filter against",
							"optional": false,
							"type": [
								[
									["Collection", "<"],
									["string", ", "],
									["Listener", "<"],
									["''", ", "],
									["ListenerOptions", ">>"]
								]
							]
						}
					],
					"returns": [
						[
							["Collection", "<"],
							["string", ", "],
							["Listener", "<"],
							["''", ", "],
							["ListenerOptions", ">>"]
						]
					],
					"meta": { "line": 344, "file": "index.d.ts", "path": "node_modules/@discordjs/collection/dist" }
				},
				{
					"name": "each",
					"description": "Identical to\n[Map.forEach()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/forEach),\nbut returns the collection instead of undefined.",
					"see": [],
					"examples": [
						"collection\n .each(user => console.log(user.username))\n .filter(user => user.bot)\n .each(user => console.log(user.username));"
					],
					"abstract": false,
					"deprecated": false,
					"emits": [],
					"params": [
						{
							"name": "fn",
							"description": "Function to execute for each element",
							"optional": false,
							"type": [
								[
									["("],
									["value", ": "],
									["Listener", "<"],
									["''", ", "],
									["ListenerOptions", ">, "],
									["key", ": "],
									["string", ", "],
									["collection", ": "],
									["ListenerStore", ") => "],
									["void"]
								]
							]
						}
					],
					"returns": [[["ListenerStore"]]],
					"meta": { "line": 279, "file": "index.d.ts", "path": "node_modules/@discordjs/collection/dist" }
				},
				{
					"name": "entries",
					"description": "Returns an iterable of key, value pairs for every entry in the map.",
					"returns": [
						[
							["IterableIterator", "<["],
							["string", ", "],
							["Listener", "<"],
							["''", ", "],
							["ListenerOptions", ">]>"]
						]
					]
				},
				{
					"name": "equals",
					"description": "Checks if this collection shares identical items with another.\nThis is different to checking for equality using equal-signs, because\nthe collections may be different objects, but contain the same data.",
					"params": [
						{
							"name": "collection",
							"description": "Collection to compare with",
							"optional": false,
							"type": [
								[
									["Collection", "<"],
									["string", ", "],
									["Listener", "<"],
									["''", ", "],
									["ListenerOptions", ">>"]
								]
							]
						}
					],
					"returns": [[["boolean"]]],
					"returnsDescription": "Whether the collections have identical contents",
					"meta": { "line": 320, "file": "index.d.ts", "path": "node_modules/@discordjs/collection/dist" }
				},
				{
					"name": "every",
					"description": "Checks if all items passes a test. Identical in behavior to\n[Array.every()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every).",
					"see": [],
					"examples": ["collection.every(user => !user.bot);"],
					"abstract": false,
					"deprecated": false,
					"emits": [],
					"params": [
						{
							"name": "fn",
							"description": "Function used to test (should return a boolean)",
							"optional": false,
							"type": [
								[
									["("],
									["value", ": "],
									["Listener", "<"],
									["''", ", "],
									["ListenerOptions", ">, "],
									["key", ": "],
									["string", ", "],
									["collection", ": "],
									["ListenerStore", ") => "],
									["key", " "],
									["is", " "],
									["K2"]
								]
							]
						}
					],
					"returns": [
						[
							["this", " "],
							["is", " "],
							["Collection", "<"],
							["K2", ", "],
							["Listener", "<"],
							["''", ", "],
							["ListenerOptions", ">>"]
						]
					],
					"meta": { "line": 247, "file": "index.d.ts", "path": "node_modules/@discordjs/collection/dist" }
				},
				{
					"name": "filter",
					"description": "Identical to\n[Array.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter),\nbut returns a Collection instead of an Array.",
					"see": [],
					"examples": ["collection.filter(user => user.username === 'Bob');"],
					"abstract": false,
					"deprecated": false,
					"emits": [],
					"params": [
						{
							"name": "fn",
							"description": "The function to test with (should return boolean)",
							"optional": false,
							"type": [
								[
									["("],
									["value", ": "],
									["Listener", "<"],
									["''", ", "],
									["ListenerOptions", ">, "],
									["key", ": "],
									["string", ", "],
									["collection", ": "],
									["ListenerStore", ") => "],
									["key", " "],
									["is", " "],
									["K2"]
								]
							]
						}
					],
					"returns": [
						[
							["Collection", "<"],
							["K2", ", "],
							["Listener", "<"],
							["''", ", "],
							["ListenerOptions", ">>"]
						]
					],
					"meta": { "line": 167, "file": "index.d.ts", "path": "node_modules/@discordjs/collection/dist" }
				},
				{
					"name": "find",
					"description": "Searches for a single item where the given function returns a truthy value. This behaves like\n[Array.find()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find).\n<warn>All collections used in Discord.js are mapped using their `id` property, and if you want to find by id you\nshould use the `get` method. See\n[MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/get) for details.</warn>",
					"see": [],
					"examples": ["collection.find(user => user.username === 'Bob');"],
					"abstract": false,
					"deprecated": false,
					"emits": [],
					"params": [
						{
							"name": "fn",
							"description": "The function to test with (should return boolean)",
							"optional": false,
							"type": [
								[
									["("],
									["value", ": "],
									["Listener", "<"],
									["''", ", "],
									["ListenerOptions", ">, "],
									["key", ": "],
									["string", ", "],
									["collection", ": "],
									["ListenerStore", ") => "],
									["value", " "],
									["is", " "],
									["V2"]
								]
							]
						}
					],
					"returns": [[["undefined", " | "], ["V2"]]],
					"meta": { "line": 127, "file": "index.d.ts", "path": "node_modules/@discordjs/collection/dist" }
				},
				{
					"name": "findKey",
					"description": "Searches for the key of a single item where the given function returns a truthy value. This behaves like\n[Array.findIndex()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex),\nbut returns the key rather than the positional index.",
					"see": [],
					"examples": ["collection.findKey(user => user.username === 'Bob');"],
					"abstract": false,
					"deprecated": false,
					"emits": [],
					"params": [
						{
							"name": "fn",
							"description": "The function to test with (should return boolean)",
							"optional": false,
							"type": [
								[
									["("],
									["value", ": "],
									["Listener", "<"],
									["''", ", "],
									["ListenerOptions", ">, "],
									["key", ": "],
									["string", ", "],
									["collection", ": "],
									["ListenerStore", ") => "],
									["key", " "],
									["is", " "],
									["K2"]
								]
							]
						}
					],
					"returns": [[["undefined", " | "], ["K2"]]],
					"meta": { "line": 142, "file": "index.d.ts", "path": "node_modules/@discordjs/collection/dist" }
				},
				{
					"name": "first",
					"description": "Obtains the first value(s) in this collection.",
					"returns": [
						[
							["undefined", " | "],
							["Listener", "<"],
							["''", ", "],
							["ListenerOptions", ">"]
						]
					],
					"returnsDescription": "A single value if no amount is provided or an array of values, starting from the end if amount is negative",
					"meta": { "line": 48, "file": "index.d.ts", "path": "node_modules/@discordjs/collection/dist" }
				},
				{
					"name": "firstKey",
					"description": "Obtains the first key(s) in this collection.",
					"returns": [[["undefined", " | "], ["string"]]],
					"returnsDescription": "A single key if no amount is provided or an array of keys, starting from the end if\namount is negative",
					"meta": { "line": 58, "file": "index.d.ts", "path": "node_modules/@discordjs/collection/dist" }
				},
				{
					"name": "flatMap",
					"description": "Maps each item into a Collection, then joins the results into a single Collection. Identical in behavior to\n[Array.flatMap()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/flatMap).",
					"see": [],
					"examples": ["collection.flatMap(guild => guild.members.cache);"],
					"abstract": false,
					"deprecated": false,
					"emits": [],
					"params": [
						{
							"name": "fn",
							"description": "Function that produces a new Collection",
							"optional": false,
							"type": [
								[
									["("],
									["value", ": "],
									["Listener", "<"],
									["''", ", "],
									["ListenerOptions", ">, "],
									["key", ": "],
									["string", ", "],
									["collection", ": "],
									["ListenerStore", ") => "],
									["Collection", "<"],
									["string", ", "],
									["T", ">"]
								]
							]
						}
					],
					"returns": [
						[
							["Collection", "<"],
							["string", ", "],
							["T", ">"]
						]
					],
					"meta": { "line": 199, "file": "index.d.ts", "path": "node_modules/@discordjs/collection/dist" }
				},
				{
					"name": "forEach",
					"params": [
						{
							"name": "callbackfn",
							"optional": false,
							"type": [
								[
									["("],
									["value", ": "],
									["Listener", "<"],
									["''", ", "],
									["ListenerOptions", ">, "],
									["key", ": "],
									["string", ", "],
									["map", ": "],
									["Map", "<"],
									["string", ", "],
									["Listener", "<"],
									["''", ", "],
									["ListenerOptions", ">>) => "],
									["void"]
								]
							]
						},
						{ "name": "thisArg", "optional": true, "type": [[["any"]]] }
					],
					"returns": [[["void"]]]
				},
				{
					"name": "get",
					"params": [{ "name": "key", "optional": false, "type": [[["string"]]] }],
					"returns": [
						[
							["undefined", " | "],
							["Listener", "<"],
							["''", ", "],
							["ListenerOptions", ">"]
						]
					]
				},
				{
					"name": "has",
					"params": [{ "name": "key", "optional": false, "type": [[["string"]]] }],
					"returns": [[["boolean"]]]
				},
				{
					"name": "hasAll",
					"description": "Checks if all of the elements exist in the collection.",
					"params": [
						{
							"name": "keys",
							"description": "The keys of the elements to check for",
							"optional": false,
							"type": [
								[
									["Array", "<"],
									["string", ">"]
								]
							]
						}
					],
					"returns": [[["boolean"]]],
					"returnsDescription": "`true` if all of the elements exist, `false` if at least one does not exist.",
					"meta": { "line": 32, "file": "index.d.ts", "path": "node_modules/@discordjs/collection/dist" }
				},
				{
					"name": "hasAny",
					"description": "Checks if any of the elements exist in the collection.",
					"params": [
						{
							"name": "keys",
							"description": "The keys of the elements to check for",
							"optional": false,
							"type": [
								[
									["Array", "<"],
									["string", ">"]
								]
							]
						}
					],
					"returns": [[["boolean"]]],
					"returnsDescription": "`true` if any of the elements exist, `false` if none exist.",
					"meta": { "line": 40, "file": "index.d.ts", "path": "node_modules/@discordjs/collection/dist" }
				},
				{
					"name": "insert",
					"description": "Inserts a piece into the store.",
					"params": [
						{
							"name": "piece",
							"description": "The piece to be inserted into the store.",
							"optional": false,
							"type": [
								[
									["Listener", "<"],
									["''", ", "],
									["ListenerOptions", ">"]
								]
							]
						}
					],
					"returns": [
						[
							["Promise", "<"],
							["Listener", "<"],
							["''", ", "],
							["ListenerOptions", ">>"]
						]
					],
					"returnsDescription": "The inserted piece.",
					"meta": { "line": 338, "file": "index.d.ts", "path": "node_modules/@sapphire/pieces/dist" }
				},
				{
					"name": "intersect",
					"description": "The intersect method returns a new structure containing items where the keys are present in both original structures.",
					"params": [
						{
							"name": "other",
							"description": "The other Collection to filter against",
							"optional": false,
							"type": [
								[
									["Collection", "<"],
									["string", ", "],
									["Listener", "<"],
									["''", ", "],
									["ListenerOptions", ">>"]
								]
							]
						}
					],
					"returns": [
						[
							["Collection", "<"],
							["string", ", "],
							["Listener", "<"],
							["''", ", "],
							["ListenerOptions", ">>"]
						]
					],
					"meta": { "line": 338, "file": "index.d.ts", "path": "node_modules/@discordjs/collection/dist" }
				},
				{
					"name": "keyAt",
					"description": "Identical to [Array.at()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/at).\nReturns the key at a given index, allowing for positive and negative integers.\nNegative integers count back from the last item in the collection.",
					"params": [
						{
							"name": "index",
							"description": "The index of the key to obtain",
							"optional": true,
							"type": [[["number"]]]
						}
					],
					"returns": [[["undefined", " | "], ["string"]]],
					"meta": { "line": 95, "file": "index.d.ts", "path": "node_modules/@discordjs/collection/dist" }
				},
				{
					"name": "keys",
					"description": "Returns an iterable of keys in the map",
					"returns": [
						[
							["IterableIterator", "<"],
							["string", ">"]
						]
					]
				},
				{
					"name": "last",
					"description": "Obtains the last value(s) in this collection.",
					"returns": [
						[
							["undefined", " | "],
							["Listener", "<"],
							["''", ", "],
							["ListenerOptions", ">"]
						]
					],
					"returnsDescription": "A single value if no amount is provided or an array of values, starting from the start if\namount is negative",
					"meta": { "line": 68, "file": "index.d.ts", "path": "node_modules/@discordjs/collection/dist" }
				},
				{
					"name": "lastKey",
					"description": "Obtains the last key(s) in this collection.",
					"returns": [[["undefined", " | "], ["string"]]],
					"returnsDescription": "A single key if no amount is provided or an array of keys, starting from the start if\namount is negative",
					"meta": { "line": 78, "file": "index.d.ts", "path": "node_modules/@discordjs/collection/dist" }
				},
				{
					"name": "load",
					"description": "Loads one or more pieces from a path.",
					"params": [
						{
							"name": "root",
							"description": "The root directory the file is from.",
							"optional": false,
							"type": [[["string"]]]
						},
						{
							"name": "path",
							"description": "The path of the file to load, relative to the `root`.",
							"optional": false,
							"type": [[["string"]]]
						}
					],
					"returns": [
						[
							["Promise", "<"],
							["Array", "<"],
							["Listener", "<"],
							["''", ", "],
							["ListenerOptions", ">>>"]
						]
					],
					"returnsDescription": "All the loaded pieces.",
					"meta": { "line": 312, "file": "index.d.ts", "path": "node_modules/@sapphire/pieces/dist" }
				},
				{
					"name": "loadAll",
					"description": "Loads all pieces from all directories specified by {@link paths}.",
					"returns": [
						[
							["Promise", "<"],
							["void", ">"]
						]
					],
					"meta": { "line": 326, "file": "index.d.ts", "path": "node_modules/@sapphire/pieces/dist" }
				},
				{
					"name": "map",
					"description": "Maps each item to another value into an array. Identical in behavior to\n[Array.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map).",
					"see": [],
					"examples": ["collection.map(user => user.tag);"],
					"abstract": false,
					"deprecated": false,
					"emits": [],
					"params": [
						{
							"name": "fn",
							"description": "Function that produces an element of the new array, taking three arguments",
							"optional": false,
							"type": [
								[
									["("],
									["value", ": "],
									["Listener", "<"],
									["''", ", "],
									["ListenerOptions", ">, "],
									["key", ": "],
									["string", ", "],
									["collection", ": "],
									["ListenerStore", ") => "],
									["T"]
								]
							]
						}
					],
					"returns": [
						[
							["Array", "<"],
							["T", ">"]
						]
					],
					"meta": { "line": 211, "file": "index.d.ts", "path": "node_modules/@discordjs/collection/dist" }
				},
				{
					"name": "mapValues",
					"description": "Maps each item to another value into a collection. Identical in behavior to\n[Array.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map).",
					"see": [],
					"examples": ["collection.mapValues(user => user.tag);"],
					"abstract": false,
					"deprecated": false,
					"emits": [],
					"params": [
						{
							"name": "fn",
							"description": "Function that produces an element of the new collection, taking three arguments",
							"optional": false,
							"type": [
								[
									["("],
									["value", ": "],
									["Listener", "<"],
									["''", ", "],
									["ListenerOptions", ">, "],
									["key", ": "],
									["string", ", "],
									["collection", ": "],
									["ListenerStore", ") => "],
									["T"]
								]
							]
						}
					],
					"returns": [
						[
							["Collection", "<"],
							["string", ", "],
							["T", ">"]
						]
					],
					"meta": { "line": 223, "file": "index.d.ts", "path": "node_modules/@discordjs/collection/dist" }
				},
				{
					"name": "partition",
					"description": "Partitions the collection into two collections where the first collection\ncontains the items that passed and the second contains the items that failed.",
					"see": [],
					"examples": ["const [big, small] = collection.partition(guild => guild.memberCount > 250);"],
					"abstract": false,
					"deprecated": false,
					"emits": [],
					"params": [
						{
							"name": "fn",
							"description": "Function used to test (should return a boolean)",
							"optional": false,
							"type": [
								[
									["("],
									["value", ": "],
									["Listener", "<"],
									["''", ", "],
									["ListenerOptions", ">, "],
									["key", ": "],
									["string", ", "],
									["collection", ": "],
									["ListenerStore", ") => "],
									["key", " "],
									["is", " "],
									["K2"]
								]
							]
						}
					],
					"returns": [
						[
							["["],
							["Collection", "<"],
							["K2", ", "],
							["Listener", "<"],
							["''", ", "],
							["ListenerOptions", ">>, "],
							["Collection", "<"],
							["Exclude", "<"],
							["string", ", "],
							["K2", ">, "],
							["Listener", "<"],
							["''", ", "],
							["ListenerOptions", ">>]"]
						]
					],
					"meta": { "line": 183, "file": "index.d.ts", "path": "node_modules/@discordjs/collection/dist" }
				},
				{
					"name": "random",
					"description": "Obtains unique random value(s) from this collection.",
					"returns": [
						[
							["undefined", " | "],
							["Listener", "<"],
							["''", ", "],
							["ListenerOptions", ">"]
						]
					],
					"returnsDescription": "A single value if no amount is provided or an array of values",
					"meta": { "line": 103, "file": "index.d.ts", "path": "node_modules/@discordjs/collection/dist" }
				},
				{
					"name": "randomKey",
					"description": "Obtains unique random key(s) from this collection.",
					"returns": [[["undefined", " | "], ["string"]]],
					"returnsDescription": "A single key if no amount is provided or an array",
					"meta": { "line": 112, "file": "index.d.ts", "path": "node_modules/@discordjs/collection/dist" }
				},
				{
					"name": "reduce",
					"description": "Applies a function to produce a single value. Identical in behavior to\n[Array.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).",
					"see": [],
					"examples": ["collection.reduce((acc, guild) => acc + guild.memberCount, 0);"],
					"abstract": false,
					"deprecated": false,
					"emits": [],
					"params": [
						{
							"name": "fn",
							"description": "Function used to reduce, taking four arguments; `accumulator`, `currentValue`, `currentKey`,\nand `collection`",
							"optional": false,
							"type": [
								[
									["("],
									["accumulator", ": "],
									["T", ", "],
									["value", ": "],
									["Listener", "<"],
									["''", ", "],
									["ListenerOptions", ">, "],
									["key", ": "],
									["string", ", "],
									["collection", ": "],
									["ListenerStore", ") => "],
									["T"]
								]
							]
						},
						{
							"name": "initialValue",
							"description": "Starting value for the accumulator",
							"optional": true,
							"type": [[["T"]]]
						}
					],
					"returns": [[["T"]]],
					"meta": { "line": 264, "file": "index.d.ts", "path": "node_modules/@discordjs/collection/dist" }
				},
				{
					"name": "registerPath",
					"description": "Registers a directory into the store.",
					"see": [],
					"examples": [
						"```typescript\nstore\n  .registerPath(resolve('commands'))\n  .registerPath(resolve('third-party', 'commands'));\n```"
					],
					"abstract": false,
					"deprecated": false,
					"emits": [],
					"params": [{ "name": "path", "description": "The path to be added.", "optional": false, "type": [[["string"]]] }],
					"returns": [[["ListenerStore"]]],
					"meta": { "line": 305, "file": "index.d.ts", "path": "node_modules/@sapphire/pieces/dist" }
				},
				{
					"name": "resolve",
					"description": "Resolves a piece by its name or its instance.",
					"params": [
						{
							"name": "name",
							"description": "The name of the piece or the instance itself.",
							"optional": false,
							"type": [
								[
									["string", " | "],
									["Listener", "<"],
									["''", ", "],
									["ListenerOptions", ">"]
								]
							]
						}
					],
					"returns": [
						[
							["Listener", "<"],
							["''", ", "],
							["ListenerOptions", ">"]
						]
					],
					"returnsDescription": "The resolved piece.",
					"meta": { "line": 332, "file": "index.d.ts", "path": "node_modules/@sapphire/pieces/dist" }
				},
				{
					"name": "set",
					"params": [
						{ "name": "key", "optional": false, "type": [[["string"]]] },
						{
							"name": "value",
							"optional": false,
							"type": [
								[
									["Listener", "<"],
									["''", ", "],
									["ListenerOptions", ">"]
								]
							]
						}
					],
					"returns": [[["ListenerStore"]]]
				},
				{
					"name": "some",
					"description": "Checks if there exists an item that passes a test. Identical in behavior to\n[Array.some()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some).",
					"see": [],
					"examples": ["collection.some(user => user.discriminator === '0000');"],
					"abstract": false,
					"deprecated": false,
					"emits": [],
					"params": [
						{
							"name": "fn",
							"description": "Function used to test (should return a boolean)",
							"optional": false,
							"type": [
								[
									["("],
									["value", ": "],
									["Listener", "<"],
									["''", ", "],
									["ListenerOptions", ">, "],
									["key", ": "],
									["string", ", "],
									["collection", ": "],
									["ListenerStore", ") => "],
									["boolean"]
								]
							]
						}
					],
					"returns": [[["boolean"]]],
					"meta": { "line": 235, "file": "index.d.ts", "path": "node_modules/@discordjs/collection/dist" }
				},
				{
					"name": "sort",
					"description": "The sort method sorts the items of a collection in place and returns it.\nThe sort is not necessarily stable in Node 10 or older.\nThe default sort order is according to string Unicode code points.",
					"see": [],
					"examples": ["collection.sort((userA, userB) => userA.createdTimestamp - userB.createdTimestamp);"],
					"abstract": false,
					"deprecated": false,
					"emits": [],
					"params": [
						{
							"name": "compareFunction",
							"description": "Specifies a function that defines the sort order.\nIf omitted, the collection is sorted according to each character's Unicode code point value, according to the string conversion of each element.",
							"optional": true,
							"type": [
								[
									["Comparator", "<"],
									["string", ", "],
									["Listener", "<"],
									["''", ", "],
									["ListenerOptions", ">>"]
								]
							]
						}
					],
					"returns": [[["ListenerStore"]]],
					"meta": { "line": 332, "file": "index.d.ts", "path": "node_modules/@discordjs/collection/dist" }
				},
				{
					"name": "sorted",
					"description": "The sorted method sorts the items of a collection and returns it.\nThe sort is not necessarily stable in Node 10 or older.\nThe default sort order is according to string Unicode code points.",
					"see": [],
					"examples": ["collection.sorted((userA, userB) => userA.createdTimestamp - userB.createdTimestamp);"],
					"abstract": false,
					"deprecated": false,
					"emits": [],
					"params": [
						{
							"name": "compareFunction",
							"description": "Specifies a function that defines the sort order.\nIf omitted, the collection is sorted according to each character's Unicode code point value,\naccording to the string conversion of each element.",
							"optional": true,
							"type": [
								[
									["Comparator", "<"],
									["string", ", "],
									["Listener", "<"],
									["''", ", "],
									["ListenerOptions", ">>"]
								]
							]
						}
					],
					"returns": [
						[
							["Collection", "<"],
							["string", ", "],
							["Listener", "<"],
							["''", ", "],
							["ListenerOptions", ">>"]
						]
					],
					"meta": { "line": 357, "file": "index.d.ts", "path": "node_modules/@discordjs/collection/dist" }
				},
				{
					"name": "sweep",
					"description": "Removes items that satisfy the provided filter function.",
					"params": [
						{
							"name": "fn",
							"description": "Function used to test (should return a boolean)",
							"optional": false,
							"type": [
								[
									["("],
									["value", ": "],
									["Listener", "<"],
									["''", ", "],
									["ListenerOptions", ">, "],
									["key", ": "],
									["string", ", "],
									["collection", ": "],
									["ListenerStore", ") => "],
									["boolean"]
								]
							]
						}
					],
					"returns": [[["number"]]],
					"returnsDescription": "The number of removed entries",
					"meta": { "line": 154, "file": "index.d.ts", "path": "node_modules/@discordjs/collection/dist" }
				},
				{
					"name": "tap",
					"description": "Runs a function on the collection and returns the collection.",
					"see": [],
					"examples": [
						"collection\n .tap(coll => console.log(coll.size))\n .filter(user => user.bot)\n .tap(coll => console.log(coll.size))"
					],
					"abstract": false,
					"deprecated": false,
					"emits": [],
					"params": [
						{
							"name": "fn",
							"description": "Function to execute",
							"optional": false,
							"type": [[["("], ["collection", ": "], ["ListenerStore", ") => "], ["void"]]]
						}
					],
					"returns": [[["ListenerStore"]]],
					"meta": { "line": 293, "file": "index.d.ts", "path": "node_modules/@discordjs/collection/dist" }
				},
				{
					"name": "toJSON",
					"returns": [
						[
							["Array", "<"],
							["Listener", "<"],
							["''", ", "],
							["ListenerOptions", ">>"]
						]
					],
					"meta": { "line": 358, "file": "index.d.ts", "path": "node_modules/@discordjs/collection/dist" }
				},
				{
					"name": "unload",
					"description": "Unloads a piece given its instance or its name.",
					"params": [
						{
							"name": "name",
							"description": "The name of the file to load.",
							"optional": false,
							"type": [
								[
									["string", " | "],
									["Listener", "<"],
									["''", ", "],
									["ListenerOptions", ">"]
								]
							]
						}
					],
					"returns": [
						[
							["Promise", "<"],
							["Listener", "<"],
							["''", ", "],
							["ListenerOptions", ">>"]
						]
					],
					"returnsDescription": "Returns the piece that was unloaded.",
					"meta": { "line": 318, "file": "index.d.ts", "path": "node_modules/@sapphire/pieces/dist" }
				},
				{
					"name": "unloadAll",
					"description": "Unloads all pieces from the store.",
					"returns": [
						[
							["Promise", "<"],
							["Array", "<"],
							["Listener", "<"],
							["''", ", "],
							["ListenerOptions", ">>>"]
						]
					],
					"meta": { "line": 322, "file": "index.d.ts", "path": "node_modules/@sapphire/pieces/dist" }
				},
				{
					"name": "values",
					"description": "Returns an iterable of values in the map",
					"returns": [
						[
							["IterableIterator", "<"],
							["Listener", "<"],
							["''", ", "],
							["ListenerOptions", ">>"]
						]
					]
				}
			],
			"meta": { "line": 4, "file": "ListenerStore.ts", "path": "src/lib/structures" }
		},
		{
			"name": "LoaderError",
			"description": "Describes a loader error with a type for easy indentification.",
			"extends": ["Error"],
			"construct": {
				"name": "constructor",
				"params": [
					{ "name": "type", "optional": false, "type": [[["LoaderErrorType"]]] },
					{ "name": "message", "optional": false, "type": [[["string"]]] }
				],
				"returns": [[["LoaderError"]]],
				"meta": { "line": 17, "file": "index.d.ts", "path": "node_modules/@sapphire/pieces/dist" }
			},
			"props": [
				{
					"name": "message",
					"type": [[["string"]]],
					"meta": { "line": 1023, "file": "lib.es5.d.ts", "path": "node_modules/typescript/lib" }
				},
				{
					"name": "stack",
					"type": [[["string"]]],
					"meta": { "line": 1024, "file": "lib.es5.d.ts", "path": "node_modules/typescript/lib" }
				},
				{
					"name": "type",
					"description": "The type of the error that was thrown.",
					"readonly": true,
					"type": [[["LoaderErrorType"]]],
					"meta": { "line": 16, "file": "index.d.ts", "path": "node_modules/@sapphire/pieces/dist" }
				},
				{
					"name": "prepareStackTrace",
					"scope": "static",
					"type": [[["("], ["err", ": "], ["Error", ", "], ["stackTraces", ": "], ["Array", "<"], ["CallSite", ">) => "], ["any"]]],
					"meta": { "line": 11, "file": "globals.d.ts", "path": "node_modules/@types/node" }
				},
				{
					"name": "stackTraceLimit",
					"scope": "static",
					"type": [[["number"]]],
					"meta": { "line": 13, "file": "globals.d.ts", "path": "node_modules/@types/node" }
				},
				{
					"name": "name",
					"readonly": true,
					"type": [[["string"]]],
					"meta": { "line": 18, "file": "index.d.ts", "path": "node_modules/@sapphire/pieces/dist" }
				}
			],
			"methods": [
				{
					"name": "captureStackTrace",
					"description": "Create .stack property on a target object",
					"scope": "static",
					"params": [
						{ "name": "targetObject", "optional": false, "type": [[["object"]]] },
						{ "name": "constructorOpt", "optional": true, "type": [[["Function"]]] }
					],
					"returns": [[["void"]]]
				}
			],
			"meta": { "line": 12, "file": "index.d.ts", "path": "node_modules/@sapphire/pieces/dist" }
		},
		{
			"name": "Logger",
			"implements": ["ILogger"],
			"construct": {
				"name": "constructor",
				"params": [{ "name": "level", "optional": false, "type": [[["LogLevel"]]] }],
				"returns": [[["Logger"]]],
				"meta": { "line": 6, "file": "Logger.ts", "path": "src/lib/utils/logger" }
			},
			"props": [
				{
					"name": "level",
					"type": [[["LogLevel"]]],
					"meta": { "line": 4, "file": "Logger.ts", "path": "src/lib/utils/logger" }
				},
				{
					"name": "levels",
					"scope": "static",
					"readonly": true,
					"type": [
						[
							["Map", "<"],
							["LogLevel", ", "],
							["LogMethods", ">"]
						]
					],
					"meta": { "line": 44, "file": "Logger.ts", "path": "src/lib/utils/logger" }
				}
			],
			"methods": [
				{
					"name": "debug",
					"description": "Alias of {@link ILogger.write} with {@link LogLevel.Debug} as level.",
					"params": [
						{
							"name": "values",
							"optional": false,
							"type": [
								[
									["readonly", " "],
									["Array", "<"],
									["unknown", ">"]
								]
							]
						}
					],
					"returns": [[["void"]]],
					"meta": { "line": 18, "file": "Logger.ts", "path": "src/lib/utils/logger" }
				},
				{
					"name": "error",
					"description": "Alias of {@link ILogger.write} with {@link LogLevel.Error} as level.",
					"params": [
						{
							"name": "values",
							"optional": false,
							"type": [
								[
									["readonly", " "],
									["Array", "<"],
									["unknown", ">"]
								]
							]
						}
					],
					"returns": [[["void"]]],
					"meta": { "line": 30, "file": "Logger.ts", "path": "src/lib/utils/logger" }
				},
				{
					"name": "fatal",
					"description": "Alias of {@link ILogger.write} with {@link LogLevel.Fatal} as level.",
					"params": [
						{
							"name": "values",
							"optional": false,
							"type": [
								[
									["readonly", " "],
									["Array", "<"],
									["unknown", ">"]
								]
							]
						}
					],
					"returns": [[["void"]]],
					"meta": { "line": 34, "file": "Logger.ts", "path": "src/lib/utils/logger" }
				},
				{
					"name": "has",
					"description": "Checks whether a level is supported.",
					"params": [{ "name": "level", "optional": false, "type": [[["LogLevel"]]] }],
					"returns": [[["boolean"]]],
					"meta": { "line": 10, "file": "Logger.ts", "path": "src/lib/utils/logger" }
				},
				{
					"name": "info",
					"description": "Alias of {@link ILogger.write} with {@link LogLevel.Info} as level.",
					"params": [
						{
							"name": "values",
							"optional": false,
							"type": [
								[
									["readonly", " "],
									["Array", "<"],
									["unknown", ">"]
								]
							]
						}
					],
					"returns": [[["void"]]],
					"meta": { "line": 22, "file": "Logger.ts", "path": "src/lib/utils/logger" }
				},
				{
					"name": "trace",
					"description": "Alias of {@link ILogger.write} with {@link LogLevel.Trace} as level.",
					"params": [
						{
							"name": "values",
							"optional": false,
							"type": [
								[
									["readonly", " "],
									["Array", "<"],
									["unknown", ">"]
								]
							]
						}
					],
					"returns": [[["void"]]],
					"meta": { "line": 14, "file": "Logger.ts", "path": "src/lib/utils/logger" }
				},
				{
					"name": "warn",
					"description": "Alias of {@link ILogger.write} with {@link LogLevel.Warn} as level.",
					"params": [
						{
							"name": "values",
							"optional": false,
							"type": [
								[
									["readonly", " "],
									["Array", "<"],
									["unknown", ">"]
								]
							]
						}
					],
					"returns": [[["void"]]],
					"meta": { "line": 26, "file": "Logger.ts", "path": "src/lib/utils/logger" }
				},
				{
					"name": "write",
					"description": "Writes the log message given a level and the value(s).",
					"params": [
						{ "name": "level", "optional": false, "type": [[["LogLevel"]]] },
						{
							"name": "values",
							"optional": false,
							"type": [
								[
									["readonly", " "],
									["Array", "<"],
									["unknown", ">"]
								]
							]
						}
					],
					"returns": [[["void"]]],
					"meta": { "line": 38, "file": "Logger.ts", "path": "src/lib/utils/logger" }
				}
			],
			"meta": { "line": 3, "file": "Logger.ts", "path": "src/lib/utils/logger" }
		},
		{
			"name": "MissingExportsError",
			"description": "Describes a {@link LoaderErrorType.EmptyModule} loader error and adds a path for easy identification.",
			"extends": ["LoaderError"],
			"construct": {
				"name": "constructor",
				"params": [{ "name": "path", "optional": false, "type": [[["string"]]] }],
				"returns": [[["MissingExportsError"]]],
				"meta": { "line": 29, "file": "index.d.ts", "path": "node_modules/@sapphire/pieces/dist" }
			},
			"props": [
				{
					"name": "message",
					"type": [[["string"]]],
					"meta": { "line": 1023, "file": "lib.es5.d.ts", "path": "node_modules/typescript/lib" }
				},
				{
					"name": "path",
					"description": "The path of the module that did not have exports.",
					"readonly": true,
					"type": [[["string"]]],
					"meta": { "line": 28, "file": "index.d.ts", "path": "node_modules/@sapphire/pieces/dist" }
				},
				{
					"name": "stack",
					"type": [[["string"]]],
					"meta": { "line": 1024, "file": "lib.es5.d.ts", "path": "node_modules/typescript/lib" }
				},
				{
					"name": "type",
					"description": "The type of the error that was thrown.",
					"readonly": true,
					"type": [[["LoaderErrorType"]]],
					"meta": { "line": 16, "file": "index.d.ts", "path": "node_modules/@sapphire/pieces/dist" }
				},
				{
					"name": "prepareStackTrace",
					"scope": "static",
					"type": [[["("], ["err", ": "], ["Error", ", "], ["stackTraces", ": "], ["Array", "<"], ["CallSite", ">) => "], ["any"]]],
					"meta": { "line": 11, "file": "globals.d.ts", "path": "node_modules/@types/node" }
				},
				{
					"name": "stackTraceLimit",
					"scope": "static",
					"type": [[["number"]]],
					"meta": { "line": 13, "file": "globals.d.ts", "path": "node_modules/@types/node" }
				},
				{
					"name": "name",
					"readonly": true,
					"type": [[["string"]]],
					"meta": { "line": 18, "file": "index.d.ts", "path": "node_modules/@sapphire/pieces/dist" }
				}
			],
			"methods": [
				{
					"name": "captureStackTrace",
					"description": "Create .stack property on a target object",
					"scope": "static",
					"params": [
						{ "name": "targetObject", "optional": false, "type": [[["object"]]] },
						{ "name": "constructorOpt", "optional": true, "type": [[["Function"]]] }
					],
					"returns": [[["void"]]]
				}
			],
			"meta": { "line": 24, "file": "index.d.ts", "path": "node_modules/@sapphire/pieces/dist" }
		},
		{
			"name": "Piece",
			"description": "The piece to be stored in {@link Store} instances.",
			"construct": {
				"name": "constructor",
				"params": [
					{ "name": "context", "optional": false, "type": [[["PieceContext"]]] },
					{ "name": "options", "optional": true, "type": [[["PieceOptions"]]] }
				],
				"returns": [
					[
						["Piece", "<"],
						["O", ">"]
					]
				],
				"meta": { "line": 452, "file": "index.d.ts", "path": "node_modules/@sapphire/pieces/dist" }
			},
			"props": [
				{
					"name": "enabled",
					"description": "Whether or not the piece is enabled.",
					"type": [[["boolean"]]],
					"meta": { "line": 447, "file": "index.d.ts", "path": "node_modules/@sapphire/pieces/dist" }
				},
				{
					"name": "location",
					"description": "The location metadata for the piece's file.",
					"readonly": true,
					"type": [[["PieceLocation"]]],
					"meta": { "line": 439, "file": "index.d.ts", "path": "node_modules/@sapphire/pieces/dist" }
				},
				{
					"name": "name",
					"description": "The name of the piece.",
					"readonly": true,
					"type": [[["string"]]],
					"meta": { "line": 443, "file": "index.d.ts", "path": "node_modules/@sapphire/pieces/dist" }
				},
				{
					"name": "options",
					"description": "The raw options passed to this {@link Piece}",
					"readonly": true,
					"type": [[["O"]]],
					"meta": { "line": 451, "file": "index.d.ts", "path": "node_modules/@sapphire/pieces/dist" }
				},
				{
					"name": "store",
					"description": "The store that contains the piece.",
					"readonly": true,
					"type": [
						[
							["Store", "<"],
							["Piece", "<"],
							["PieceOptions", ">>"]
						]
					],
					"meta": { "line": 435, "file": "index.d.ts", "path": "node_modules/@sapphire/pieces/dist" }
				},
				{
					"name": "container",
					"description": "A reference to the {@link Container} object for ease of use.",
					"see": ["container"],
					"readonly": true,
					"abstract": false,
					"deprecated": false,
					"type": [[["Container"]]],
					"meta": { "line": 457, "file": "index.d.ts", "path": "node_modules/@sapphire/pieces/dist" }
				}
			],
			"methods": [
				{
					"name": "onLoad",
					"description": "Per-piece listener that is called when the piece is loaded into the store.\nUseful to set-up asynchronous initialization tasks.",
					"returns": [[["unknown"]]],
					"meta": { "line": 462, "file": "index.d.ts", "path": "node_modules/@sapphire/pieces/dist" }
				},
				{
					"name": "onUnload",
					"description": "Per-piece listener that is called when the piece is unloaded from the store.\nUseful to set-up clean-up tasks.",
					"returns": [[["unknown"]]],
					"meta": { "line": 467, "file": "index.d.ts", "path": "node_modules/@sapphire/pieces/dist" }
				},
				{
					"name": "reload",
					"description": "Reloads the piece by loading the same path in the store.",
					"returns": [
						[
							["Promise", "<"],
							["void", ">"]
						]
					],
					"meta": { "line": 475, "file": "index.d.ts", "path": "node_modules/@sapphire/pieces/dist" }
				},
				{
					"name": "toJSON",
					"description": "Defines the `JSON.stringify` behavior of this piece.",
					"returns": [[["PieceJSON"]]],
					"meta": { "line": 479, "file": "index.d.ts", "path": "node_modules/@sapphire/pieces/dist" }
				},
				{
					"name": "unload",
					"description": "Unloads and disables the piece.",
					"returns": [
						[
							["Promise", "<"],
							["void", ">"]
						]
					],
					"meta": { "line": 471, "file": "index.d.ts", "path": "node_modules/@sapphire/pieces/dist" }
				}
			],
			"meta": { "line": 431, "file": "index.d.ts", "path": "node_modules/@sapphire/pieces/dist" }
		},
		{
			"name": "Plugin",
			"construct": { "name": "constructor", "returns": [[["Plugin"]]] },
			"props": [
				{
					"name": "[postInitialization]",
					"scope": "static",
					"type": [[["("], ["options", ": "], ["ClientOptions", ") => "], ["void"]]],
					"meta": { "line": 10, "file": "Plugin.ts", "path": "src/lib/plugins" }
				},
				{
					"name": "[postLogin]",
					"scope": "static",
					"type": [[["("], ["options", ": "], ["ClientOptions", ") => "], ["Awaitable", "<"], ["void", ">"]]],
					"meta": { "line": 12, "file": "Plugin.ts", "path": "src/lib/plugins" }
				},
				{
					"name": "[preGenericsInitialization]",
					"scope": "static",
					"type": [[["("], ["options", ": "], ["ClientOptions", ") => "], ["void"]]],
					"meta": { "line": 8, "file": "Plugin.ts", "path": "src/lib/plugins" }
				},
				{
					"name": "[preInitialization]",
					"scope": "static",
					"type": [[["("], ["options", ": "], ["ClientOptions", ") => "], ["void"]]],
					"meta": { "line": 9, "file": "Plugin.ts", "path": "src/lib/plugins" }
				},
				{
					"name": "[preLogin]",
					"scope": "static",
					"type": [[["("], ["options", ": "], ["ClientOptions", ") => "], ["Awaitable", "<"], ["void", ">"]]],
					"meta": { "line": 11, "file": "Plugin.ts", "path": "src/lib/plugins" }
				}
			],
			"meta": { "line": 7, "file": "Plugin.ts", "path": "src/lib/plugins" }
		},
		{
			"name": "PluginManager",
			"construct": { "name": "constructor", "returns": [[["PluginManager"]]] },
			"props": [
				{
					"name": "registry",
					"readonly": true,
					"type": [
						[
							["Set", "<"],
							["SapphirePluginHookEntry", "<"],
							["SapphirePluginAsyncHook", " | "],
							["SapphirePluginHook", ">>"]
						]
					],
					"meta": { "line": 25, "file": "PluginManager.ts", "path": "src/lib/plugins" }
				}
			],
			"methods": [
				{
					"name": "registerHook",
					"params": [
						{ "name": "hook", "optional": false, "type": [[["SapphirePluginHook"]]] },
						{ "name": "type", "optional": false, "type": [[["SyncPluginHooks"]]] },
						{ "name": "name", "optional": true, "type": [[["string"]]] }
					],
					"returns": [[["PluginManager"]]],
					"meta": { "line": 27, "file": "PluginManager.ts", "path": "src/lib/plugins" }
				},
				{
					"name": "registerPostInitializationHook",
					"params": [
						{ "name": "hook", "optional": false, "type": [[["SapphirePluginHook"]]] },
						{ "name": "name", "optional": true, "type": [[["string"]]] }
					],
					"returns": [[["PluginManager"]]],
					"meta": { "line": 43, "file": "PluginManager.ts", "path": "src/lib/plugins" }
				},
				{
					"name": "registerPostLoginHook",
					"params": [
						{ "name": "hook", "optional": false, "type": [[["SapphirePluginAsyncHook"]]] },
						{ "name": "name", "optional": true, "type": [[["string"]]] }
					],
					"returns": [[["PluginManager"]]],
					"meta": { "line": 51, "file": "PluginManager.ts", "path": "src/lib/plugins" }
				},
				{
					"name": "registerPreGenericsInitializationHook",
					"params": [
						{ "name": "hook", "optional": false, "type": [[["SapphirePluginHook"]]] },
						{ "name": "name", "optional": true, "type": [[["string"]]] }
					],
					"returns": [[["PluginManager"]]],
					"meta": { "line": 35, "file": "PluginManager.ts", "path": "src/lib/plugins" }
				},
				{
					"name": "registerPreInitializationHook",
					"params": [
						{ "name": "hook", "optional": false, "type": [[["SapphirePluginHook"]]] },
						{ "name": "name", "optional": true, "type": [[["string"]]] }
					],
					"returns": [[["PluginManager"]]],
					"meta": { "line": 39, "file": "PluginManager.ts", "path": "src/lib/plugins" }
				},
				{
					"name": "registerPreLoginHook",
					"params": [
						{ "name": "hook", "optional": false, "type": [[["SapphirePluginAsyncHook"]]] },
						{ "name": "name", "optional": true, "type": [[["string"]]] }
					],
					"returns": [[["PluginManager"]]],
					"meta": { "line": 47, "file": "PluginManager.ts", "path": "src/lib/plugins" }
				},
				{
					"name": "use",
					"params": [{ "name": "plugin", "optional": false, "type": [[["("], ["typeof", " "], ["Plugin", ")"]]] }],
					"returns": [[["PluginManager"]]],
					"meta": { "line": 55, "file": "PluginManager.ts", "path": "src/lib/plugins" }
				},
				{
					"name": "values",
					"returns": [
						[
							["Generator", "<"],
							["SapphirePluginHookEntry", "<"],
							["SapphirePluginAsyncHook", " | "],
							["SapphirePluginHook", ">, "],
							["void", ", "],
							["unknown", ">"]
						]
					],
					"meta": { "line": 71, "file": "PluginManager.ts", "path": "src/lib/plugins" }
				}
			],
			"meta": { "line": 24, "file": "PluginManager.ts", "path": "src/lib/plugins" }
		},
		{
			"name": "Precondition",
			"extends": ["Piece<O>"],
			"construct": {
				"name": "constructor",
				"params": [
					{ "name": "context", "optional": false, "type": [[["PieceContext"]]] },
					{ "name": "options", "optional": true, "default": "{}", "type": [[["PreconditionOptions"]]] }
				],
				"returns": [
					[
						["Precondition", "<"],
						["O", ">"]
					]
				],
				"meta": { "line": 16, "file": "Precondition.ts", "path": "src/lib/structures" }
			},
			"props": [
				{
					"name": "enabled",
					"description": "Whether or not the piece is enabled.",
					"type": [[["boolean"]]],
					"meta": { "line": 447, "file": "index.d.ts", "path": "node_modules/@sapphire/pieces/dist" }
				},
				{
					"name": "location",
					"description": "The location metadata for the piece's file.",
					"readonly": true,
					"type": [[["PieceLocation"]]],
					"meta": { "line": 439, "file": "index.d.ts", "path": "node_modules/@sapphire/pieces/dist" }
				},
				{
					"name": "name",
					"description": "The name of the piece.",
					"readonly": true,
					"type": [[["string"]]],
					"meta": { "line": 443, "file": "index.d.ts", "path": "node_modules/@sapphire/pieces/dist" }
				},
				{
					"name": "options",
					"description": "The raw options passed to this {@link Piece}",
					"readonly": true,
					"type": [[["O"]]],
					"meta": { "line": 451, "file": "index.d.ts", "path": "node_modules/@sapphire/pieces/dist" }
				},
				{
					"name": "position",
					"readonly": true,
					"type": [[["null", " | "], ["number"]]],
					"meta": { "line": 14, "file": "Precondition.ts", "path": "src/lib/structures" }
				},
				{
					"name": "store",
					"description": "The store that contains the piece.",
					"readonly": true,
					"type": [
						[
							["Store", "<"],
							["Piece", "<"],
							["PieceOptions", ">>"]
						]
					],
					"meta": { "line": 435, "file": "index.d.ts", "path": "node_modules/@sapphire/pieces/dist" }
				},
				{
					"name": "container",
					"description": "A reference to the {@link Container} object for ease of use.",
					"see": ["container"],
					"readonly": true,
					"abstract": false,
					"deprecated": false,
					"type": [[["Container"]]],
					"meta": { "line": 457, "file": "index.d.ts", "path": "node_modules/@sapphire/pieces/dist" }
				}
			],
			"methods": [
				{
					"name": "error",
					"description": "Constructs a {@link PreconditionError} with the precondition parameter set to `this`.",
					"params": [
						{
							"name": "options",
							"description": "The information.",
							"optional": true,
							"default": "{}",
							"type": [
								[
									["Omit", "<"],
									["Options", ", "],
									["'precondition'", ">"]
								]
							]
						}
					],
					"returns": [[["PreconditionResult"]]],
					"meta": { "line": 31, "file": "Precondition.ts", "path": "src/lib/structures" }
				},
				{
					"name": "ok",
					"returns": [[["PreconditionResult"]]],
					"meta": { "line": 23, "file": "Precondition.ts", "path": "src/lib/structures" }
				},
				{
					"name": "onLoad",
					"description": "Per-piece listener that is called when the piece is loaded into the store.\nUseful to set-up asynchronous initialization tasks.",
					"returns": [[["unknown"]]],
					"meta": { "line": 462, "file": "index.d.ts", "path": "node_modules/@sapphire/pieces/dist" }
				},
				{
					"name": "onUnload",
					"description": "Per-piece listener that is called when the piece is unloaded from the store.\nUseful to set-up clean-up tasks.",
					"returns": [[["unknown"]]],
					"meta": { "line": 467, "file": "index.d.ts", "path": "node_modules/@sapphire/pieces/dist" }
				},
				{
					"name": "reload",
					"description": "Reloads the piece by loading the same path in the store.",
					"returns": [
						[
							["Promise", "<"],
							["void", ">"]
						]
					],
					"meta": { "line": 475, "file": "index.d.ts", "path": "node_modules/@sapphire/pieces/dist" }
				},
				{
					"name": "run",
					"params": [
						{
							"name": "message",
							"optional": false,
							"type": [
								[
									["Message", "<"],
									["boolean", ">"]
								]
							]
						},
						{
							"name": "command",
							"optional": false,
							"type": [
								[
									["Command", "<"],
									["Args", ", "],
									["CommandOptions", ">"]
								]
							]
						},
						{ "name": "context", "optional": false, "type": [[["PreconditionContext"]]] }
					],
					"returns": [[["PreconditionResult"]]],
					"meta": { "line": 21, "file": "Precondition.ts", "path": "src/lib/structures" }
				},
				{
					"name": "toJSON",
					"description": "Defines the `JSON.stringify` behavior of this piece.",
					"returns": [[["PieceJSON"]]],
					"meta": { "line": 479, "file": "index.d.ts", "path": "node_modules/@sapphire/pieces/dist" }
				},
				{
					"name": "unload",
					"description": "Unloads and disables the piece.",
					"returns": [
						[
							["Promise", "<"],
							["void", ">"]
						]
					],
					"meta": { "line": 471, "file": "index.d.ts", "path": "node_modules/@sapphire/pieces/dist" }
				}
			],
			"meta": { "line": 13, "file": "Precondition.ts", "path": "src/lib/structures" }
		},
		{
			"name": "PreconditionContainerArray",
			"description": "An {@link IPreconditionContainer} that defines an array of multiple {@link IPreconditionContainer}s.",
			"see": [],
			"implements": ["IPreconditionContainer"],
			"abstract": false,
			"deprecated": false,
			"construct": {
				"name": "constructor",
				"params": [
					{ "name": "data", "optional": true, "default": "[]", "type": [[["PreconditionArrayResolvable"]]] },
					{
						"name": "parent",
						"optional": true,
						"default": "null",
						"type": [[["null", " | "], ["PreconditionContainerArray"]]]
					}
				],
				"returns": [[["PreconditionContainerArray"]]],
				"meta": { "line": 127, "file": "PreconditionContainerArray.ts", "path": "src/lib/utils/preconditions" }
			},
			"props": [
				{
					"name": "entries",
					"description": "The {@link IPreconditionContainer}s the array holds.",
					"see": [],
					"readonly": true,
					"abstract": false,
					"deprecated": false,
					"type": [
						[
							["Array", "<"],
							["IPreconditionContainer", ">"]
						]
					],
					"meta": { "line": 119, "file": "PreconditionContainerArray.ts", "path": "src/lib/utils/preconditions" }
				},
				{
					"name": "mode",
					"description": "The mode at which this precondition will run.",
					"see": [],
					"readonly": true,
					"abstract": false,
					"deprecated": false,
					"type": [[["PreconditionRunMode"]]],
					"meta": { "line": 113, "file": "PreconditionContainerArray.ts", "path": "src/lib/utils/preconditions" }
				},
				{
					"name": "runCondition",
					"description": "The {@link PreconditionRunCondition} that defines how entries must be handled.",
					"see": [],
					"readonly": true,
					"abstract": false,
					"deprecated": false,
					"type": [[["PreconditionRunCondition"]]],
					"meta": { "line": 125, "file": "PreconditionContainerArray.ts", "path": "src/lib/utils/preconditions" }
				},
				{
					"name": "conditions",
					"description": "The preconditions to be run. Extra ones can be added by augmenting {@link PreconditionRunCondition} and then\ninserting {@link IPreconditionCondition}s.",
					"see": [],
					"scope": "static",
					"readonly": true,
					"abstract": false,
					"deprecated": false,
					"type": [
						[
							["Collection", "<"],
							["PreconditionRunCondition", ", "],
							["IPreconditionCondition", ">"]
						]
					],
					"meta": { "line": 219, "file": "PreconditionContainerArray.ts", "path": "src/lib/utils/preconditions" }
				},
				{
					"name": "condition",
					"description": "Retrieves a condition from {@link PreconditionContainerArray.conditions}, assuming existence.",
					"see": [],
					"readonly": true,
					"abstract": false,
					"deprecated": false,
					"type": [[["IPreconditionCondition"]]],
					"meta": { "line": 194, "file": "PreconditionContainerArray.ts", "path": "src/lib/utils/preconditions" }
				}
			],
			"methods": [
				{
					"name": "add",
					"description": "Adds a new entry to the array.",
					"see": [],
					"examples": [],
					"abstract": false,
					"deprecated": false,
					"emits": [],
					"params": [
						{
							"name": "entry",
							"description": "The value to add to the entries.",
							"optional": false,
							"type": [[["IPreconditionContainer"]]]
						}
					],
					"returns": [[["PreconditionContainerArray"]]],
					"meta": { "line": 149, "file": "PreconditionContainerArray.ts", "path": "src/lib/utils/preconditions" }
				},
				{
					"name": "append",
					"params": [
						{
							"name": "keyOrEntries",
							"optional": false,
							"type": [
								[
									["PreconditionContainerArray", " | "],
									["SimplePreconditionKeys", " | "],
									["SimplePreconditionSingleResolvableDetails"]
								]
							]
						}
					],
					"returns": [[["PreconditionContainerArray"]]],
					"meta": { "line": 154, "file": "PreconditionContainerArray.ts", "path": "src/lib/utils/preconditions" }
				},
				{
					"name": "parse",
					"description": "Parses the precondition entry resolvables, and adds them to the entries.",
					"see": [],
					"examples": [],
					"abstract": false,
					"deprecated": false,
					"emits": [],
					"params": [
						{
							"name": "entries",
							"description": "The entries to parse.",
							"optional": false,
							"type": [
								[
									["Iterable", "<"],
									["PreconditionEntryResolvable", ">"]
								]
							]
						}
					],
					"returns": [[["PreconditionContainerArray"]]],
					"meta": { "line": 178, "file": "PreconditionContainerArray.ts", "path": "src/lib/utils/preconditions" }
				},
				{
					"name": "run",
					"description": "Runs the container.",
					"see": [],
					"examples": [],
					"abstract": false,
					"deprecated": false,
					"emits": [],
					"params": [
						{
							"name": "message",
							"description": "The message that ran this precondition.",
							"optional": false,
							"type": [
								[
									["Message", "<"],
									["boolean", ">"]
								]
							]
						},
						{
							"name": "command",
							"description": "The command the message invoked.",
							"optional": false,
							"type": [
								[
									["Command", "<"],
									["Args", ", "],
									["CommandOptions", ">"]
								]
							]
						},
						{ "name": "context", "optional": true, "default": "{}", "type": [[["PreconditionContext"]]] }
					],
					"returns": [[["PreconditionContainerReturn"]]],
					"meta": { "line": 167, "file": "PreconditionContainerArray.ts", "path": "src/lib/utils/preconditions" }
				}
			],
			"meta": { "line": 108, "file": "PreconditionContainerArray.ts", "path": "src/lib/utils/preconditions" }
		},
		{
			"name": "PreconditionContainerSingle",
			"description": "An {@link IPreconditionContainer} which runs a single precondition from {@link SapphireClient.preconditions}.",
			"see": [],
			"implements": ["IPreconditionContainer"],
			"abstract": false,
			"deprecated": false,
			"construct": {
				"name": "constructor",
				"params": [{ "name": "data", "optional": false, "type": [[["PreconditionSingleResolvable"]]] }],
				"returns": [[["PreconditionContainerSingle"]]],
				"meta": { "line": 64, "file": "PreconditionContainerSingle.ts", "path": "src/lib/utils/preconditions" }
			},
			"props": [
				{
					"name": "context",
					"description": "The context to be used when calling {@link Precondition.run}. This will always be an empty object (`{}`) when the\ncontainer was constructed with a string, otherwise it is a direct reference to the value from\n{@link PreconditionSingleResolvableDetails.context}.",
					"see": [],
					"readonly": true,
					"abstract": false,
					"deprecated": false,
					"type": [
						[
							["Record", "<"],
							["PropertyKey", ", "],
							["unknown", ">"]
						]
					],
					"meta": { "line": 56, "file": "PreconditionContainerSingle.ts", "path": "src/lib/utils/preconditions" }
				},
				{
					"name": "name",
					"description": "The name of the precondition to run.",
					"see": [],
					"readonly": true,
					"abstract": false,
					"deprecated": false,
					"type": [[["string"]]],
					"meta": { "line": 62, "file": "PreconditionContainerSingle.ts", "path": "src/lib/utils/preconditions" }
				}
			],
			"methods": [
				{
					"name": "run",
					"description": "Runs the container.",
					"see": [],
					"examples": [],
					"abstract": false,
					"deprecated": false,
					"emits": [],
					"params": [
						{
							"name": "message",
							"description": "The message that ran this precondition.",
							"optional": false,
							"type": [
								[
									["Message", "<"],
									["boolean", ">"]
								]
							]
						},
						{
							"name": "command",
							"description": "The command the message invoked.",
							"optional": false,
							"type": [
								[
									["Command", "<"],
									["Args", ", "],
									["CommandOptions", ">"]
								]
							]
						},
						{ "name": "context", "optional": true, "default": "{}", "type": [[["PreconditionContext"]]] }
					],
					"returns": [[["PreconditionResult"]]],
					"meta": { "line": 80, "file": "PreconditionContainerSingle.ts", "path": "src/lib/utils/preconditions" }
				}
			],
			"meta": { "line": 49, "file": "PreconditionContainerSingle.ts", "path": "src/lib/utils/preconditions" }
		},
		{
			"name": "PreconditionError",
			"description": "Errors thrown by preconditions",
			"see": [],
			"extends": ["UserError"],
			"abstract": false,
			"deprecated": false,
			"construct": {
				"name": "constructor",
				"description": "Constructs an UserError.",
				"params": [{ "name": "options", "optional": false, "type": [[["Options"]]] }],
				"returns": [[["PreconditionError"]]],
				"meta": { "line": 11, "file": "PreconditionError.ts", "path": "src/lib/errors" }
			},
			"props": [
				{
					"name": "context",
					"description": "User-provided context.",
					"readonly": true,
					"type": [[["unknown"]]],
					"meta": { "line": 14, "file": "UserError.ts", "path": "src/lib/errors" }
				},
				{
					"name": "identifier",
					"description": "An identifier, useful to localize emitted errors.",
					"readonly": true,
					"type": [[["string"]]],
					"meta": { "line": 9, "file": "UserError.ts", "path": "src/lib/errors" }
				},
				{
					"name": "message",
					"type": [[["string"]]],
					"meta": { "line": 1023, "file": "lib.es5.d.ts", "path": "node_modules/typescript/lib" }
				},
				{
					"name": "precondition",
					"readonly": true,
					"type": [
						[
							["Precondition", "<"],
							["PreconditionOptions", ">"]
						]
					],
					"meta": { "line": 9, "file": "PreconditionError.ts", "path": "src/lib/errors" }
				},
				{
					"name": "stack",
					"type": [[["string"]]],
					"meta": { "line": 1024, "file": "lib.es5.d.ts", "path": "node_modules/typescript/lib" }
				},
				{
					"name": "prepareStackTrace",
					"description": "Optional override for formatting stack traces",
					"scope": "static",
					"type": [[["("], ["err", ": "], ["Error", ", "], ["stackTraces", ": "], ["Array", "<"], ["CallSite", ">) => "], ["any"]]],
					"meta": { "line": 11, "file": "globals.d.ts", "path": "node_modules/@types/node" }
				},
				{
					"name": "stackTraceLimit",
					"scope": "static",
					"type": [[["number"]]],
					"meta": { "line": 13, "file": "globals.d.ts", "path": "node_modules/@types/node" }
				},
				{
					"name": "name",
					"readonly": true,
					"type": [[["string"]]],
					"meta": { "line": 17, "file": "PreconditionError.ts", "path": "src/lib/errors" }
				}
			],
			"methods": [
				{
					"name": "captureStackTrace",
					"description": "Create .stack property on a target object",
					"scope": "static",
					"params": [
						{ "name": "targetObject", "optional": false, "type": [[["object"]]] },
						{ "name": "constructorOpt", "optional": true, "type": [[["Function"]]] }
					],
					"returns": [[["void"]]]
				}
			],
			"meta": { "line": 8, "file": "PreconditionError.ts", "path": "src/lib/errors" }
		},
		{
			"name": "PreconditionStore",
			"extends": ["Store<Precondition>"],
			"construct": {
				"name": "constructor",
				"returns": [[["PreconditionStore"]]],
				"meta": { "line": 10, "file": "PreconditionStore.ts", "path": "src/lib/structures" }
			},
			"props": [
				{
					"name": "Constructor",
					"readonly": true,
					"type": [
						[
							["Constructor", "<"],
							["Precondition", "<"],
							["PreconditionOptions", ">>"]
						]
					],
					"meta": { "line": 281, "file": "index.d.ts", "path": "node_modules/@sapphire/pieces/dist" }
				},
				{
					"name": "[toStringTag]",
					"readonly": true,
					"type": [[["string"]]],
					"meta": { "line": 135, "file": "lib.es2015.symbol.wellknown.d.ts", "path": "node_modules/typescript/lib" }
				},
				{
					"name": "constructor",
					"type": [[["CollectionConstructor"]]],
					"meta": { "line": 17, "file": "index.d.ts", "path": "node_modules/@discordjs/collection/dist" }
				},
				{
					"name": "globalPreconditions",
					"access": "private",
					"readonly": true,
					"default": "[]",
					"type": [
						[
							["Array", "<"],
							["Precondition", "<"],
							["PreconditionOptions", ">>"]
						]
					],
					"meta": { "line": 8, "file": "PreconditionStore.ts", "path": "src/lib/structures" }
				},
				{
					"name": "name",
					"readonly": true,
					"type": [[["string"]]],
					"meta": { "line": 282, "file": "index.d.ts", "path": "node_modules/@sapphire/pieces/dist" }
				},
				{
					"name": "paths",
					"readonly": true,
					"type": [
						[
							["Set", "<"],
							["string", ">"]
						]
					],
					"meta": { "line": 283, "file": "index.d.ts", "path": "node_modules/@sapphire/pieces/dist" }
				},
				{
					"name": "size",
					"readonly": true,
					"type": [[["number"]]],
					"meta": { "line": 28, "file": "lib.es2015.collection.d.ts", "path": "node_modules/typescript/lib" }
				},
				{
					"name": "strategy",
					"readonly": true,
					"type": [
						[
							["ILoaderStrategy", "<"],
							["Precondition", "<"],
							["PreconditionOptions", ">>"]
						]
					],
					"meta": { "line": 284, "file": "index.d.ts", "path": "node_modules/@sapphire/pieces/dist" }
				},
				{
					"name": "[species]",
					"scope": "static",
					"readonly": true,
					"type": [[["MapConstructor"]]],
					"meta": { "line": 317, "file": "lib.es2015.symbol.wellknown.d.ts", "path": "node_modules/typescript/lib" }
				},
				{
					"name": "default",
					"scope": "static",
					"readonly": true,
					"type": [[["("], ["typeof", " "], ["Collection", ")"]]],
					"meta": { "line": 24, "file": "index.d.ts", "path": "node_modules/@discordjs/collection/dist" }
				},
				{
					"name": "defaultStrategy",
					"description": "The default strategy, defaults to {@link LoaderStrategy}, which is constructed on demand when a store is constructed,\nwhen none was set beforehand.",
					"scope": "static",
					"type": [
						[
							["ILoaderStrategy", "<"],
							["any", ">"]
						]
					],
					"meta": { "line": 369, "file": "index.d.ts", "path": "node_modules/@sapphire/pieces/dist" }
				},
				{
					"name": "logger",
					"description": "The default logger, defaults to `null`.",
					"scope": "static",
					"type": [[["null", " | "], ["StoreLogger"]]],
					"meta": { "line": 373, "file": "index.d.ts", "path": "node_modules/@sapphire/pieces/dist" }
				},
				{
					"name": "container",
					"description": "A reference to the {@link Container} object for ease of use.",
					"see": ["container"],
					"readonly": true,
					"abstract": false,
					"deprecated": false,
					"type": [[["Container"]]],
					"meta": { "line": 294, "file": "index.d.ts", "path": "node_modules/@sapphire/pieces/dist" }
				}
			],
			"methods": [
				{
					"name": "[iterator]",
					"description": "Returns an iterable of entries in the map.",
					"returns": [
						[
							["IterableIterator", "<["],
							["string", ", "],
							["Precondition", "<"],
							["PreconditionOptions", ">]>"]
						]
					]
				},
				{
					"name": "at",
					"description": "Identical to [Array.at()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/at).\nReturns the item at a given index, allowing for positive and negative integers.\nNegative integers count back from the last item in the collection.",
					"params": [
						{
							"name": "index",
							"description": "The index of the element to obtain",
							"optional": true,
							"type": [[["number"]]]
						}
					],
					"returns": [
						[
							["undefined", " | "],
							["Precondition", "<"],
							["PreconditionOptions", ">"]
						]
					],
					"meta": { "line": 87, "file": "index.d.ts", "path": "node_modules/@discordjs/collection/dist" }
				},
				{
					"name": "clear",
					"returns": [[["void"]]],
					"meta": { "line": 44, "file": "PreconditionStore.ts", "path": "src/lib/structures" }
				},
				{
					"name": "clone",
					"description": "Creates an identical shallow copy of this collection.",
					"see": [],
					"examples": ["const newColl = someColl.clone();"],
					"abstract": false,
					"deprecated": false,
					"emits": [],
					"returns": [
						[
							["Collection", "<"],
							["string", ", "],
							["Precondition", "<"],
							["PreconditionOptions", ">>"]
						]
					],
					"meta": { "line": 301, "file": "index.d.ts", "path": "node_modules/@discordjs/collection/dist" }
				},
				{
					"name": "concat",
					"description": "Combines this collection with others into a new collection. None of the source collections are modified.",
					"see": [],
					"examples": ["const newColl = someColl.concat(someOtherColl, anotherColl, ohBoyAColl);"],
					"abstract": false,
					"deprecated": false,
					"emits": [],
					"params": [
						{
							"name": "collections",
							"description": "Collections to merge",
							"optional": false,
							"type": [
								[
									["Array", "<"],
									["Collection", "<"],
									["string", ", "],
									["Precondition", "<"],
									["PreconditionOptions", ">>>"]
								]
							]
						}
					],
					"returns": [
						[
							["Collection", "<"],
							["string", ", "],
							["Precondition", "<"],
							["PreconditionOptions", ">>"]
						]
					],
					"meta": { "line": 310, "file": "index.d.ts", "path": "node_modules/@discordjs/collection/dist" }
				},
				{
					"name": "construct",
					"description": "Constructs a {@link Piece} instance.",
					"params": [
						{
							"name": "Ctor",
							"description": "The {@link Piece}'s constructor used to build the instance.",
							"optional": false,
							"type": [
								[
									["ILoaderResultEntry", "<"],
									["Precondition", "<"],
									["PreconditionOptions", ">>"]
								]
							]
						},
						{
							"name": "data",
							"description": "The module's information",
							"optional": false,
							"type": [[["HydratedModuleData"]]]
						}
					],
					"returns": [
						[
							["Precondition", "<"],
							["PreconditionOptions", ">"]
						]
					],
					"returnsDescription": "An instance of the constructed piece.",
					"meta": { "line": 345, "file": "index.d.ts", "path": "node_modules/@sapphire/pieces/dist" }
				},
				{
					"name": "delete",
					"params": [{ "name": "key", "optional": false, "type": [[["string"]]] }],
					"returns": [[["boolean"]]],
					"meta": { "line": 35, "file": "PreconditionStore.ts", "path": "src/lib/structures" }
				},
				{
					"name": "difference",
					"description": "The difference method returns a new structure containing items where the key is present in one of the original structures but not the other.",
					"params": [
						{
							"name": "other",
							"description": "The other Collection to filter against",
							"optional": false,
							"type": [
								[
									["Collection", "<"],
									["string", ", "],
									["Precondition", "<"],
									["PreconditionOptions", ">>"]
								]
							]
						}
					],
					"returns": [
						[
							["Collection", "<"],
							["string", ", "],
							["Precondition", "<"],
							["PreconditionOptions", ">>"]
						]
					],
					"meta": { "line": 344, "file": "index.d.ts", "path": "node_modules/@discordjs/collection/dist" }
				},
				{
					"name": "each",
					"description": "Identical to\n[Map.forEach()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/forEach),\nbut returns the collection instead of undefined.",
					"see": [],
					"examples": [
						"collection\n .each(user => console.log(user.username))\n .filter(user => user.bot)\n .each(user => console.log(user.username));"
					],
					"abstract": false,
					"deprecated": false,
					"emits": [],
					"params": [
						{
							"name": "fn",
							"description": "Function to execute for each element",
							"optional": false,
							"type": [
								[
									["("],
									["value", ": "],
									["Precondition", "<"],
									["PreconditionOptions", ">, "],
									["key", ": "],
									["string", ", "],
									["collection", ": "],
									["PreconditionStore", ") => "],
									["void"]
								]
							]
						}
					],
					"returns": [[["PreconditionStore"]]],
					"meta": { "line": 279, "file": "index.d.ts", "path": "node_modules/@discordjs/collection/dist" }
				},
				{
					"name": "entries",
					"description": "Returns an iterable of key, value pairs for every entry in the map.",
					"returns": [
						[
							["IterableIterator", "<["],
							["string", ", "],
							["Precondition", "<"],
							["PreconditionOptions", ">]>"]
						]
					]
				},
				{
					"name": "equals",
					"description": "Checks if this collection shares identical items with another.\nThis is different to checking for equality using equal-signs, because\nthe collections may be different objects, but contain the same data.",
					"params": [
						{
							"name": "collection",
							"description": "Collection to compare with",
							"optional": false,
							"type": [
								[
									["Collection", "<"],
									["string", ", "],
									["Precondition", "<"],
									["PreconditionOptions", ">>"]
								]
							]
						}
					],
					"returns": [[["boolean"]]],
					"returnsDescription": "Whether the collections have identical contents",
					"meta": { "line": 320, "file": "index.d.ts", "path": "node_modules/@discordjs/collection/dist" }
				},
				{
					"name": "every",
					"description": "Checks if all items passes a test. Identical in behavior to\n[Array.every()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every).",
					"see": [],
					"examples": ["collection.every(user => !user.bot);"],
					"abstract": false,
					"deprecated": false,
					"emits": [],
					"params": [
						{
							"name": "fn",
							"description": "Function used to test (should return a boolean)",
							"optional": false,
							"type": [
								[
									["("],
									["value", ": "],
									["Precondition", "<"],
									["PreconditionOptions", ">, "],
									["key", ": "],
									["string", ", "],
									["collection", ": "],
									["PreconditionStore", ") => "],
									["key", " "],
									["is", " "],
									["K2"]
								]
							]
						}
					],
					"returns": [
						[
							["this", " "],
							["is", " "],
							["Collection", "<"],
							["K2", ", "],
							["Precondition", "<"],
							["PreconditionOptions", ">>"]
						]
					],
					"meta": { "line": 247, "file": "index.d.ts", "path": "node_modules/@discordjs/collection/dist" }
				},
				{
					"name": "filter",
					"description": "Identical to\n[Array.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter),\nbut returns a Collection instead of an Array.",
					"see": [],
					"examples": ["collection.filter(user => user.username === 'Bob');"],
					"abstract": false,
					"deprecated": false,
					"emits": [],
					"params": [
						{
							"name": "fn",
							"description": "The function to test with (should return boolean)",
							"optional": false,
							"type": [
								[
									["("],
									["value", ": "],
									["Precondition", "<"],
									["PreconditionOptions", ">, "],
									["key", ": "],
									["string", ", "],
									["collection", ": "],
									["PreconditionStore", ") => "],
									["key", " "],
									["is", " "],
									["K2"]
								]
							]
						}
					],
					"returns": [
						[
							["Collection", "<"],
							["K2", ", "],
							["Precondition", "<"],
							["PreconditionOptions", ">>"]
						]
					],
					"meta": { "line": 167, "file": "index.d.ts", "path": "node_modules/@discordjs/collection/dist" }
				},
				{
					"name": "find",
					"description": "Searches for a single item where the given function returns a truthy value. This behaves like\n[Array.find()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find).\n<warn>All collections used in Discord.js are mapped using their `id` property, and if you want to find by id you\nshould use the `get` method. See\n[MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/get) for details.</warn>",
					"see": [],
					"examples": ["collection.find(user => user.username === 'Bob');"],
					"abstract": false,
					"deprecated": false,
					"emits": [],
					"params": [
						{
							"name": "fn",
							"description": "The function to test with (should return boolean)",
							"optional": false,
							"type": [
								[
									["("],
									["value", ": "],
									["Precondition", "<"],
									["PreconditionOptions", ">, "],
									["key", ": "],
									["string", ", "],
									["collection", ": "],
									["PreconditionStore", ") => "],
									["value", " "],
									["is", " "],
									["V2"]
								]
							]
						}
					],
					"returns": [[["undefined", " | "], ["V2"]]],
					"meta": { "line": 127, "file": "index.d.ts", "path": "node_modules/@discordjs/collection/dist" }
				},
				{
					"name": "findKey",
					"description": "Searches for the key of a single item where the given function returns a truthy value. This behaves like\n[Array.findIndex()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex),\nbut returns the key rather than the positional index.",
					"see": [],
					"examples": ["collection.findKey(user => user.username === 'Bob');"],
					"abstract": false,
					"deprecated": false,
					"emits": [],
					"params": [
						{
							"name": "fn",
							"description": "The function to test with (should return boolean)",
							"optional": false,
							"type": [
								[
									["("],
									["value", ": "],
									["Precondition", "<"],
									["PreconditionOptions", ">, "],
									["key", ": "],
									["string", ", "],
									["collection", ": "],
									["PreconditionStore", ") => "],
									["key", " "],
									["is", " "],
									["K2"]
								]
							]
						}
					],
					"returns": [[["undefined", " | "], ["K2"]]],
					"meta": { "line": 142, "file": "index.d.ts", "path": "node_modules/@discordjs/collection/dist" }
				},
				{
					"name": "first",
					"description": "Obtains the first value(s) in this collection.",
					"returns": [
						[
							["undefined", " | "],
							["Precondition", "<"],
							["PreconditionOptions", ">"]
						]
					],
					"returnsDescription": "A single value if no amount is provided or an array of values, starting from the end if amount is negative",
					"meta": { "line": 48, "file": "index.d.ts", "path": "node_modules/@discordjs/collection/dist" }
				},
				{
					"name": "firstKey",
					"description": "Obtains the first key(s) in this collection.",
					"returns": [[["undefined", " | "], ["string"]]],
					"returnsDescription": "A single key if no amount is provided or an array of keys, starting from the end if\namount is negative",
					"meta": { "line": 58, "file": "index.d.ts", "path": "node_modules/@discordjs/collection/dist" }
				},
				{
					"name": "flatMap",
					"description": "Maps each item into a Collection, then joins the results into a single Collection. Identical in behavior to\n[Array.flatMap()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/flatMap).",
					"see": [],
					"examples": ["collection.flatMap(guild => guild.members.cache);"],
					"abstract": false,
					"deprecated": false,
					"emits": [],
					"params": [
						{
							"name": "fn",
							"description": "Function that produces a new Collection",
							"optional": false,
							"type": [
								[
									["("],
									["value", ": "],
									["Precondition", "<"],
									["PreconditionOptions", ">, "],
									["key", ": "],
									["string", ", "],
									["collection", ": "],
									["PreconditionStore", ") => "],
									["Collection", "<"],
									["string", ", "],
									["T", ">"]
								]
							]
						}
					],
					"returns": [
						[
							["Collection", "<"],
							["string", ", "],
							["T", ">"]
						]
					],
					"meta": { "line": 199, "file": "index.d.ts", "path": "node_modules/@discordjs/collection/dist" }
				},
				{
					"name": "forEach",
					"params": [
						{
							"name": "callbackfn",
							"optional": false,
							"type": [
								[
									["("],
									["value", ": "],
									["Precondition", "<"],
									["PreconditionOptions", ">, "],
									["key", ": "],
									["string", ", "],
									["map", ": "],
									["Map", "<"],
									["string", ", "],
									["Precondition", "<"],
									["PreconditionOptions", ">>) => "],
									["void"]
								]
							]
						},
						{ "name": "thisArg", "optional": true, "type": [[["any"]]] }
					],
					"returns": [[["void"]]]
				},
				{
					"name": "get",
					"params": [{ "name": "key", "optional": false, "type": [[["string"]]] }],
					"returns": [
						[
							["undefined", " | "],
							["Precondition", "<"],
							["PreconditionOptions", ">"]
						]
					]
				},
				{
					"name": "has",
					"params": [{ "name": "key", "optional": false, "type": [[["string"]]] }],
					"returns": [[["boolean"]]]
				},
				{
					"name": "hasAll",
					"description": "Checks if all of the elements exist in the collection.",
					"params": [
						{
							"name": "keys",
							"description": "The keys of the elements to check for",
							"optional": false,
							"type": [
								[
									["Array", "<"],
									["string", ">"]
								]
							]
						}
					],
					"returns": [[["boolean"]]],
					"returnsDescription": "`true` if all of the elements exist, `false` if at least one does not exist.",
					"meta": { "line": 32, "file": "index.d.ts", "path": "node_modules/@discordjs/collection/dist" }
				},
				{
					"name": "hasAny",
					"description": "Checks if any of the elements exist in the collection.",
					"params": [
						{
							"name": "keys",
							"description": "The keys of the elements to check for",
							"optional": false,
							"type": [
								[
									["Array", "<"],
									["string", ">"]
								]
							]
						}
					],
					"returns": [[["boolean"]]],
					"returnsDescription": "`true` if any of the elements exist, `false` if none exist.",
					"meta": { "line": 40, "file": "index.d.ts", "path": "node_modules/@discordjs/collection/dist" }
				},
				{
					"name": "insert",
					"description": "Inserts a piece into the store.",
					"params": [
						{
							"name": "piece",
							"description": "The piece to be inserted into the store.",
							"optional": false,
							"type": [
								[
									["Precondition", "<"],
									["PreconditionOptions", ">"]
								]
							]
						}
					],
					"returns": [
						[
							["Promise", "<"],
							["Precondition", "<"],
							["PreconditionOptions", ">>"]
						]
					],
					"returnsDescription": "The inserted piece.",
					"meta": { "line": 338, "file": "index.d.ts", "path": "node_modules/@sapphire/pieces/dist" }
				},
				{
					"name": "intersect",
					"description": "The intersect method returns a new structure containing items where the keys are present in both original structures.",
					"params": [
						{
							"name": "other",
							"description": "The other Collection to filter against",
							"optional": false,
							"type": [
								[
									["Collection", "<"],
									["string", ", "],
									["Precondition", "<"],
									["PreconditionOptions", ">>"]
								]
							]
						}
					],
					"returns": [
						[
							["Collection", "<"],
							["string", ", "],
							["Precondition", "<"],
							["PreconditionOptions", ">>"]
						]
					],
					"meta": { "line": 338, "file": "index.d.ts", "path": "node_modules/@discordjs/collection/dist" }
				},
				{
					"name": "keyAt",
					"description": "Identical to [Array.at()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/at).\nReturns the key at a given index, allowing for positive and negative integers.\nNegative integers count back from the last item in the collection.",
					"params": [
						{
							"name": "index",
							"description": "The index of the key to obtain",
							"optional": true,
							"type": [[["number"]]]
						}
					],
					"returns": [[["undefined", " | "], ["string"]]],
					"meta": { "line": 95, "file": "index.d.ts", "path": "node_modules/@discordjs/collection/dist" }
				},
				{
					"name": "keys",
					"description": "Returns an iterable of keys in the map",
					"returns": [
						[
							["IterableIterator", "<"],
							["string", ">"]
						]
					]
				},
				{
					"name": "last",
					"description": "Obtains the last value(s) in this collection.",
					"returns": [
						[
							["undefined", " | "],
							["Precondition", "<"],
							["PreconditionOptions", ">"]
						]
					],
					"returnsDescription": "A single value if no amount is provided or an array of values, starting from the start if\namount is negative",
					"meta": { "line": 68, "file": "index.d.ts", "path": "node_modules/@discordjs/collection/dist" }
				},
				{
					"name": "lastKey",
					"description": "Obtains the last key(s) in this collection.",
					"returns": [[["undefined", " | "], ["string"]]],
					"returnsDescription": "A single key if no amount is provided or an array of keys, starting from the start if\namount is negative",
					"meta": { "line": 78, "file": "index.d.ts", "path": "node_modules/@discordjs/collection/dist" }
				},
				{
					"name": "load",
					"description": "Loads one or more pieces from a path.",
					"params": [
						{
							"name": "root",
							"description": "The root directory the file is from.",
							"optional": false,
							"type": [[["string"]]]
						},
						{
							"name": "path",
							"description": "The path of the file to load, relative to the `root`.",
							"optional": false,
							"type": [[["string"]]]
						}
					],
					"returns": [
						[
							["Promise", "<"],
							["Array", "<"],
							["Precondition", "<"],
							["PreconditionOptions", ">>>"]
						]
					],
					"returnsDescription": "All the loaded pieces.",
					"meta": { "line": 312, "file": "index.d.ts", "path": "node_modules/@sapphire/pieces/dist" }
				},
				{
					"name": "loadAll",
					"description": "Loads all pieces from all directories specified by {@link paths}.",
					"returns": [
						[
							["Promise", "<"],
							["void", ">"]
						]
					],
					"meta": { "line": 326, "file": "index.d.ts", "path": "node_modules/@sapphire/pieces/dist" }
				},
				{
					"name": "map",
					"description": "Maps each item to another value into an array. Identical in behavior to\n[Array.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map).",
					"see": [],
					"examples": ["collection.map(user => user.tag);"],
					"abstract": false,
					"deprecated": false,
					"emits": [],
					"params": [
						{
							"name": "fn",
							"description": "Function that produces an element of the new array, taking three arguments",
							"optional": false,
							"type": [
								[
									["("],
									["value", ": "],
									["Precondition", "<"],
									["PreconditionOptions", ">, "],
									["key", ": "],
									["string", ", "],
									["collection", ": "],
									["PreconditionStore", ") => "],
									["T"]
								]
							]
						}
					],
					"returns": [
						[
							["Array", "<"],
							["T", ">"]
						]
					],
					"meta": { "line": 211, "file": "index.d.ts", "path": "node_modules/@discordjs/collection/dist" }
				},
				{
					"name": "mapValues",
					"description": "Maps each item to another value into a collection. Identical in behavior to\n[Array.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map).",
					"see": [],
					"examples": ["collection.mapValues(user => user.tag);"],
					"abstract": false,
					"deprecated": false,
					"emits": [],
					"params": [
						{
							"name": "fn",
							"description": "Function that produces an element of the new collection, taking three arguments",
							"optional": false,
							"type": [
								[
									["("],
									["value", ": "],
									["Precondition", "<"],
									["PreconditionOptions", ">, "],
									["key", ": "],
									["string", ", "],
									["collection", ": "],
									["PreconditionStore", ") => "],
									["T"]
								]
							]
						}
					],
					"returns": [
						[
							["Collection", "<"],
							["string", ", "],
							["T", ">"]
						]
					],
					"meta": { "line": 223, "file": "index.d.ts", "path": "node_modules/@discordjs/collection/dist" }
				},
				{
					"name": "partition",
					"description": "Partitions the collection into two collections where the first collection\ncontains the items that passed and the second contains the items that failed.",
					"see": [],
					"examples": ["const [big, small] = collection.partition(guild => guild.memberCount > 250);"],
					"abstract": false,
					"deprecated": false,
					"emits": [],
					"params": [
						{
							"name": "fn",
							"description": "Function used to test (should return a boolean)",
							"optional": false,
							"type": [
								[
									["("],
									["value", ": "],
									["Precondition", "<"],
									["PreconditionOptions", ">, "],
									["key", ": "],
									["string", ", "],
									["collection", ": "],
									["PreconditionStore", ") => "],
									["key", " "],
									["is", " "],
									["K2"]
								]
							]
						}
					],
					"returns": [
						[
							["["],
							["Collection", "<"],
							["K2", ", "],
							["Precondition", "<"],
							["PreconditionOptions", ">>, "],
							["Collection", "<"],
							["Exclude", "<"],
							["string", ", "],
							["K2", ">, "],
							["Precondition", "<"],
							["PreconditionOptions", ">>]"]
						]
					],
					"meta": { "line": 183, "file": "index.d.ts", "path": "node_modules/@discordjs/collection/dist" }
				},
				{
					"name": "random",
					"description": "Obtains unique random value(s) from this collection.",
					"returns": [
						[
							["undefined", " | "],
							["Precondition", "<"],
							["PreconditionOptions", ">"]
						]
					],
					"returnsDescription": "A single value if no amount is provided or an array of values",
					"meta": { "line": 103, "file": "index.d.ts", "path": "node_modules/@discordjs/collection/dist" }
				},
				{
					"name": "randomKey",
					"description": "Obtains unique random key(s) from this collection.",
					"returns": [[["undefined", " | "], ["string"]]],
					"returnsDescription": "A single key if no amount is provided or an array",
					"meta": { "line": 112, "file": "index.d.ts", "path": "node_modules/@discordjs/collection/dist" }
				},
				{
					"name": "reduce",
					"description": "Applies a function to produce a single value. Identical in behavior to\n[Array.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).",
					"see": [],
					"examples": ["collection.reduce((acc, guild) => acc + guild.memberCount, 0);"],
					"abstract": false,
					"deprecated": false,
					"emits": [],
					"params": [
						{
							"name": "fn",
							"description": "Function used to reduce, taking four arguments; `accumulator`, `currentValue`, `currentKey`,\nand `collection`",
							"optional": false,
							"type": [
								[
									["("],
									["accumulator", ": "],
									["T", ", "],
									["value", ": "],
									["Precondition", "<"],
									["PreconditionOptions", ">, "],
									["key", ": "],
									["string", ", "],
									["collection", ": "],
									["PreconditionStore", ") => "],
									["T"]
								]
							]
						},
						{
							"name": "initialValue",
							"description": "Starting value for the accumulator",
							"optional": true,
							"type": [[["T"]]]
						}
					],
					"returns": [[["T"]]],
					"meta": { "line": 264, "file": "index.d.ts", "path": "node_modules/@discordjs/collection/dist" }
				},
				{
					"name": "registerPath",
					"description": "Registers a directory into the store.",
					"see": [],
					"examples": [
						"```typescript\nstore\n  .registerPath(resolve('commands'))\n  .registerPath(resolve('third-party', 'commands'));\n```"
					],
					"abstract": false,
					"deprecated": false,
					"emits": [],
					"params": [{ "name": "path", "description": "The path to be added.", "optional": false, "type": [[["string"]]] }],
					"returns": [[["PreconditionStore"]]],
					"meta": { "line": 305, "file": "index.d.ts", "path": "node_modules/@sapphire/pieces/dist" }
				},
				{
					"name": "resolve",
					"description": "Resolves a piece by its name or its instance.",
					"params": [
						{
							"name": "name",
							"description": "The name of the piece or the instance itself.",
							"optional": false,
							"type": [
								[
									["string", " | "],
									["Precondition", "<"],
									["PreconditionOptions", ">"]
								]
							]
						}
					],
					"returns": [
						[
							["Precondition", "<"],
							["PreconditionOptions", ">"]
						]
					],
					"returnsDescription": "The resolved piece.",
					"meta": { "line": 332, "file": "index.d.ts", "path": "node_modules/@sapphire/pieces/dist" }
				},
				{
					"name": "run",
					"params": [
						{
							"name": "message",
							"optional": false,
							"type": [
								[
									["Message", "<"],
									["boolean", ">"]
								]
							]
						},
						{
							"name": "command",
							"optional": false,
							"type": [
								[
									["Command", "<"],
									["Args", ", "],
									["CommandOptions", ">"]
								]
							]
						},
						{ "name": "context", "optional": true, "default": "{}", "type": [[["PreconditionContext"]]] }
					],
					"returns": [[["AsyncPreconditionResult"]]],
					"meta": { "line": 14, "file": "PreconditionStore.ts", "path": "src/lib/structures" }
				},
				{
					"name": "set",
					"params": [
						{ "name": "key", "optional": false, "type": [[["string"]]] },
						{
							"name": "value",
							"optional": false,
							"type": [
								[
									["Precondition", "<"],
									["PreconditionOptions", ">"]
								]
							]
						}
					],
					"returns": [[["PreconditionStore"]]],
					"meta": { "line": 23, "file": "PreconditionStore.ts", "path": "src/lib/structures" }
				},
				{
					"name": "some",
					"description": "Checks if there exists an item that passes a test. Identical in behavior to\n[Array.some()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some).",
					"see": [],
					"examples": ["collection.some(user => user.discriminator === '0000');"],
					"abstract": false,
					"deprecated": false,
					"emits": [],
					"params": [
						{
							"name": "fn",
							"description": "Function used to test (should return a boolean)",
							"optional": false,
							"type": [
								[
									["("],
									["value", ": "],
									["Precondition", "<"],
									["PreconditionOptions", ">, "],
									["key", ": "],
									["string", ", "],
									["collection", ": "],
									["PreconditionStore", ") => "],
									["boolean"]
								]
							]
						}
					],
					"returns": [[["boolean"]]],
					"meta": { "line": 235, "file": "index.d.ts", "path": "node_modules/@discordjs/collection/dist" }
				},
				{
					"name": "sort",
					"description": "The sort method sorts the items of a collection in place and returns it.\nThe sort is not necessarily stable in Node 10 or older.\nThe default sort order is according to string Unicode code points.",
					"see": [],
					"examples": ["collection.sort((userA, userB) => userA.createdTimestamp - userB.createdTimestamp);"],
					"abstract": false,
					"deprecated": false,
					"emits": [],
					"params": [
						{
							"name": "compareFunction",
							"description": "Specifies a function that defines the sort order.\nIf omitted, the collection is sorted according to each character's Unicode code point value, according to the string conversion of each element.",
							"optional": true,
							"type": [
								[
									["Comparator", "<"],
									["string", ", "],
									["Precondition", "<"],
									["PreconditionOptions", ">>"]
								]
							]
						}
					],
					"returns": [[["PreconditionStore"]]],
					"meta": { "line": 332, "file": "index.d.ts", "path": "node_modules/@discordjs/collection/dist" }
				},
				{
					"name": "sorted",
					"description": "The sorted method sorts the items of a collection and returns it.\nThe sort is not necessarily stable in Node 10 or older.\nThe default sort order is according to string Unicode code points.",
					"see": [],
					"examples": ["collection.sorted((userA, userB) => userA.createdTimestamp - userB.createdTimestamp);"],
					"abstract": false,
					"deprecated": false,
					"emits": [],
					"params": [
						{
							"name": "compareFunction",
							"description": "Specifies a function that defines the sort order.\nIf omitted, the collection is sorted according to each character's Unicode code point value,\naccording to the string conversion of each element.",
							"optional": true,
							"type": [
								[
									["Comparator", "<"],
									["string", ", "],
									["Precondition", "<"],
									["PreconditionOptions", ">>"]
								]
							]
						}
					],
					"returns": [
						[
							["Collection", "<"],
							["string", ", "],
							["Precondition", "<"],
							["PreconditionOptions", ">>"]
						]
					],
					"meta": { "line": 357, "file": "index.d.ts", "path": "node_modules/@discordjs/collection/dist" }
				},
				{
					"name": "sweep",
					"description": "Removes items that satisfy the provided filter function.",
					"params": [
						{
							"name": "fn",
							"description": "Function used to test (should return a boolean)",
							"optional": false,
							"type": [
								[
									["("],
									["value", ": "],
									["Precondition", "<"],
									["PreconditionOptions", ">, "],
									["key", ": "],
									["string", ", "],
									["collection", ": "],
									["PreconditionStore", ") => "],
									["boolean"]
								]
							]
						}
					],
					"returns": [[["number"]]],
					"returnsDescription": "The number of removed entries",
					"meta": { "line": 154, "file": "index.d.ts", "path": "node_modules/@discordjs/collection/dist" }
				},
				{
					"name": "tap",
					"description": "Runs a function on the collection and returns the collection.",
					"see": [],
					"examples": [
						"collection\n .tap(coll => console.log(coll.size))\n .filter(user => user.bot)\n .tap(coll => console.log(coll.size))"
					],
					"abstract": false,
					"deprecated": false,
					"emits": [],
					"params": [
						{
							"name": "fn",
							"description": "Function to execute",
							"optional": false,
							"type": [[["("], ["collection", ": "], ["PreconditionStore", ") => "], ["void"]]]
						}
					],
					"returns": [[["PreconditionStore"]]],
					"meta": { "line": 293, "file": "index.d.ts", "path": "node_modules/@discordjs/collection/dist" }
				},
				{
					"name": "toJSON",
					"returns": [
						[
							["Array", "<"],
							["Precondition", "<"],
							["PreconditionOptions", ">>"]
						]
					],
					"meta": { "line": 358, "file": "index.d.ts", "path": "node_modules/@discordjs/collection/dist" }
				},
				{
					"name": "unload",
					"description": "Unloads a piece given its instance or its name.",
					"params": [
						{
							"name": "name",
							"description": "The name of the file to load.",
							"optional": false,
							"type": [
								[
									["string", " | "],
									["Precondition", "<"],
									["PreconditionOptions", ">"]
								]
							]
						}
					],
					"returns": [
						[
							["Promise", "<"],
							["Precondition", "<"],
							["PreconditionOptions", ">>"]
						]
					],
					"returnsDescription": "Returns the piece that was unloaded.",
					"meta": { "line": 318, "file": "index.d.ts", "path": "node_modules/@sapphire/pieces/dist" }
				},
				{
					"name": "unloadAll",
					"description": "Unloads all pieces from the store.",
					"returns": [
						[
							["Promise", "<"],
							["Array", "<"],
							["Precondition", "<"],
							["PreconditionOptions", ">>>"]
						]
					],
					"meta": { "line": 322, "file": "index.d.ts", "path": "node_modules/@sapphire/pieces/dist" }
				},
				{
					"name": "values",
					"description": "Returns an iterable of values in the map",
					"returns": [
						[
							["IterableIterator", "<"],
							["Precondition", "<"],
							["PreconditionOptions", ">>"]
						]
					]
				}
			],
			"meta": { "line": 7, "file": "PreconditionStore.ts", "path": "src/lib/structures" }
		},
		{
			"name": "SapphireClient",
			"description": "The base {@link Client} extension that makes Sapphire work. When building a Discord bot with the framework, the developer\nmust either use this class, or extend it.",
			"see": [
				"{@link SapphireClientOptions} for all options available to the Sapphire Client. You can also provide all of discord.js' [ClientOptions](https://discord.js.org/#/docs/main/stable/typedef/ClientOptions)"
			],
			"extends": ["Client<Ready>"],
			"abstract": false,
			"deprecated": false,
			"construct": {
				"name": "constructor",
				"params": [{ "name": "options", "optional": false, "type": [[["ClientOptions"]]] }],
				"returns": [
					[
						["SapphireClient", "<"],
						["Ready", ">"]
					]
				],
				"meta": { "line": 220, "file": "SapphireClient.ts", "path": "src/lib" }
			},
			"props": [
				{
					"name": "application",
					"type": [
						[
							["If", "<"],
							["Ready", ", "],
							["ClientApplication", ", "],
							["null", ">"]
						]
					],
					"meta": { "line": 543, "file": "index.d.ts", "path": "node_modules/discord.js/typings" }
				},
				{
					"name": "channels",
					"type": [[["ChannelManager"]]],
					"meta": { "line": 544, "file": "index.d.ts", "path": "node_modules/discord.js/typings" }
				},
				{
					"name": "emojis",
					"readonly": true,
					"type": [[["BaseGuildEmojiManager"]]],
					"meta": { "line": 545, "file": "index.d.ts", "path": "node_modules/discord.js/typings" }
				},
				{
					"name": "fetchPrefix",
					"description": "The method to be overriden by the developer.",
					"see": [],
					"abstract": false,
					"deprecated": false,
					"type": [[["SapphirePrefixHook"]]],
					"meta": { "line": 205, "file": "SapphireClient.ts", "path": "src/lib" }
				},
				{
					"name": "guilds",
					"type": [[["GuildManager"]]],
					"meta": { "line": 546, "file": "index.d.ts", "path": "node_modules/discord.js/typings" }
				},
				{
					"name": "id",
					"description": "The client's ID, used for the user prefix.",
					"see": [],
					"abstract": false,
					"deprecated": false,
					"default": "null",
					"type": [[["null", " | "], ["string"]]],
					"meta": { "line": 175, "file": "SapphireClient.ts", "path": "src/lib" }
				},
				{
					"name": "logger",
					"description": "The logger to be used by the framework and plugins. By default, a {@link Logger} instance is used, which emits the\nmessages to the console.",
					"see": [],
					"abstract": false,
					"deprecated": false,
					"type": [[["ILogger"]]],
					"meta": { "line": 212, "file": "SapphireClient.ts", "path": "src/lib" }
				},
				{
					"name": "options",
					"type": [[["ClientOptions"]]],
					"meta": { "line": 547, "file": "index.d.ts", "path": "node_modules/discord.js/typings" }
				},
				{
					"name": "readyAt",
					"type": [
						[
							["If", "<"],
							["Ready", ", "],
							["Date", ", "],
							["null", ">"]
						]
					],
					"meta": { "line": 548, "file": "index.d.ts", "path": "node_modules/discord.js/typings" }
				},
				{
					"name": "readyTimestamp",
					"readonly": true,
					"type": [
						[
							["If", "<"],
							["Ready", ", "],
							["number", ", "],
							["null", ">"]
						]
					],
					"meta": { "line": 549, "file": "index.d.ts", "path": "node_modules/discord.js/typings" }
				},
				{
					"name": "shard",
					"type": [[["null", " | "], ["ShardClientUtil"]]],
					"meta": { "line": 551, "file": "index.d.ts", "path": "node_modules/discord.js/typings" }
				},
				{
					"name": "stores",
					"description": "The registered stores.",
					"see": [],
					"abstract": false,
					"deprecated": false,
					"type": [[["StoreRegistry"]]],
					"meta": { "line": 218, "file": "SapphireClient.ts", "path": "src/lib" }
				},
				{
					"name": "sweepers",
					"type": [[["Sweepers"]]],
					"meta": { "line": 550, "file": "index.d.ts", "path": "node_modules/discord.js/typings" }
				},
				{
					"name": "token",
					"type": [
						[
							["If", "<"],
							["Ready", ", "],
							["string", ", "],
							["null", " | "],
							["string", ">"]
						]
					],
					"meta": { "line": 552, "file": "index.d.ts", "path": "node_modules/discord.js/typings" }
				},
				{
					"name": "uptime",
					"type": [
						[
							["If", "<"],
							["Ready", ", "],
							["number", ", "],
							["null", ">"]
						]
					],
					"meta": { "line": 553, "file": "index.d.ts", "path": "node_modules/discord.js/typings" }
				},
				{
					"name": "user",
					"type": [
						[
							["If", "<"],
							["Ready", ", "],
							["ClientUser", ", "],
							["null", ">"]
						]
					],
					"meta": { "line": 554, "file": "index.d.ts", "path": "node_modules/discord.js/typings" }
				},
				{
					"name": "users",
					"type": [[["UserManager"]]],
					"meta": { "line": 555, "file": "index.d.ts", "path": "node_modules/discord.js/typings" }
				},
				{
					"name": "voice",
					"type": [[["ClientVoiceManager"]]],
					"meta": { "line": 556, "file": "index.d.ts", "path": "node_modules/discord.js/typings" }
				},
				{
					"name": "ws",
					"type": [[["WebSocketManager"]]],
					"meta": { "line": 557, "file": "index.d.ts", "path": "node_modules/discord.js/typings" }
				},
				{
					"name": "captureRejectionSymbol",
					"scope": "static",
					"readonly": true,
					"type": [[["("], ["typeof", " "], ["captureRejectionSymbol", ")"]]],
					"meta": { "line": 273, "file": "events.d.ts", "path": "node_modules/@types/node" }
				},
				{
					"name": "captureRejections",
					"description": "Sets or gets the default captureRejection value for all emitters.",
					"scope": "static",
					"type": [[["boolean"]]],
					"meta": { "line": 278, "file": "events.d.ts", "path": "node_modules/@types/node" }
				},
				{
					"name": "defaultMaxListeners",
					"scope": "static",
					"type": [[["number"]]],
					"meta": { "line": 279, "file": "events.d.ts", "path": "node_modules/@types/node" }
				},
				{
					"name": "errorMonitor",
					"description": "This symbol shall be used to install a listener for only monitoring `'error'`\nevents. Listeners installed using this symbol are called before the regular\n`'error'` listeners are called.",
					"scope": "static",
					"readonly": true,
					"type": [[["("], ["typeof", " "], ["errorMonitor", ")"]]],
					"meta": { "line": 272, "file": "events.d.ts", "path": "node_modules/@types/node" }
				},
				{
					"name": "plugins",
					"scope": "static",
					"type": [[["PluginManager"]]],
					"meta": { "line": 291, "file": "SapphireClient.ts", "path": "src/lib" }
				}
			],
			"methods": [
				{
					"name": "addListener",
					"description": "Alias for `emitter.on(eventName, listener)`.",
					"see": [],
					"examples": [],
					"abstract": false,
					"deprecated": false,
					"emits": [],
					"params": [
						{ "name": "eventName", "optional": false, "type": [[["string", " | "], ["symbol"]]] },
						{
							"name": "listener",
							"optional": false,
							"type": [[["("], ["args", ": "], ["Array", "<"], ["any", ">) => "], ["void"]]]
						}
					],
					"returns": [
						[
							["SapphireClient", "<"],
							["Ready", ">"]
						]
					]
				},
				{
					"name": "destroy",
					"returns": [[["void"]]],
					"meta": { "line": 558, "file": "index.d.ts", "path": "node_modules/discord.js/typings" }
				},
				{
					"name": "emit",
					"params": [
						{ "name": "event", "optional": false, "type": [[["K"]]] },
						{
							"name": "args",
							"optional": false,
							"type": [
								[
									["ClientEvents", "["],
									["K", "]"]
								]
							]
						}
					],
					"returns": [[["boolean"]]],
					"meta": { "line": 586, "file": "index.d.ts", "path": "node_modules/discord.js/typings" }
				},
				{
					"name": "eventNames",
					"description": "Returns an array listing the events for which the emitter has registered\nlisteners. The values in the array are strings or `Symbol`s.",
					"see": [],
					"examples": [],
					"abstract": false,
					"deprecated": false,
					"emits": [],
					"returns": [
						[
							["Array", "<"],
							["string", " | "],
							["symbol", ">"]
						]
					]
				},
				{
					"name": "fetchGuildPreview",
					"params": [{ "name": "guild", "optional": false, "type": [[["GuildResolvable"]]] }],
					"returns": [
						[
							["Promise", "<"],
							["GuildPreview", ">"]
						]
					],
					"meta": { "line": 559, "file": "index.d.ts", "path": "node_modules/discord.js/typings" }
				},
				{
					"name": "fetchGuildTemplate",
					"params": [{ "name": "template", "optional": false, "type": [[["string"]]] }],
					"returns": [
						[
							["Promise", "<"],
							["GuildTemplate", ">"]
						]
					],
					"meta": { "line": 561, "file": "index.d.ts", "path": "node_modules/discord.js/typings" }
				},
				{
					"name": "fetchGuildWidget",
					"params": [{ "name": "guild", "optional": false, "type": [[["GuildResolvable"]]] }],
					"returns": [
						[
							["Promise", "<"],
							["Widget", ">"]
						]
					],
					"meta": { "line": 566, "file": "index.d.ts", "path": "node_modules/discord.js/typings" }
				},
				{
					"name": "fetchInvite",
					"params": [
						{ "name": "invite", "optional": false, "type": [[["string"]]] },
						{ "name": "options", "optional": true, "type": [[["ClientFetchInviteOptions"]]] }
					],
					"returns": [
						[
							["Promise", "<"],
							["Invite", ">"]
						]
					],
					"meta": { "line": 560, "file": "index.d.ts", "path": "node_modules/discord.js/typings" }
				},
				{
					"name": "fetchPremiumStickerPacks",
					"returns": [
						[
							["Promise", "<"],
							["Collection", "<"],
							["string", ", "],
							["StickerPack", ">>"]
						]
					],
					"meta": { "line": 564, "file": "index.d.ts", "path": "node_modules/discord.js/typings" }
				},
				{
					"name": "fetchSticker",
					"params": [{ "name": "id", "optional": false, "type": [[["string"]]] }],
					"returns": [
						[
							["Promise", "<"],
							["Sticker", ">"]
						]
					],
					"meta": { "line": 563, "file": "index.d.ts", "path": "node_modules/discord.js/typings" }
				},
				{
					"name": "fetchVoiceRegions",
					"returns": [
						[
							["Promise", "<"],
							["Collection", "<"],
							["string", ", "],
							["VoiceRegion", ">>"]
						]
					],
					"meta": { "line": 562, "file": "index.d.ts", "path": "node_modules/discord.js/typings" }
				},
				{
					"name": "fetchWebhook",
					"params": [
						{ "name": "id", "optional": false, "type": [[["string"]]] },
						{ "name": "token", "optional": true, "type": [[["string"]]] }
					],
					"returns": [
						[
							["Promise", "<"],
							["Webhook", ">"]
						]
					],
					"meta": { "line": 565, "file": "index.d.ts", "path": "node_modules/discord.js/typings" }
				},
				{
					"name": "generateInvite",
					"params": [{ "name": "options", "optional": true, "type": [[["InviteGenerationOptions"]]] }],
					"returns": [[["string"]]],
					"meta": { "line": 567, "file": "index.d.ts", "path": "node_modules/discord.js/typings" }
				},
				{
					"name": "getMaxListeners",
					"description": "Returns the current max listener value for the `EventEmitter` which is either\nset by `emitter.setMaxListeners(n)` or defaults to {@link defaultMaxListeners}.",
					"see": [],
					"examples": [],
					"abstract": false,
					"deprecated": false,
					"emits": [],
					"returns": [[["number"]]]
				},
				{
					"name": "isReady",
					"returns": [
						[
							["this", " "],
							["is", " "],
							["Client", "<"],
							["true", ">"]
						]
					],
					"meta": { "line": 569, "file": "index.d.ts", "path": "node_modules/discord.js/typings" }
				},
				{
					"name": "listenerCount",
					"description": "Returns the number of listeners listening to the event named `eventName`.",
					"see": [],
					"examples": [],
					"abstract": false,
					"deprecated": false,
					"emits": [],
					"params": [
						{
							"name": "eventName",
							"description": "The name of the event being listened for",
							"optional": false,
							"type": [[["string", " | "], ["symbol"]]]
						}
					],
					"returns": [[["number"]]]
				},
				{
					"name": "listeners",
					"description": "Returns a copy of the array of listeners for the event named `eventName`.",
					"see": [],
					"examples": [],
					"abstract": false,
					"deprecated": false,
					"emits": [],
					"params": [{ "name": "eventName", "optional": false, "type": [[["string", " | "], ["symbol"]]] }],
					"returns": [
						[
							["Array", "<"],
							["Function", ">"]
						]
					]
				},
				{
					"name": "login",
					"description": "Loads all pieces, then logs the client in, establishing a websocket connection to Discord.",
					"see": [],
					"examples": [],
					"abstract": false,
					"deprecated": false,
					"emits": [],
					"params": [
						{
							"name": "token",
							"description": "Token of the account to log in with.",
							"optional": true,
							"type": [[["string"]]]
						}
					],
					"returns": [
						[
							["Promise", "<"],
							["string", ">"]
						]
					],
					"returnsDescription": "Token of the account used.",
					"meta": { "line": 266, "file": "SapphireClient.ts", "path": "src/lib" }
				},
				{
					"name": "off",
					"params": [
						{ "name": "event", "optional": false, "type": [[["K"]]] },
						{
							"name": "listener",
							"optional": false,
							"type": [[["("], ["args", ": "], ["ClientEvents", "["], ["K", "]) => "], ["Awaitable", "<"], ["void", ">"]]]
						}
					],
					"returns": [
						[
							["SapphireClient", "<"],
							["Ready", ">"]
						]
					],
					"meta": { "line": 589, "file": "index.d.ts", "path": "node_modules/discord.js/typings" }
				},
				{
					"name": "on",
					"params": [
						{ "name": "event", "optional": false, "type": [[["K"]]] },
						{
							"name": "listener",
							"optional": false,
							"type": [[["("], ["args", ": "], ["ClientEvents", "["], ["K", "]) => "], ["Awaitable", "<"], ["void", ">"]]]
						}
					],
					"returns": [
						[
							["SapphireClient", "<"],
							["Ready", ">"]
						]
					],
					"meta": { "line": 574, "file": "index.d.ts", "path": "node_modules/discord.js/typings" }
				},
				{
					"name": "once",
					"params": [
						{ "name": "event", "optional": false, "type": [[["K"]]] },
						{
							"name": "listener",
							"optional": false,
							"type": [[["("], ["args", ": "], ["ClientEvents", "["], ["K", "]) => "], ["Awaitable", "<"], ["void", ">"]]]
						}
					],
					"returns": [
						[
							["SapphireClient", "<"],
							["Ready", ">"]
						]
					],
					"meta": { "line": 580, "file": "index.d.ts", "path": "node_modules/discord.js/typings" }
				},
				{
					"name": "prependListener",
					"description": "Adds the `listener` function to the _beginning_ of the listeners array for the\nevent named `eventName`. No checks are made to see if the `listener` has\nalready been added. Multiple calls passing the same combination of `eventName`and `listener` will result in the `listener` being added, and called, multiple\ntimes.",
					"see": [],
					"examples": [],
					"abstract": false,
					"deprecated": false,
					"emits": [],
					"params": [
						{
							"name": "eventName",
							"description": "The name of the event.",
							"optional": false,
							"type": [[["string", " | "], ["symbol"]]]
						},
						{
							"name": "listener",
							"description": "The callback function",
							"optional": false,
							"type": [[["("], ["args", ": "], ["Array", "<"], ["any", ">) => "], ["void"]]]
						}
					],
					"returns": [
						[
							["SapphireClient", "<"],
							["Ready", ">"]
						]
					]
				},
				{
					"name": "prependOnceListener",
					"description": "Adds a **one-time**`listener` function for the event named `eventName` to the_beginning_ of the listeners array. The next time `eventName` is triggered, this\nlistener is removed, and then invoked.",
					"see": [],
					"examples": [],
					"abstract": false,
					"deprecated": false,
					"emits": [],
					"params": [
						{
							"name": "eventName",
							"description": "The name of the event.",
							"optional": false,
							"type": [[["string", " | "], ["symbol"]]]
						},
						{
							"name": "listener",
							"description": "The callback function",
							"optional": false,
							"type": [[["("], ["args", ": "], ["Array", "<"], ["any", ">) => "], ["void"]]]
						}
					],
					"returns": [
						[
							["SapphireClient", "<"],
							["Ready", ">"]
						]
					]
				},
				{
					"name": "rawListeners",
					"description": "Returns a copy of the array of listeners for the event named `eventName`,\nincluding any wrappers (such as those created by `.once()`).",
					"see": [],
					"examples": [],
					"abstract": false,
					"deprecated": false,
					"emits": [],
					"params": [{ "name": "eventName", "optional": false, "type": [[["string", " | "], ["symbol"]]] }],
					"returns": [
						[
							["Array", "<"],
							["Function", ">"]
						]
					]
				},
				{
					"name": "removeAllListeners",
					"params": [{ "name": "event", "optional": true, "type": [[["K"]]] }],
					"returns": [
						[
							["SapphireClient", "<"],
							["Ready", ">"]
						]
					],
					"meta": { "line": 595, "file": "index.d.ts", "path": "node_modules/discord.js/typings" }
				},
				{
					"name": "removeListener",
					"description": "Removes the specified `listener` from the listener array for the event named`eventName`.",
					"see": [],
					"examples": [],
					"abstract": false,
					"deprecated": false,
					"emits": [],
					"params": [
						{ "name": "eventName", "optional": false, "type": [[["string", " | "], ["symbol"]]] },
						{
							"name": "listener",
							"optional": false,
							"type": [[["("], ["args", ": "], ["Array", "<"], ["any", ">) => "], ["void"]]]
						}
					],
					"returns": [
						[
							["SapphireClient", "<"],
							["Ready", ">"]
						]
					]
				},
				{
					"name": "setMaxListeners",
					"description": "By default `EventEmitter`s will print a warning if more than `10` listeners are\nadded for a particular event. This is a useful default that helps finding\nmemory leaks. The `emitter.setMaxListeners()` method allows the limit to be\nmodified for this specific `EventEmitter` instance. The value can be set to`Infinity` (or `0`) to indicate an unlimited number of listeners.",
					"see": [],
					"examples": [],
					"abstract": false,
					"deprecated": false,
					"emits": [],
					"params": [{ "name": "n", "optional": false, "type": [[["number"]]] }],
					"returns": [
						[
							["SapphireClient", "<"],
							["Ready", ">"]
						]
					]
				},
				{
					"name": "sweepMessages",
					"see": [],
					"examples": [],
					"abstract": false,
					"deprecated": true,
					"emits": [],
					"params": [{ "name": "lifetime", "optional": true, "type": [[["number"]]] }],
					"returns": [[["number"]]],
					"meta": { "line": 571, "file": "index.d.ts", "path": "node_modules/discord.js/typings" }
				},
				{
					"name": "toJSON",
					"returns": [[["unknown"]]],
					"meta": { "line": 572, "file": "index.d.ts", "path": "node_modules/discord.js/typings" }
				},
				{
					"name": "getEventListeners",
					"description": "Returns a copy of the array of listeners for the event named `eventName`.",
					"see": [],
					"scope": "static",
					"examples": [],
					"abstract": false,
					"deprecated": false,
					"emits": [],
					"params": [
						{ "name": "emitter", "optional": false, "type": [[["EventEmitter", " | "], ["DOMEventTarget"]]] },
						{ "name": "name", "optional": false, "type": [[["string", " | "], ["symbol"]]] }
					],
					"returns": [
						[
							["Array", "<"],
							["Function", ">"]
						]
					],
					"meta": { "line": 262, "file": "events.d.ts", "path": "node_modules/@types/node" }
				},
				{
					"name": "listenerCount",
					"description": "A class method that returns the number of listeners for the given `eventName`registered on the given `emitter`.",
					"see": [],
					"scope": "static",
					"examples": [],
					"abstract": false,
					"deprecated": true,
					"emits": [],
					"params": [
						{
							"name": "emitter",
							"description": "The emitter to query",
							"optional": false,
							"type": [[["EventEmitter"]]]
						},
						{
							"name": "eventName",
							"description": "The event name",
							"optional": false,
							"type": [[["string", " | "], ["symbol"]]]
						}
					],
					"returns": [[["number"]]],
					"meta": { "line": 234, "file": "events.d.ts", "path": "node_modules/@types/node" }
				},
				{
					"name": "on",
					"description": "```js\nconst { on, EventEmitter } = require('events');",
					"see": [],
					"scope": "static",
					"examples": [],
					"abstract": false,
					"deprecated": false,
					"emits": [],
					"params": [
						{ "name": "emitter", "optional": false, "type": [[["EventEmitter"]]] },
						{
							"name": "eventName",
							"description": "The name of the event being listened for",
							"optional": false,
							"type": [[["string"]]]
						},
						{ "name": "options", "optional": true, "type": [[["StaticEventEmitterOptions"]]] }
					],
					"returns": [
						[
							["AsyncIterableIterator", "<"],
							["any", ">"]
						]
					],
					"returnsDescription": "that iterates `eventName` events emitted by the `emitter`",
					"meta": { "line": 217, "file": "events.d.ts", "path": "node_modules/@types/node" }
				},
				{
					"name": "once",
					"description": "Creates a `Promise` that is fulfilled when the `EventEmitter` emits the given\nevent or that is rejected if the `EventEmitter` emits `'error'` while waiting.\nThe `Promise` will resolve with an array of all the arguments emitted to the\ngiven event.",
					"see": [],
					"scope": "static",
					"examples": [],
					"abstract": false,
					"deprecated": false,
					"emits": [],
					"params": [
						{ "name": "emitter", "optional": false, "type": [[["NodeEventTarget"]]] },
						{ "name": "eventName", "optional": false, "type": [[["string", " | "], ["symbol"]]] },
						{ "name": "options", "optional": true, "type": [[["StaticEventEmitterOptions"]]] }
					],
					"returns": [
						[
							["Promise", "<"],
							["Array", "<"],
							["any", ">>"]
						]
					],
					"meta": { "line": 157, "file": "events.d.ts", "path": "node_modules/@types/node" }
				},
				{
					"name": "use",
					"scope": "static",
					"params": [{ "name": "plugin", "optional": false, "type": [[["("], ["typeof", " "], ["Plugin", ")"]]] }],
					"returns": [[["("], ["typeof", " "], ["SapphireClient", ")"]]],
					"meta": { "line": 293, "file": "SapphireClient.ts", "path": "src/lib" }
				}
			],
			"meta": { "line": 170, "file": "SapphireClient.ts", "path": "src/lib" }
		},
		{
			"name": "Store",
			"description": "The store class which contains {@link Piece}s.",
			"extends": ["Collection<string, T>"],
			"construct": {
				"name": "constructor",
				"params": [
					{
						"name": "constructor",
						"description": "The piece constructor this store loads.",
						"optional": false,
						"type": [
							[
								["Constructor", "<"],
								["T", ">"]
							]
						]
					},
					{
						"name": "options",
						"description": "The options for the store.",
						"optional": false,
						"type": [
							[
								["StoreOptions", "<"],
								["T", ">"]
							]
						]
					}
				],
				"returns": [
					[
						["Store", "<"],
						["T", ">"]
					]
				],
				"meta": { "line": 289, "file": "index.d.ts", "path": "node_modules/@sapphire/pieces/dist" }
			},
			"props": [
				{
					"name": "Constructor",
					"readonly": true,
					"type": [
						[
							["Constructor", "<"],
							["T", ">"]
						]
					],
					"meta": { "line": 281, "file": "index.d.ts", "path": "node_modules/@sapphire/pieces/dist" }
				},
				{
					"name": "[toStringTag]",
					"readonly": true,
					"type": [[["string"]]],
					"meta": { "line": 135, "file": "lib.es2015.symbol.wellknown.d.ts", "path": "node_modules/typescript/lib" }
				},
				{
					"name": "constructor",
					"type": [[["CollectionConstructor"]]],
					"meta": { "line": 17, "file": "index.d.ts", "path": "node_modules/@discordjs/collection/dist" }
				},
				{
					"name": "hydrateModuleData",
					"description": "Adds the final module data properties.",
					"see": [],
					"access": "private",
					"abstract": false,
					"deprecated": false,
					"type": [[["any"]]],
					"meta": { "line": 352, "file": "index.d.ts", "path": "node_modules/@sapphire/pieces/dist" }
				},
				{
					"name": "loadPath",
					"description": "Loads a directory into the store.",
					"see": [],
					"access": "private",
					"abstract": false,
					"deprecated": false,
					"type": [[["any"]]],
					"meta": { "line": 358, "file": "index.d.ts", "path": "node_modules/@sapphire/pieces/dist" }
				},
				{
					"name": "name",
					"readonly": true,
					"type": [[["string"]]],
					"meta": { "line": 282, "file": "index.d.ts", "path": "node_modules/@sapphire/pieces/dist" }
				},
				{
					"name": "paths",
					"readonly": true,
					"type": [
						[
							["Set", "<"],
							["string", ">"]
						]
					],
					"meta": { "line": 283, "file": "index.d.ts", "path": "node_modules/@sapphire/pieces/dist" }
				},
				{
					"name": "size",
					"readonly": true,
					"type": [[["number"]]],
					"meta": { "line": 28, "file": "lib.es2015.collection.d.ts", "path": "node_modules/typescript/lib" }
				},
				{
					"name": "strategy",
					"readonly": true,
					"type": [
						[
							["ILoaderStrategy", "<"],
							["T", ">"]
						]
					],
					"meta": { "line": 284, "file": "index.d.ts", "path": "node_modules/@sapphire/pieces/dist" }
				},
				{
					"name": "walk",
					"description": "Retrieves all possible pieces.",
					"see": [],
					"access": "private",
					"abstract": false,
					"deprecated": false,
					"type": [[["any"]]],
					"meta": { "line": 364, "file": "index.d.ts", "path": "node_modules/@sapphire/pieces/dist" }
				},
				{
					"name": "[species]",
					"scope": "static",
					"readonly": true,
					"type": [[["MapConstructor"]]],
					"meta": { "line": 317, "file": "lib.es2015.symbol.wellknown.d.ts", "path": "node_modules/typescript/lib" }
				},
				{
					"name": "default",
					"scope": "static",
					"readonly": true,
					"type": [[["("], ["typeof", " "], ["Collection", ")"]]],
					"meta": { "line": 24, "file": "index.d.ts", "path": "node_modules/@discordjs/collection/dist" }
				},
				{
					"name": "defaultStrategy",
					"description": "The default strategy, defaults to {@link LoaderStrategy}, which is constructed on demand when a store is constructed,\nwhen none was set beforehand.",
					"scope": "static",
					"type": [
						[
							["ILoaderStrategy", "<"],
							["any", ">"]
						]
					],
					"meta": { "line": 369, "file": "index.d.ts", "path": "node_modules/@sapphire/pieces/dist" }
				},
				{
					"name": "logger",
					"description": "The default logger, defaults to `null`.",
					"scope": "static",
					"type": [[["null", " | "], ["StoreLogger"]]],
					"meta": { "line": 373, "file": "index.d.ts", "path": "node_modules/@sapphire/pieces/dist" }
				},
				{
					"name": "container",
					"description": "A reference to the {@link Container} object for ease of use.",
					"see": ["container"],
					"readonly": true,
					"abstract": false,
					"deprecated": false,
					"type": [[["Container"]]],
					"meta": { "line": 294, "file": "index.d.ts", "path": "node_modules/@sapphire/pieces/dist" }
				}
			],
			"methods": [
				{
					"name": "[iterator]",
					"description": "Returns an iterable of entries in the map.",
					"returns": [
						[
							["IterableIterator", "<["],
							["string", ", "],
							["T", "]>"]
						]
					]
				},
				{
					"name": "at",
					"description": "Identical to [Array.at()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/at).\nReturns the item at a given index, allowing for positive and negative integers.\nNegative integers count back from the last item in the collection.",
					"params": [
						{
							"name": "index",
							"description": "The index of the element to obtain",
							"optional": true,
							"type": [[["number"]]]
						}
					],
					"returns": [[["undefined", " | "], ["T"]]],
					"meta": { "line": 87, "file": "index.d.ts", "path": "node_modules/@discordjs/collection/dist" }
				},
				{ "name": "clear", "returns": [[["void"]]] },
				{
					"name": "clone",
					"description": "Creates an identical shallow copy of this collection.",
					"see": [],
					"examples": ["const newColl = someColl.clone();"],
					"abstract": false,
					"deprecated": false,
					"emits": [],
					"returns": [
						[
							["Collection", "<"],
							["string", ", "],
							["T", ">"]
						]
					],
					"meta": { "line": 301, "file": "index.d.ts", "path": "node_modules/@discordjs/collection/dist" }
				},
				{
					"name": "concat",
					"description": "Combines this collection with others into a new collection. None of the source collections are modified.",
					"see": [],
					"examples": ["const newColl = someColl.concat(someOtherColl, anotherColl, ohBoyAColl);"],
					"abstract": false,
					"deprecated": false,
					"emits": [],
					"params": [
						{
							"name": "collections",
							"description": "Collections to merge",
							"optional": false,
							"type": [
								[
									["Array", "<"],
									["Collection", "<"],
									["string", ", "],
									["T", ">>"]
								]
							]
						}
					],
					"returns": [
						[
							["Collection", "<"],
							["string", ", "],
							["T", ">"]
						]
					],
					"meta": { "line": 310, "file": "index.d.ts", "path": "node_modules/@discordjs/collection/dist" }
				},
				{
					"name": "construct",
					"description": "Constructs a {@link Piece} instance.",
					"params": [
						{
							"name": "Ctor",
							"description": "The {@link Piece}'s constructor used to build the instance.",
							"optional": false,
							"type": [
								[
									["ILoaderResultEntry", "<"],
									["T", ">"]
								]
							]
						},
						{
							"name": "data",
							"description": "The module's information",
							"optional": false,
							"type": [[["HydratedModuleData"]]]
						}
					],
					"returns": [[["T"]]],
					"returnsDescription": "An instance of the constructed piece.",
					"meta": { "line": 345, "file": "index.d.ts", "path": "node_modules/@sapphire/pieces/dist" }
				},
				{
					"name": "delete",
					"params": [{ "name": "key", "optional": false, "type": [[["string"]]] }],
					"returns": [[["boolean"]]]
				},
				{
					"name": "difference",
					"description": "The difference method returns a new structure containing items where the key is present in one of the original structures but not the other.",
					"params": [
						{
							"name": "other",
							"description": "The other Collection to filter against",
							"optional": false,
							"type": [
								[
									["Collection", "<"],
									["string", ", "],
									["T", ">"]
								]
							]
						}
					],
					"returns": [
						[
							["Collection", "<"],
							["string", ", "],
							["T", ">"]
						]
					],
					"meta": { "line": 344, "file": "index.d.ts", "path": "node_modules/@discordjs/collection/dist" }
				},
				{
					"name": "each",
					"description": "Identical to\n[Map.forEach()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/forEach),\nbut returns the collection instead of undefined.",
					"see": [],
					"examples": [
						"collection\n .each(user => console.log(user.username))\n .filter(user => user.bot)\n .each(user => console.log(user.username));"
					],
					"abstract": false,
					"deprecated": false,
					"emits": [],
					"params": [
						{
							"name": "fn",
							"description": "Function to execute for each element",
							"optional": false,
							"type": [
								[
									["("],
									["value", ": "],
									["T", ", "],
									["key", ": "],
									["string", ", "],
									["collection", ": "],
									["Store", "<"],
									["T", ">) => "],
									["void"]
								]
							]
						}
					],
					"returns": [
						[
							["Store", "<"],
							["T", ">"]
						]
					],
					"meta": { "line": 279, "file": "index.d.ts", "path": "node_modules/@discordjs/collection/dist" }
				},
				{
					"name": "entries",
					"description": "Returns an iterable of key, value pairs for every entry in the map.",
					"returns": [
						[
							["IterableIterator", "<["],
							["string", ", "],
							["T", "]>"]
						]
					]
				},
				{
					"name": "equals",
					"description": "Checks if this collection shares identical items with another.\nThis is different to checking for equality using equal-signs, because\nthe collections may be different objects, but contain the same data.",
					"params": [
						{
							"name": "collection",
							"description": "Collection to compare with",
							"optional": false,
							"type": [
								[
									["Collection", "<"],
									["string", ", "],
									["T", ">"]
								]
							]
						}
					],
					"returns": [[["boolean"]]],
					"returnsDescription": "Whether the collections have identical contents",
					"meta": { "line": 320, "file": "index.d.ts", "path": "node_modules/@discordjs/collection/dist" }
				},
				{
					"name": "every",
					"description": "Checks if all items passes a test. Identical in behavior to\n[Array.every()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every).",
					"see": [],
					"examples": ["collection.every(user => !user.bot);"],
					"abstract": false,
					"deprecated": false,
					"emits": [],
					"params": [
						{
							"name": "fn",
							"description": "Function used to test (should return a boolean)",
							"optional": false,
							"type": [
								[
									["("],
									["value", ": "],
									["T", ", "],
									["key", ": "],
									["string", ", "],
									["collection", ": "],
									["Store", "<"],
									["T", ">) => "],
									["key", " "],
									["is", " "],
									["K2"]
								]
							]
						}
					],
					"returns": [
						[
							["this", " "],
							["is", " "],
							["Collection", "<"],
							["K2", ", "],
							["T", ">"]
						]
					],
					"meta": { "line": 247, "file": "index.d.ts", "path": "node_modules/@discordjs/collection/dist" }
				},
				{
					"name": "filter",
					"description": "Identical to\n[Array.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter),\nbut returns a Collection instead of an Array.",
					"see": [],
					"examples": ["collection.filter(user => user.username === 'Bob');"],
					"abstract": false,
					"deprecated": false,
					"emits": [],
					"params": [
						{
							"name": "fn",
							"description": "The function to test with (should return boolean)",
							"optional": false,
							"type": [
								[
									["("],
									["value", ": "],
									["T", ", "],
									["key", ": "],
									["string", ", "],
									["collection", ": "],
									["Store", "<"],
									["T", ">) => "],
									["key", " "],
									["is", " "],
									["K2"]
								]
							]
						}
					],
					"returns": [
						[
							["Collection", "<"],
							["K2", ", "],
							["T", ">"]
						]
					],
					"meta": { "line": 167, "file": "index.d.ts", "path": "node_modules/@discordjs/collection/dist" }
				},
				{
					"name": "find",
					"description": "Searches for a single item where the given function returns a truthy value. This behaves like\n[Array.find()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find).\n<warn>All collections used in Discord.js are mapped using their `id` property, and if you want to find by id you\nshould use the `get` method. See\n[MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/get) for details.</warn>",
					"see": [],
					"examples": ["collection.find(user => user.username === 'Bob');"],
					"abstract": false,
					"deprecated": false,
					"emits": [],
					"params": [
						{
							"name": "fn",
							"description": "The function to test with (should return boolean)",
							"optional": false,
							"type": [
								[
									["("],
									["value", ": "],
									["T", ", "],
									["key", ": "],
									["string", ", "],
									["collection", ": "],
									["Store", "<"],
									["T", ">) => "],
									["value", " "],
									["is", " "],
									["V2"]
								]
							]
						}
					],
					"returns": [[["undefined", " | "], ["V2"]]],
					"meta": { "line": 127, "file": "index.d.ts", "path": "node_modules/@discordjs/collection/dist" }
				},
				{
					"name": "findKey",
					"description": "Searches for the key of a single item where the given function returns a truthy value. This behaves like\n[Array.findIndex()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex),\nbut returns the key rather than the positional index.",
					"see": [],
					"examples": ["collection.findKey(user => user.username === 'Bob');"],
					"abstract": false,
					"deprecated": false,
					"emits": [],
					"params": [
						{
							"name": "fn",
							"description": "The function to test with (should return boolean)",
							"optional": false,
							"type": [
								[
									["("],
									["value", ": "],
									["T", ", "],
									["key", ": "],
									["string", ", "],
									["collection", ": "],
									["Store", "<"],
									["T", ">) => "],
									["key", " "],
									["is", " "],
									["K2"]
								]
							]
						}
					],
					"returns": [[["undefined", " | "], ["K2"]]],
					"meta": { "line": 142, "file": "index.d.ts", "path": "node_modules/@discordjs/collection/dist" }
				},
				{
					"name": "first",
					"description": "Obtains the first value(s) in this collection.",
					"returns": [[["undefined", " | "], ["T"]]],
					"returnsDescription": "A single value if no amount is provided or an array of values, starting from the end if amount is negative",
					"meta": { "line": 48, "file": "index.d.ts", "path": "node_modules/@discordjs/collection/dist" }
				},
				{
					"name": "firstKey",
					"description": "Obtains the first key(s) in this collection.",
					"returns": [[["undefined", " | "], ["string"]]],
					"returnsDescription": "A single key if no amount is provided or an array of keys, starting from the end if\namount is negative",
					"meta": { "line": 58, "file": "index.d.ts", "path": "node_modules/@discordjs/collection/dist" }
				},
				{
					"name": "flatMap",
					"description": "Maps each item into a Collection, then joins the results into a single Collection. Identical in behavior to\n[Array.flatMap()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/flatMap).",
					"see": [],
					"examples": ["collection.flatMap(guild => guild.members.cache);"],
					"abstract": false,
					"deprecated": false,
					"emits": [],
					"params": [
						{
							"name": "fn",
							"description": "Function that produces a new Collection",
							"optional": false,
							"type": [
								[
									["("],
									["value", ": "],
									["T", ", "],
									["key", ": "],
									["string", ", "],
									["collection", ": "],
									["Store", "<"],
									["T", ">) => "],
									["Collection", "<"],
									["string", ", "],
									["T", ">"]
								]
							]
						}
					],
					"returns": [
						[
							["Collection", "<"],
							["string", ", "],
							["T", ">"]
						]
					],
					"meta": { "line": 199, "file": "index.d.ts", "path": "node_modules/@discordjs/collection/dist" }
				},
				{
					"name": "forEach",
					"params": [
						{
							"name": "callbackfn",
							"optional": false,
							"type": [
								[
									["("],
									["value", ": "],
									["T", ", "],
									["key", ": "],
									["string", ", "],
									["map", ": "],
									["Map", "<"],
									["string", ", "],
									["T", ">) => "],
									["void"]
								]
							]
						},
						{ "name": "thisArg", "optional": true, "type": [[["any"]]] }
					],
					"returns": [[["void"]]]
				},
				{
					"name": "get",
					"params": [{ "name": "key", "optional": false, "type": [[["string"]]] }],
					"returns": [[["undefined", " | "], ["T"]]]
				},
				{
					"name": "has",
					"params": [{ "name": "key", "optional": false, "type": [[["string"]]] }],
					"returns": [[["boolean"]]]
				},
				{
					"name": "hasAll",
					"description": "Checks if all of the elements exist in the collection.",
					"params": [
						{
							"name": "keys",
							"description": "The keys of the elements to check for",
							"optional": false,
							"type": [
								[
									["Array", "<"],
									["string", ">"]
								]
							]
						}
					],
					"returns": [[["boolean"]]],
					"returnsDescription": "`true` if all of the elements exist, `false` if at least one does not exist.",
					"meta": { "line": 32, "file": "index.d.ts", "path": "node_modules/@discordjs/collection/dist" }
				},
				{
					"name": "hasAny",
					"description": "Checks if any of the elements exist in the collection.",
					"params": [
						{
							"name": "keys",
							"description": "The keys of the elements to check for",
							"optional": false,
							"type": [
								[
									["Array", "<"],
									["string", ">"]
								]
							]
						}
					],
					"returns": [[["boolean"]]],
					"returnsDescription": "`true` if any of the elements exist, `false` if none exist.",
					"meta": { "line": 40, "file": "index.d.ts", "path": "node_modules/@discordjs/collection/dist" }
				},
				{
					"name": "insert",
					"description": "Inserts a piece into the store.",
					"params": [
						{
							"name": "piece",
							"description": "The piece to be inserted into the store.",
							"optional": false,
							"type": [[["T"]]]
						}
					],
					"returns": [
						[
							["Promise", "<"],
							["T", ">"]
						]
					],
					"returnsDescription": "The inserted piece.",
					"meta": { "line": 338, "file": "index.d.ts", "path": "node_modules/@sapphire/pieces/dist" }
				},
				{
					"name": "intersect",
					"description": "The intersect method returns a new structure containing items where the keys are present in both original structures.",
					"params": [
						{
							"name": "other",
							"description": "The other Collection to filter against",
							"optional": false,
							"type": [
								[
									["Collection", "<"],
									["string", ", "],
									["T", ">"]
								]
							]
						}
					],
					"returns": [
						[
							["Collection", "<"],
							["string", ", "],
							["T", ">"]
						]
					],
					"meta": { "line": 338, "file": "index.d.ts", "path": "node_modules/@discordjs/collection/dist" }
				},
				{
					"name": "keyAt",
					"description": "Identical to [Array.at()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/at).\nReturns the key at a given index, allowing for positive and negative integers.\nNegative integers count back from the last item in the collection.",
					"params": [
						{
							"name": "index",
							"description": "The index of the key to obtain",
							"optional": true,
							"type": [[["number"]]]
						}
					],
					"returns": [[["undefined", " | "], ["string"]]],
					"meta": { "line": 95, "file": "index.d.ts", "path": "node_modules/@discordjs/collection/dist" }
				},
				{
					"name": "keys",
					"description": "Returns an iterable of keys in the map",
					"returns": [
						[
							["IterableIterator", "<"],
							["string", ">"]
						]
					]
				},
				{
					"name": "last",
					"description": "Obtains the last value(s) in this collection.",
					"returns": [[["undefined", " | "], ["T"]]],
					"returnsDescription": "A single value if no amount is provided or an array of values, starting from the start if\namount is negative",
					"meta": { "line": 68, "file": "index.d.ts", "path": "node_modules/@discordjs/collection/dist" }
				},
				{
					"name": "lastKey",
					"description": "Obtains the last key(s) in this collection.",
					"returns": [[["undefined", " | "], ["string"]]],
					"returnsDescription": "A single key if no amount is provided or an array of keys, starting from the start if\namount is negative",
					"meta": { "line": 78, "file": "index.d.ts", "path": "node_modules/@discordjs/collection/dist" }
				},
				{
					"name": "load",
					"description": "Loads one or more pieces from a path.",
					"params": [
						{
							"name": "root",
							"description": "The root directory the file is from.",
							"optional": false,
							"type": [[["string"]]]
						},
						{
							"name": "path",
							"description": "The path of the file to load, relative to the `root`.",
							"optional": false,
							"type": [[["string"]]]
						}
					],
					"returns": [
						[
							["Promise", "<"],
							["Array", "<"],
							["T", ">>"]
						]
					],
					"returnsDescription": "All the loaded pieces.",
					"meta": { "line": 312, "file": "index.d.ts", "path": "node_modules/@sapphire/pieces/dist" }
				},
				{
					"name": "loadAll",
					"description": "Loads all pieces from all directories specified by {@link paths}.",
					"returns": [
						[
							["Promise", "<"],
							["void", ">"]
						]
					],
					"meta": { "line": 326, "file": "index.d.ts", "path": "node_modules/@sapphire/pieces/dist" }
				},
				{
					"name": "map",
					"description": "Maps each item to another value into an array. Identical in behavior to\n[Array.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map).",
					"see": [],
					"examples": ["collection.map(user => user.tag);"],
					"abstract": false,
					"deprecated": false,
					"emits": [],
					"params": [
						{
							"name": "fn",
							"description": "Function that produces an element of the new array, taking three arguments",
							"optional": false,
							"type": [
								[
									["("],
									["value", ": "],
									["T", ", "],
									["key", ": "],
									["string", ", "],
									["collection", ": "],
									["Store", "<"],
									["T", ">) => "],
									["T"]
								]
							]
						}
					],
					"returns": [
						[
							["Array", "<"],
							["T", ">"]
						]
					],
					"meta": { "line": 211, "file": "index.d.ts", "path": "node_modules/@discordjs/collection/dist" }
				},
				{
					"name": "mapValues",
					"description": "Maps each item to another value into a collection. Identical in behavior to\n[Array.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map).",
					"see": [],
					"examples": ["collection.mapValues(user => user.tag);"],
					"abstract": false,
					"deprecated": false,
					"emits": [],
					"params": [
						{
							"name": "fn",
							"description": "Function that produces an element of the new collection, taking three arguments",
							"optional": false,
							"type": [
								[
									["("],
									["value", ": "],
									["T", ", "],
									["key", ": "],
									["string", ", "],
									["collection", ": "],
									["Store", "<"],
									["T", ">) => "],
									["T"]
								]
							]
						}
					],
					"returns": [
						[
							["Collection", "<"],
							["string", ", "],
							["T", ">"]
						]
					],
					"meta": { "line": 223, "file": "index.d.ts", "path": "node_modules/@discordjs/collection/dist" }
				},
				{
					"name": "partition",
					"description": "Partitions the collection into two collections where the first collection\ncontains the items that passed and the second contains the items that failed.",
					"see": [],
					"examples": ["const [big, small] = collection.partition(guild => guild.memberCount > 250);"],
					"abstract": false,
					"deprecated": false,
					"emits": [],
					"params": [
						{
							"name": "fn",
							"description": "Function used to test (should return a boolean)",
							"optional": false,
							"type": [
								[
									["("],
									["value", ": "],
									["T", ", "],
									["key", ": "],
									["string", ", "],
									["collection", ": "],
									["Store", "<"],
									["T", ">) => "],
									["key", " "],
									["is", " "],
									["K2"]
								]
							]
						}
					],
					"returns": [
						[
							["["],
							["Collection", "<"],
							["K2", ", "],
							["T", ">, "],
							["Collection", "<"],
							["Exclude", "<"],
							["string", ", "],
							["K2", ">, "],
							["T", ">]"]
						]
					],
					"meta": { "line": 183, "file": "index.d.ts", "path": "node_modules/@discordjs/collection/dist" }
				},
				{
					"name": "random",
					"description": "Obtains unique random value(s) from this collection.",
					"returns": [[["undefined", " | "], ["T"]]],
					"returnsDescription": "A single value if no amount is provided or an array of values",
					"meta": { "line": 103, "file": "index.d.ts", "path": "node_modules/@discordjs/collection/dist" }
				},
				{
					"name": "randomKey",
					"description": "Obtains unique random key(s) from this collection.",
					"returns": [[["undefined", " | "], ["string"]]],
					"returnsDescription": "A single key if no amount is provided or an array",
					"meta": { "line": 112, "file": "index.d.ts", "path": "node_modules/@discordjs/collection/dist" }
				},
				{
					"name": "reduce",
					"description": "Applies a function to produce a single value. Identical in behavior to\n[Array.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).",
					"see": [],
					"examples": ["collection.reduce((acc, guild) => acc + guild.memberCount, 0);"],
					"abstract": false,
					"deprecated": false,
					"emits": [],
					"params": [
						{
							"name": "fn",
							"description": "Function used to reduce, taking four arguments; `accumulator`, `currentValue`, `currentKey`,\nand `collection`",
							"optional": false,
							"type": [
								[
									["("],
									["accumulator", ": "],
									["T", ", "],
									["value", ": "],
									["T", ", "],
									["key", ": "],
									["string", ", "],
									["collection", ": "],
									["Store", "<"],
									["T", ">) => "],
									["T"]
								]
							]
						},
						{
							"name": "initialValue",
							"description": "Starting value for the accumulator",
							"optional": true,
							"type": [[["T"]]]
						}
					],
					"returns": [[["T"]]],
					"meta": { "line": 264, "file": "index.d.ts", "path": "node_modules/@discordjs/collection/dist" }
				},
				{
					"name": "registerPath",
					"description": "Registers a directory into the store.",
					"see": [],
					"examples": [
						"```typescript\nstore\n  .registerPath(resolve('commands'))\n  .registerPath(resolve('third-party', 'commands'));\n```"
					],
					"abstract": false,
					"deprecated": false,
					"emits": [],
					"params": [{ "name": "path", "description": "The path to be added.", "optional": false, "type": [[["string"]]] }],
					"returns": [
						[
							["Store", "<"],
							["T", ">"]
						]
					],
					"meta": { "line": 305, "file": "index.d.ts", "path": "node_modules/@sapphire/pieces/dist" }
				},
				{
					"name": "resolve",
					"description": "Resolves a piece by its name or its instance.",
					"params": [
						{
							"name": "name",
							"description": "The name of the piece or the instance itself.",
							"optional": false,
							"type": [[["string", " | "], ["T"]]]
						}
					],
					"returns": [[["T"]]],
					"returnsDescription": "The resolved piece.",
					"meta": { "line": 332, "file": "index.d.ts", "path": "node_modules/@sapphire/pieces/dist" }
				},
				{
					"name": "set",
					"params": [
						{ "name": "key", "optional": false, "type": [[["string"]]] },
						{ "name": "value", "optional": false, "type": [[["T"]]] }
					],
					"returns": [
						[
							["Store", "<"],
							["T", ">"]
						]
					]
				},
				{
					"name": "some",
					"description": "Checks if there exists an item that passes a test. Identical in behavior to\n[Array.some()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some).",
					"see": [],
					"examples": ["collection.some(user => user.discriminator === '0000');"],
					"abstract": false,
					"deprecated": false,
					"emits": [],
					"params": [
						{
							"name": "fn",
							"description": "Function used to test (should return a boolean)",
							"optional": false,
							"type": [
								[
									["("],
									["value", ": "],
									["T", ", "],
									["key", ": "],
									["string", ", "],
									["collection", ": "],
									["Store", "<"],
									["T", ">) => "],
									["boolean"]
								]
							]
						}
					],
					"returns": [[["boolean"]]],
					"meta": { "line": 235, "file": "index.d.ts", "path": "node_modules/@discordjs/collection/dist" }
				},
				{
					"name": "sort",
					"description": "The sort method sorts the items of a collection in place and returns it.\nThe sort is not necessarily stable in Node 10 or older.\nThe default sort order is according to string Unicode code points.",
					"see": [],
					"examples": ["collection.sort((userA, userB) => userA.createdTimestamp - userB.createdTimestamp);"],
					"abstract": false,
					"deprecated": false,
					"emits": [],
					"params": [
						{
							"name": "compareFunction",
							"description": "Specifies a function that defines the sort order.\nIf omitted, the collection is sorted according to each character's Unicode code point value, according to the string conversion of each element.",
							"optional": true,
							"type": [
								[
									["Comparator", "<"],
									["string", ", "],
									["T", ">"]
								]
							]
						}
					],
					"returns": [
						[
							["Store", "<"],
							["T", ">"]
						]
					],
					"meta": { "line": 332, "file": "index.d.ts", "path": "node_modules/@discordjs/collection/dist" }
				},
				{
					"name": "sorted",
					"description": "The sorted method sorts the items of a collection and returns it.\nThe sort is not necessarily stable in Node 10 or older.\nThe default sort order is according to string Unicode code points.",
					"see": [],
					"examples": ["collection.sorted((userA, userB) => userA.createdTimestamp - userB.createdTimestamp);"],
					"abstract": false,
					"deprecated": false,
					"emits": [],
					"params": [
						{
							"name": "compareFunction",
							"description": "Specifies a function that defines the sort order.\nIf omitted, the collection is sorted according to each character's Unicode code point value,\naccording to the string conversion of each element.",
							"optional": true,
							"type": [
								[
									["Comparator", "<"],
									["string", ", "],
									["T", ">"]
								]
							]
						}
					],
					"returns": [
						[
							["Collection", "<"],
							["string", ", "],
							["T", ">"]
						]
					],
					"meta": { "line": 357, "file": "index.d.ts", "path": "node_modules/@discordjs/collection/dist" }
				},
				{
					"name": "sweep",
					"description": "Removes items that satisfy the provided filter function.",
					"params": [
						{
							"name": "fn",
							"description": "Function used to test (should return a boolean)",
							"optional": false,
							"type": [
								[
									["("],
									["value", ": "],
									["T", ", "],
									["key", ": "],
									["string", ", "],
									["collection", ": "],
									["Store", "<"],
									["T", ">) => "],
									["boolean"]
								]
							]
						}
					],
					"returns": [[["number"]]],
					"returnsDescription": "The number of removed entries",
					"meta": { "line": 154, "file": "index.d.ts", "path": "node_modules/@discordjs/collection/dist" }
				},
				{
					"name": "tap",
					"description": "Runs a function on the collection and returns the collection.",
					"see": [],
					"examples": [
						"collection\n .tap(coll => console.log(coll.size))\n .filter(user => user.bot)\n .tap(coll => console.log(coll.size))"
					],
					"abstract": false,
					"deprecated": false,
					"emits": [],
					"params": [
						{
							"name": "fn",
							"description": "Function to execute",
							"optional": false,
							"type": [[["("], ["collection", ": "], ["Store", "<"], ["T", ">) => "], ["void"]]]
						}
					],
					"returns": [
						[
							["Store", "<"],
							["T", ">"]
						]
					],
					"meta": { "line": 293, "file": "index.d.ts", "path": "node_modules/@discordjs/collection/dist" }
				},
				{
					"name": "toJSON",
					"returns": [
						[
							["Array", "<"],
							["T", ">"]
						]
					],
					"meta": { "line": 358, "file": "index.d.ts", "path": "node_modules/@discordjs/collection/dist" }
				},
				{
					"name": "unload",
					"description": "Unloads a piece given its instance or its name.",
					"params": [
						{
							"name": "name",
							"description": "The name of the file to load.",
							"optional": false,
							"type": [[["string", " | "], ["T"]]]
						}
					],
					"returns": [
						[
							["Promise", "<"],
							["T", ">"]
						]
					],
					"returnsDescription": "Returns the piece that was unloaded.",
					"meta": { "line": 318, "file": "index.d.ts", "path": "node_modules/@sapphire/pieces/dist" }
				},
				{
					"name": "unloadAll",
					"description": "Unloads all pieces from the store.",
					"returns": [
						[
							["Promise", "<"],
							["Array", "<"],
							["T", ">>"]
						]
					],
					"meta": { "line": 322, "file": "index.d.ts", "path": "node_modules/@sapphire/pieces/dist" }
				},
				{
					"name": "values",
					"description": "Returns an iterable of values in the map",
					"returns": [
						[
							["IterableIterator", "<"],
							["T", ">"]
						]
					]
				}
			],
			"meta": { "line": 280, "file": "index.d.ts", "path": "node_modules/@sapphire/pieces/dist" }
		},
		{
			"name": "StoreRegistry",
			"description": "A strict-typed store registry. This is available in {@link container}.",
			"see": [],
			"extends": ["Collection<Key, Value>"],
			"abstract": false,
			"deprecated": false,
			"construct": {
				"name": "constructor",
				"params": [
					{
						"name": "entries",
						"optional": true,
						"type": [
							[
								["null", " | "],
								["readonly", " "],
								["Array", "<"],
								["readonly", " ["],
								["keyof", " "],
								["StoreRegistryEntries", ", "],
								["Value", "]>"]
							]
						]
					}
				],
				"returns": [[["StoreRegistry"]]]
			},
			"props": [
				{
					"name": "[toStringTag]",
					"readonly": true,
					"type": [[["string"]]],
					"meta": { "line": 135, "file": "lib.es2015.symbol.wellknown.d.ts", "path": "node_modules/typescript/lib" }
				},
				{
					"name": "constructor",
					"type": [[["CollectionConstructor"]]],
					"meta": { "line": 17, "file": "index.d.ts", "path": "node_modules/@discordjs/collection/dist" }
				},
				{
					"name": "size",
					"readonly": true,
					"type": [[["number"]]],
					"meta": { "line": 28, "file": "lib.es2015.collection.d.ts", "path": "node_modules/typescript/lib" }
				},
				{
					"name": "[species]",
					"scope": "static",
					"readonly": true,
					"type": [[["MapConstructor"]]],
					"meta": { "line": 317, "file": "lib.es2015.symbol.wellknown.d.ts", "path": "node_modules/typescript/lib" }
				},
				{
					"name": "default",
					"scope": "static",
					"readonly": true,
					"type": [[["("], ["typeof", " "], ["Collection", ")"]]],
					"meta": { "line": 24, "file": "index.d.ts", "path": "node_modules/@discordjs/collection/dist" }
				}
			],
			"methods": [
				{
					"name": "[iterator]",
					"description": "Returns an iterable of entries in the map.",
					"returns": [
						[
							["IterableIterator", "<["],
							["keyof", " "],
							["StoreRegistryEntries", ", "],
							["Value", "]>"]
						]
					]
				},
				{
					"name": "at",
					"description": "Identical to [Array.at()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/at).\nReturns the item at a given index, allowing for positive and negative integers.\nNegative integers count back from the last item in the collection.",
					"params": [
						{
							"name": "index",
							"description": "The index of the element to obtain",
							"optional": true,
							"type": [[["number"]]]
						}
					],
					"returns": [[["undefined", " | "], ["Value"]]],
					"meta": { "line": 87, "file": "index.d.ts", "path": "node_modules/@discordjs/collection/dist" }
				},
				{ "name": "clear", "returns": [[["void"]]] },
				{
					"name": "clone",
					"description": "Creates an identical shallow copy of this collection.",
					"see": [],
					"examples": ["const newColl = someColl.clone();"],
					"abstract": false,
					"deprecated": false,
					"emits": [],
					"returns": [
						[
							["Collection", "<"],
							["keyof", " "],
							["StoreRegistryEntries", ", "],
							["Value", ">"]
						]
					],
					"meta": { "line": 301, "file": "index.d.ts", "path": "node_modules/@discordjs/collection/dist" }
				},
				{
					"name": "concat",
					"description": "Combines this collection with others into a new collection. None of the source collections are modified.",
					"see": [],
					"examples": ["const newColl = someColl.concat(someOtherColl, anotherColl, ohBoyAColl);"],
					"abstract": false,
					"deprecated": false,
					"emits": [],
					"params": [
						{
							"name": "collections",
							"description": "Collections to merge",
							"optional": false,
							"type": [
								[
									["Array", "<"],
									["Collection", "<"],
									["keyof", " "],
									["StoreRegistryEntries", ", "],
									["Value", ">>"]
								]
							]
						}
					],
					"returns": [
						[
							["Collection", "<"],
							["keyof", " "],
							["StoreRegistryEntries", ", "],
							["Value", ">"]
						]
					],
					"meta": { "line": 310, "file": "index.d.ts", "path": "node_modules/@discordjs/collection/dist" }
				},
				{
					"name": "delete",
					"params": [{ "name": "key", "optional": false, "type": [[["keyof", " "], ["StoreRegistryEntries"]]] }],
					"returns": [[["boolean"]]]
				},
				{
					"name": "deregister",
					"description": "Deregisters a store.",
					"see": [],
					"examples": [],
					"abstract": false,
					"deprecated": false,
					"emits": [],
					"params": [
						{
							"name": "store",
							"description": "The store to deregister.",
							"optional": false,
							"type": [
								[
									["Store", "<"],
									["T", ">"]
								]
							]
						}
					],
					"returns": [[["StoreRegistry"]]],
					"meta": { "line": 553, "file": "index.d.ts", "path": "node_modules/@sapphire/pieces/dist" }
				},
				{
					"name": "difference",
					"description": "The difference method returns a new structure containing items where the key is present in one of the original structures but not the other.",
					"params": [
						{
							"name": "other",
							"description": "The other Collection to filter against",
							"optional": false,
							"type": [
								[
									["Collection", "<"],
									["keyof", " "],
									["StoreRegistryEntries", ", "],
									["Value", ">"]
								]
							]
						}
					],
					"returns": [
						[
							["Collection", "<"],
							["keyof", " "],
							["StoreRegistryEntries", ", "],
							["Value", ">"]
						]
					],
					"meta": { "line": 344, "file": "index.d.ts", "path": "node_modules/@discordjs/collection/dist" }
				},
				{
					"name": "each",
					"description": "Identical to\n[Map.forEach()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/forEach),\nbut returns the collection instead of undefined.",
					"see": [],
					"examples": [
						"collection\n .each(user => console.log(user.username))\n .filter(user => user.bot)\n .each(user => console.log(user.username));"
					],
					"abstract": false,
					"deprecated": false,
					"emits": [],
					"params": [
						{
							"name": "fn",
							"description": "Function to execute for each element",
							"optional": false,
							"type": [
								[
									["("],
									["value", ": "],
									["Value", ", "],
									["key", ": "],
									["keyof", " "],
									["StoreRegistryEntries", ", "],
									["collection", ": "],
									["StoreRegistry", ") => "],
									["void"]
								]
							]
						}
					],
					"returns": [[["StoreRegistry"]]],
					"meta": { "line": 279, "file": "index.d.ts", "path": "node_modules/@discordjs/collection/dist" }
				},
				{
					"name": "entries",
					"description": "Returns an iterable of key, value pairs for every entry in the map.",
					"returns": [
						[
							["IterableIterator", "<["],
							["keyof", " "],
							["StoreRegistryEntries", ", "],
							["Value", "]>"]
						]
					]
				},
				{
					"name": "equals",
					"description": "Checks if this collection shares identical items with another.\nThis is different to checking for equality using equal-signs, because\nthe collections may be different objects, but contain the same data.",
					"params": [
						{
							"name": "collection",
							"description": "Collection to compare with",
							"optional": false,
							"type": [
								[
									["Collection", "<"],
									["keyof", " "],
									["StoreRegistryEntries", ", "],
									["Value", ">"]
								]
							]
						}
					],
					"returns": [[["boolean"]]],
					"returnsDescription": "Whether the collections have identical contents",
					"meta": { "line": 320, "file": "index.d.ts", "path": "node_modules/@discordjs/collection/dist" }
				},
				{
					"name": "every",
					"description": "Checks if all items passes a test. Identical in behavior to\n[Array.every()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every).",
					"see": [],
					"examples": ["collection.every(user => !user.bot);"],
					"abstract": false,
					"deprecated": false,
					"emits": [],
					"params": [
						{
							"name": "fn",
							"description": "Function used to test (should return a boolean)",
							"optional": false,
							"type": [
								[
									["("],
									["value", ": "],
									["Value", ", "],
									["key", ": "],
									["keyof", " "],
									["StoreRegistryEntries", ", "],
									["collection", ": "],
									["StoreRegistry", ") => "],
									["key", " "],
									["is", " "],
									["K2"]
								]
							]
						}
					],
					"returns": [
						[
							["this", " "],
							["is", " "],
							["Collection", "<"],
							["K2", ", "],
							["Value", ">"]
						]
					],
					"meta": { "line": 247, "file": "index.d.ts", "path": "node_modules/@discordjs/collection/dist" }
				},
				{
					"name": "filter",
					"description": "Identical to\n[Array.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter),\nbut returns a Collection instead of an Array.",
					"see": [],
					"examples": ["collection.filter(user => user.username === 'Bob');"],
					"abstract": false,
					"deprecated": false,
					"emits": [],
					"params": [
						{
							"name": "fn",
							"description": "The function to test with (should return boolean)",
							"optional": false,
							"type": [
								[
									["("],
									["value", ": "],
									["Value", ", "],
									["key", ": "],
									["keyof", " "],
									["StoreRegistryEntries", ", "],
									["collection", ": "],
									["StoreRegistry", ") => "],
									["key", " "],
									["is", " "],
									["K2"]
								]
							]
						}
					],
					"returns": [
						[
							["Collection", "<"],
							["K2", ", "],
							["Value", ">"]
						]
					],
					"meta": { "line": 167, "file": "index.d.ts", "path": "node_modules/@discordjs/collection/dist" }
				},
				{
					"name": "find",
					"description": "Searches for a single item where the given function returns a truthy value. This behaves like\n[Array.find()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find).\n<warn>All collections used in Discord.js are mapped using their `id` property, and if you want to find by id you\nshould use the `get` method. See\n[MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/get) for details.</warn>",
					"see": [],
					"examples": ["collection.find(user => user.username === 'Bob');"],
					"abstract": false,
					"deprecated": false,
					"emits": [],
					"params": [
						{
							"name": "fn",
							"description": "The function to test with (should return boolean)",
							"optional": false,
							"type": [
								[
									["("],
									["value", ": "],
									["Value", ", "],
									["key", ": "],
									["keyof", " "],
									["StoreRegistryEntries", ", "],
									["collection", ": "],
									["StoreRegistry", ") => "],
									["value", " "],
									["is", " "],
									["V2"]
								]
							]
						}
					],
					"returns": [[["undefined", " | "], ["V2"]]],
					"meta": { "line": 127, "file": "index.d.ts", "path": "node_modules/@discordjs/collection/dist" }
				},
				{
					"name": "findKey",
					"description": "Searches for the key of a single item where the given function returns a truthy value. This behaves like\n[Array.findIndex()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex),\nbut returns the key rather than the positional index.",
					"see": [],
					"examples": ["collection.findKey(user => user.username === 'Bob');"],
					"abstract": false,
					"deprecated": false,
					"emits": [],
					"params": [
						{
							"name": "fn",
							"description": "The function to test with (should return boolean)",
							"optional": false,
							"type": [
								[
									["("],
									["value", ": "],
									["Value", ", "],
									["key", ": "],
									["keyof", " "],
									["StoreRegistryEntries", ", "],
									["collection", ": "],
									["StoreRegistry", ") => "],
									["key", " "],
									["is", " "],
									["K2"]
								]
							]
						}
					],
					"returns": [[["undefined", " | "], ["K2"]]],
					"meta": { "line": 142, "file": "index.d.ts", "path": "node_modules/@discordjs/collection/dist" }
				},
				{
					"name": "first",
					"description": "Obtains the first value(s) in this collection.",
					"returns": [[["undefined", " | "], ["Value"]]],
					"returnsDescription": "A single value if no amount is provided or an array of values, starting from the end if amount is negative",
					"meta": { "line": 48, "file": "index.d.ts", "path": "node_modules/@discordjs/collection/dist" }
				},
				{
					"name": "firstKey",
					"description": "Obtains the first key(s) in this collection.",
					"returns": [[["undefined", " | "], ["keyof", " "], ["StoreRegistryEntries"]]],
					"returnsDescription": "A single key if no amount is provided or an array of keys, starting from the end if\namount is negative",
					"meta": { "line": 58, "file": "index.d.ts", "path": "node_modules/@discordjs/collection/dist" }
				},
				{
					"name": "flatMap",
					"description": "Maps each item into a Collection, then joins the results into a single Collection. Identical in behavior to\n[Array.flatMap()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/flatMap).",
					"see": [],
					"examples": ["collection.flatMap(guild => guild.members.cache);"],
					"abstract": false,
					"deprecated": false,
					"emits": [],
					"params": [
						{
							"name": "fn",
							"description": "Function that produces a new Collection",
							"optional": false,
							"type": [
								[
									["("],
									["value", ": "],
									["Value", ", "],
									["key", ": "],
									["keyof", " "],
									["StoreRegistryEntries", ", "],
									["collection", ": "],
									["StoreRegistry", ") => "],
									["Collection", "<"],
									["keyof", " "],
									["StoreRegistryEntries", ", "],
									["T", ">"]
								]
							]
						}
					],
					"returns": [
						[
							["Collection", "<"],
							["keyof", " "],
							["StoreRegistryEntries", ", "],
							["T", ">"]
						]
					],
					"meta": { "line": 199, "file": "index.d.ts", "path": "node_modules/@discordjs/collection/dist" }
				},
				{
					"name": "forEach",
					"params": [
						{
							"name": "callbackfn",
							"optional": false,
							"type": [
								[
									["("],
									["value", ": "],
									["Value", ", "],
									["key", ": "],
									["keyof", " "],
									["StoreRegistryEntries", ", "],
									["map", ": "],
									["Map", "<"],
									["keyof", " "],
									["StoreRegistryEntries", ", "],
									["Value", ">) => "],
									["void"]
								]
							]
						},
						{ "name": "thisArg", "optional": true, "type": [[["any"]]] }
					],
					"returns": [[["void"]]]
				},
				{
					"name": "get",
					"params": [{ "name": "key", "optional": false, "type": [[["K"]]] }],
					"returns": [
						[
							["StoreRegistryEntries", "["],
							["K", "]"]
						]
					]
				},
				{
					"name": "has",
					"params": [{ "name": "key", "optional": false, "type": [[["keyof", " "], ["StoreRegistryEntries"]]] }],
					"returns": [[["true"]]]
				},
				{
					"name": "hasAll",
					"description": "Checks if all of the elements exist in the collection.",
					"params": [
						{
							"name": "keys",
							"description": "The keys of the elements to check for",
							"optional": false,
							"type": [
								[
									["Array", "<"],
									["keyof", " "],
									["StoreRegistryEntries", ">"]
								]
							]
						}
					],
					"returns": [[["boolean"]]],
					"returnsDescription": "`true` if all of the elements exist, `false` if at least one does not exist.",
					"meta": { "line": 32, "file": "index.d.ts", "path": "node_modules/@discordjs/collection/dist" }
				},
				{
					"name": "hasAny",
					"description": "Checks if any of the elements exist in the collection.",
					"params": [
						{
							"name": "keys",
							"description": "The keys of the elements to check for",
							"optional": false,
							"type": [
								[
									["Array", "<"],
									["keyof", " "],
									["StoreRegistryEntries", ">"]
								]
							]
						}
					],
					"returns": [[["boolean"]]],
					"returnsDescription": "`true` if any of the elements exist, `false` if none exist.",
					"meta": { "line": 40, "file": "index.d.ts", "path": "node_modules/@discordjs/collection/dist" }
				},
				{
					"name": "intersect",
					"description": "The intersect method returns a new structure containing items where the keys are present in both original structures.",
					"params": [
						{
							"name": "other",
							"description": "The other Collection to filter against",
							"optional": false,
							"type": [
								[
									["Collection", "<"],
									["keyof", " "],
									["StoreRegistryEntries", ", "],
									["Value", ">"]
								]
							]
						}
					],
					"returns": [
						[
							["Collection", "<"],
							["keyof", " "],
							["StoreRegistryEntries", ", "],
							["Value", ">"]
						]
					],
					"meta": { "line": 338, "file": "index.d.ts", "path": "node_modules/@discordjs/collection/dist" }
				},
				{
					"name": "keyAt",
					"description": "Identical to [Array.at()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/at).\nReturns the key at a given index, allowing for positive and negative integers.\nNegative integers count back from the last item in the collection.",
					"params": [
						{
							"name": "index",
							"description": "The index of the key to obtain",
							"optional": true,
							"type": [[["number"]]]
						}
					],
					"returns": [[["undefined", " | "], ["keyof", " "], ["StoreRegistryEntries"]]],
					"meta": { "line": 95, "file": "index.d.ts", "path": "node_modules/@discordjs/collection/dist" }
				},
				{
					"name": "keys",
					"description": "Returns an iterable of keys in the map",
					"returns": [
						[
							["IterableIterator", "<"],
							["keyof", " "],
							["StoreRegistryEntries", ">"]
						]
					]
				},
				{
					"name": "last",
					"description": "Obtains the last value(s) in this collection.",
					"returns": [[["undefined", " | "], ["Value"]]],
					"returnsDescription": "A single value if no amount is provided or an array of values, starting from the start if\namount is negative",
					"meta": { "line": 68, "file": "index.d.ts", "path": "node_modules/@discordjs/collection/dist" }
				},
				{
					"name": "lastKey",
					"description": "Obtains the last key(s) in this collection.",
					"returns": [[["undefined", " | "], ["keyof", " "], ["StoreRegistryEntries"]]],
					"returnsDescription": "A single key if no amount is provided or an array of keys, starting from the start if\namount is negative",
					"meta": { "line": 78, "file": "index.d.ts", "path": "node_modules/@discordjs/collection/dist" }
				},
				{
					"name": "load",
					"description": "Loads all the registered stores.",
					"see": [],
					"examples": [],
					"abstract": false,
					"deprecated": false,
					"emits": [],
					"returns": [
						[
							["Promise", "<"],
							["void", ">"]
						]
					],
					"meta": { "line": 516, "file": "index.d.ts", "path": "node_modules/@sapphire/pieces/dist" }
				},
				{
					"name": "map",
					"description": "Maps each item to another value into an array. Identical in behavior to\n[Array.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map).",
					"see": [],
					"examples": ["collection.map(user => user.tag);"],
					"abstract": false,
					"deprecated": false,
					"emits": [],
					"params": [
						{
							"name": "fn",
							"description": "Function that produces an element of the new array, taking three arguments",
							"optional": false,
							"type": [
								[
									["("],
									["value", ": "],
									["Value", ", "],
									["key", ": "],
									["keyof", " "],
									["StoreRegistryEntries", ", "],
									["collection", ": "],
									["StoreRegistry", ") => "],
									["T"]
								]
							]
						}
					],
					"returns": [
						[
							["Array", "<"],
							["T", ">"]
						]
					],
					"meta": { "line": 211, "file": "index.d.ts", "path": "node_modules/@discordjs/collection/dist" }
				},
				{
					"name": "mapValues",
					"description": "Maps each item to another value into a collection. Identical in behavior to\n[Array.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map).",
					"see": [],
					"examples": ["collection.mapValues(user => user.tag);"],
					"abstract": false,
					"deprecated": false,
					"emits": [],
					"params": [
						{
							"name": "fn",
							"description": "Function that produces an element of the new collection, taking three arguments",
							"optional": false,
							"type": [
								[
									["("],
									["value", ": "],
									["Value", ", "],
									["key", ": "],
									["keyof", " "],
									["StoreRegistryEntries", ", "],
									["collection", ": "],
									["StoreRegistry", ") => "],
									["T"]
								]
							]
						}
					],
					"returns": [
						[
							["Collection", "<"],
							["keyof", " "],
							["StoreRegistryEntries", ", "],
							["T", ">"]
						]
					],
					"meta": { "line": 223, "file": "index.d.ts", "path": "node_modules/@discordjs/collection/dist" }
				},
				{
					"name": "partition",
					"description": "Partitions the collection into two collections where the first collection\ncontains the items that passed and the second contains the items that failed.",
					"see": [],
					"examples": ["const [big, small] = collection.partition(guild => guild.memberCount > 250);"],
					"abstract": false,
					"deprecated": false,
					"emits": [],
					"params": [
						{
							"name": "fn",
							"description": "Function used to test (should return a boolean)",
							"optional": false,
							"type": [
								[
									["("],
									["value", ": "],
									["Value", ", "],
									["key", ": "],
									["keyof", " "],
									["StoreRegistryEntries", ", "],
									["collection", ": "],
									["StoreRegistry", ") => "],
									["key", " "],
									["is", " "],
									["K2"]
								]
							]
						}
					],
					"returns": [
						[
							["["],
							["Collection", "<"],
							["K2", ", "],
							["Value", ">, "],
							["Collection", "<"],
							["Exclude", "<"],
							["'arguments'", ", "],
							["K2", "> | "],
							["Exclude", "<"],
							["'commands'", ", "],
							["K2", "> | "],
							["Exclude", "<"],
							["'listeners'", ", "],
							["K2", "> | "],
							["Exclude", "<"],
							["'preconditions'", ", "],
							["K2", ">, "],
							["Value", ">]"]
						]
					],
					"meta": { "line": 183, "file": "index.d.ts", "path": "node_modules/@discordjs/collection/dist" }
				},
				{
					"name": "random",
					"description": "Obtains unique random value(s) from this collection.",
					"returns": [[["undefined", " | "], ["Value"]]],
					"returnsDescription": "A single value if no amount is provided or an array of values",
					"meta": { "line": 103, "file": "index.d.ts", "path": "node_modules/@discordjs/collection/dist" }
				},
				{
					"name": "randomKey",
					"description": "Obtains unique random key(s) from this collection.",
					"returns": [[["undefined", " | "], ["keyof", " "], ["StoreRegistryEntries"]]],
					"returnsDescription": "A single key if no amount is provided or an array",
					"meta": { "line": 112, "file": "index.d.ts", "path": "node_modules/@discordjs/collection/dist" }
				},
				{
					"name": "reduce",
					"description": "Applies a function to produce a single value. Identical in behavior to\n[Array.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).",
					"see": [],
					"examples": ["collection.reduce((acc, guild) => acc + guild.memberCount, 0);"],
					"abstract": false,
					"deprecated": false,
					"emits": [],
					"params": [
						{
							"name": "fn",
							"description": "Function used to reduce, taking four arguments; `accumulator`, `currentValue`, `currentKey`,\nand `collection`",
							"optional": false,
							"type": [
								[
									["("],
									["accumulator", ": "],
									["T", ", "],
									["value", ": "],
									["Value", ", "],
									["key", ": "],
									["keyof", " "],
									["StoreRegistryEntries", ", "],
									["collection", ": "],
									["StoreRegistry", ") => "],
									["T"]
								]
							]
						},
						{
							"name": "initialValue",
							"description": "Starting value for the accumulator",
							"optional": true,
							"type": [[["T"]]]
						}
					],
					"returns": [[["T"]]],
					"meta": { "line": 264, "file": "index.d.ts", "path": "node_modules/@discordjs/collection/dist" }
				},
				{
					"name": "register",
					"description": "Registers a store.",
					"see": [],
					"examples": [],
					"abstract": false,
					"deprecated": false,
					"emits": [],
					"params": [
						{
							"name": "store",
							"description": "The store to register.",
							"optional": false,
							"type": [
								[
									["Store", "<"],
									["T", ">"]
								]
							]
						}
					],
					"returns": [[["StoreRegistry"]]],
					"meta": { "line": 547, "file": "index.d.ts", "path": "node_modules/@sapphire/pieces/dist" }
				},
				{
					"name": "registerPath",
					"description": "Registers all user directories from the process working directory, the default value is obtained by assuming\nCommonJS (high accuracy) but with fallback for ECMAScript Modules (reads package.json's `main` entry, fallbacks\nto `process.cwd()`).",
					"see": [],
					"examples": [],
					"abstract": false,
					"deprecated": false,
					"emits": [],
					"params": [
						{
							"name": "rootDirectory",
							"description": "The root directory to register pieces at.",
							"optional": true,
							"type": [[["string"]]]
						}
					],
					"returns": [[["void"]]],
					"meta": { "line": 541, "file": "index.d.ts", "path": "node_modules/@sapphire/pieces/dist" }
				},
				{
					"name": "set",
					"params": [
						{ "name": "key", "optional": false, "type": [[["keyof", " "], ["StoreRegistryEntries"]]] },
						{ "name": "value", "optional": false, "type": [[["Value"]]] }
					],
					"returns": [[["StoreRegistry"]]]
				},
				{
					"name": "some",
					"description": "Checks if there exists an item that passes a test. Identical in behavior to\n[Array.some()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some).",
					"see": [],
					"examples": ["collection.some(user => user.discriminator === '0000');"],
					"abstract": false,
					"deprecated": false,
					"emits": [],
					"params": [
						{
							"name": "fn",
							"description": "Function used to test (should return a boolean)",
							"optional": false,
							"type": [
								[
									["("],
									["value", ": "],
									["Value", ", "],
									["key", ": "],
									["keyof", " "],
									["StoreRegistryEntries", ", "],
									["collection", ": "],
									["StoreRegistry", ") => "],
									["boolean"]
								]
							]
						}
					],
					"returns": [[["boolean"]]],
					"meta": { "line": 235, "file": "index.d.ts", "path": "node_modules/@discordjs/collection/dist" }
				},
				{
					"name": "sort",
					"description": "The sort method sorts the items of a collection in place and returns it.\nThe sort is not necessarily stable in Node 10 or older.\nThe default sort order is according to string Unicode code points.",
					"see": [],
					"examples": ["collection.sort((userA, userB) => userA.createdTimestamp - userB.createdTimestamp);"],
					"abstract": false,
					"deprecated": false,
					"emits": [],
					"params": [
						{
							"name": "compareFunction",
							"description": "Specifies a function that defines the sort order.\nIf omitted, the collection is sorted according to each character's Unicode code point value, according to the string conversion of each element.",
							"optional": true,
							"type": [
								[
									["Comparator", "<"],
									["keyof", " "],
									["StoreRegistryEntries", ", "],
									["Value", ">"]
								]
							]
						}
					],
					"returns": [[["StoreRegistry"]]],
					"meta": { "line": 332, "file": "index.d.ts", "path": "node_modules/@discordjs/collection/dist" }
				},
				{
					"name": "sorted",
					"description": "The sorted method sorts the items of a collection and returns it.\nThe sort is not necessarily stable in Node 10 or older.\nThe default sort order is according to string Unicode code points.",
					"see": [],
					"examples": ["collection.sorted((userA, userB) => userA.createdTimestamp - userB.createdTimestamp);"],
					"abstract": false,
					"deprecated": false,
					"emits": [],
					"params": [
						{
							"name": "compareFunction",
							"description": "Specifies a function that defines the sort order.\nIf omitted, the collection is sorted according to each character's Unicode code point value,\naccording to the string conversion of each element.",
							"optional": true,
							"type": [
								[
									["Comparator", "<"],
									["keyof", " "],
									["StoreRegistryEntries", ", "],
									["Value", ">"]
								]
							]
						}
					],
					"returns": [
						[
							["Collection", "<"],
							["keyof", " "],
							["StoreRegistryEntries", ", "],
							["Value", ">"]
						]
					],
					"meta": { "line": 357, "file": "index.d.ts", "path": "node_modules/@discordjs/collection/dist" }
				},
				{
					"name": "sweep",
					"description": "Removes items that satisfy the provided filter function.",
					"params": [
						{
							"name": "fn",
							"description": "Function used to test (should return a boolean)",
							"optional": false,
							"type": [
								[
									["("],
									["value", ": "],
									["Value", ", "],
									["key", ": "],
									["keyof", " "],
									["StoreRegistryEntries", ", "],
									["collection", ": "],
									["StoreRegistry", ") => "],
									["boolean"]
								]
							]
						}
					],
					"returns": [[["number"]]],
					"returnsDescription": "The number of removed entries",
					"meta": { "line": 154, "file": "index.d.ts", "path": "node_modules/@discordjs/collection/dist" }
				},
				{
					"name": "tap",
					"description": "Runs a function on the collection and returns the collection.",
					"see": [],
					"examples": [
						"collection\n .tap(coll => console.log(coll.size))\n .filter(user => user.bot)\n .tap(coll => console.log(coll.size))"
					],
					"abstract": false,
					"deprecated": false,
					"emits": [],
					"params": [
						{
							"name": "fn",
							"description": "Function to execute",
							"optional": false,
							"type": [[["("], ["collection", ": "], ["StoreRegistry", ") => "], ["void"]]]
						}
					],
					"returns": [[["StoreRegistry"]]],
					"meta": { "line": 293, "file": "index.d.ts", "path": "node_modules/@discordjs/collection/dist" }
				},
				{
					"name": "toJSON",
					"returns": [
						[
							["Array", "<"],
							["Value", ">"]
						]
					],
					"meta": { "line": 358, "file": "index.d.ts", "path": "node_modules/@discordjs/collection/dist" }
				},
				{
					"name": "values",
					"description": "Returns an iterable of values in the map",
					"returns": [
						[
							["IterableIterator", "<"],
							["Value", ">"]
						]
					]
				}
			],
			"meta": { "line": 511, "file": "index.d.ts", "path": "node_modules/@sapphire/pieces/dist" }
		},
		{
			"name": "UserError",
			"description": "The UserError class to be emitted in the pieces.",
			"see": [],
			"extends": ["Error"],
			"abstract": false,
			"deprecated": false,
			"construct": {
				"name": "constructor",
				"description": "Constructs an UserError.",
				"params": [{ "name": "options", "optional": false, "type": [[["Options"]]] }],
				"returns": [[["UserError"]]],
				"meta": { "line": 21, "file": "UserError.ts", "path": "src/lib/errors" }
			},
			"props": [
				{
					"name": "context",
					"description": "User-provided context.",
					"readonly": true,
					"type": [[["unknown"]]],
					"meta": { "line": 14, "file": "UserError.ts", "path": "src/lib/errors" }
				},
				{
					"name": "identifier",
					"description": "An identifier, useful to localize emitted errors.",
					"readonly": true,
					"type": [[["string"]]],
					"meta": { "line": 9, "file": "UserError.ts", "path": "src/lib/errors" }
				},
				{
					"name": "message",
					"type": [[["string"]]],
					"meta": { "line": 1023, "file": "lib.es5.d.ts", "path": "node_modules/typescript/lib" }
				},
				{
					"name": "stack",
					"type": [[["string"]]],
					"meta": { "line": 1024, "file": "lib.es5.d.ts", "path": "node_modules/typescript/lib" }
				},
				{
					"name": "prepareStackTrace",
					"scope": "static",
					"type": [[["("], ["err", ": "], ["Error", ", "], ["stackTraces", ": "], ["Array", "<"], ["CallSite", ">) => "], ["any"]]],
					"meta": { "line": 11, "file": "globals.d.ts", "path": "node_modules/@types/node" }
				},
				{
					"name": "stackTraceLimit",
					"scope": "static",
					"type": [[["number"]]],
					"meta": { "line": 13, "file": "globals.d.ts", "path": "node_modules/@types/node" }
				},
				{
					"name": "name",
					"readonly": true,
					"type": [[["string"]]],
					"meta": { "line": 28, "file": "UserError.ts", "path": "src/lib/errors" }
				}
			],
			"methods": [
				{
					"name": "captureStackTrace",
					"description": "Create .stack property on a target object",
					"scope": "static",
					"params": [
						{ "name": "targetObject", "optional": false, "type": [[["object"]]] },
						{ "name": "constructorOpt", "optional": true, "type": [[["Function"]]] }
					],
					"returns": [[["void"]]]
				}
			],
			"meta": { "line": 5, "file": "UserError.ts", "path": "src/lib/errors" }
		},
		{
			"name": "UserPermissionsPrecondition",
			"description": "Constructs a contextful permissions precondition requirement.",
			"see": [],
			"implements": ["PreconditionSingleResolvableDetails<'UserPermissions'>"],
			"abstract": false,
			"deprecated": false,
			"construct": {
				"name": "constructor",
				"description": "Constructs a precondition container entry.",
				"params": [
					{
						"name": "permissions",
						"description": "The permissions that will be required by this command.",
						"optional": false,
						"type": [[["PermissionResolvable"]]]
					}
				],
				"returns": [[["UserPermissionsPrecondition"]]],
				"meta": {
					"line": 33,
					"file": "UserPermissionsPrecondition.ts",
					"path": "src/lib/utils/preconditions/containers"
				}
			},
			"props": [
				{
					"name": "context",
					"description": "The context to be set at {@link PreconditionContainerSingle.context}.",
					"type": [[["{"], ["\npermissions", ": "], ["Permissions\n", "}"]]],
					"meta": {
						"line": 27,
						"file": "UserPermissionsPrecondition.ts",
						"path": "src/lib/utils/preconditions/containers"
					}
				},
				{
					"name": "name",
					"description": "The name of the precondition to retrieve from {@link SapphireClient.preconditions}.",
					"type": [[["'UserPermissions'"]]],
					"meta": {
						"line": 26,
						"file": "UserPermissionsPrecondition.ts",
						"path": "src/lib/utils/preconditions/containers"
					}
				}
			],
			"meta": { "line": 25, "file": "UserPermissionsPrecondition.ts", "path": "src/lib/utils/preconditions/containers" }
		}
	],
	"typedefs": [
		{
			"name": "BucketScope",
			"description": "The scope the cooldown applies to.",
			"meta": { "line": 18, "file": "Enums.ts", "path": "src/lib/types" },
			"props": [
				{ "name": "Channel", "description": "Per channel cooldowns.", "type": [[["0"]]] },
				{ "name": "Global", "description": "Global cooldowns.", "type": [[["1"]]] },
				{ "name": "Guild", "description": "Per guild cooldowns.", "type": [[["2"]]] },
				{ "name": "User", "description": "Per user cooldowns.", "type": [[["3"]]] }
			]
		},
		{
			"name": "CommandOptionsRunTypeEnum",
			"description": "The allowed values for {@link Command.Options.runIn} as an enum.",
			"see": [],
			"deprecated": false,
			"meta": { "line": 358, "file": "Command.ts", "path": "src/lib/structures" },
			"props": [
				{ "name": "Dm", "type": [[["\"DM\""]]] },
				{ "name": "GuildAny", "type": [[["\"GUILD_ANY\""]]] },
				{ "name": "GuildNews", "type": [[["\"GUILD_NEWS\""]]] },
				{ "name": "GuildNewsThread", "type": [[["\"GUILD_NEWS_THREAD\""]]] },
				{ "name": "GuildPrivateThread", "type": [[["\"GUILD_PRIVATE_THREAD\""]]] },
				{ "name": "GuildPublicThread", "type": [[["\"GUILD_PUBLIC_THREAD\""]]] },
				{ "name": "GuildText", "type": [[["\"GUILD_TEXT\""]]] }
			]
		},
		{
			"name": "CommandPreConditions",
			"description": "The available command pre-conditions.",
			"see": [],
			"deprecated": false,
			"meta": { "line": 372, "file": "Command.ts", "path": "src/lib/structures" },
			"props": [
				{ "name": "ClientPermissions", "type": [[["\"ClientPermissions\""]]] },
				{ "name": "Cooldown", "type": [[["\"Cooldown\""]]] },
				{ "name": "DirectMessageOnly", "type": [[["\"DMOnly\""]]] },
				{ "name": "GuildNewsOnly", "type": [[["\"GuildNewsOnly\""]]] },
				{ "name": "GuildNewsThreadOnly", "type": [[["\"GuildNewsThreadOnly\""]]] },
				{ "name": "GuildOnly", "type": [[["\"GuildOnly\""]]] },
				{ "name": "GuildPrivateThreadOnly", "type": [[["\"GuildPrivateThreadOnly\""]]] },
				{ "name": "GuildPublicThreadOnly", "type": [[["\"GuildPublicThreadOnly\""]]] },
				{ "name": "GuildTextOnly", "type": [[["\"GuildTextOnly\""]]] },
				{ "name": "GuildThreadOnly", "type": [[["\"GuildThreadOnly\""]]] },
				{ "name": "NotSafeForWork", "type": [[["\"NSFW\""]]] },
				{ "name": "UserPermissions", "type": [[["\"UserPermissions\""]]] }
			]
		},
		{
			"name": "CooldownLevel",
			"meta": { "line": 1, "file": "Enums.ts", "path": "src/lib/types" },
			"props": [
				{ "name": "Author", "type": [[["\"author\""]]] },
				{ "name": "Channel", "type": [[["\"channel\""]]] },
				{ "name": "Guild", "type": [[["\"guild\""]]] }
			]
		},
		{
			"name": "Identifiers",
			"meta": { "line": 1, "file": "Identifiers.ts", "path": "src/lib/errors" },
			"props": [
				{ "name": "ArgsMissing", "type": [[["\"argsMissing\""]]] },
				{ "name": "ArgsUnavailable", "type": [[["\"argsUnavailable\""]]] },
				{ "name": "ArgumentBooleanError", "type": [[["\"booleanError\""]]] },
				{ "name": "ArgumentChannelError", "type": [[["\"channelError\""]]] },
				{ "name": "ArgumentDMChannelError", "type": [[["\"dmChannelError\""]]] },
				{ "name": "ArgumentDateError", "type": [[["\"dateError\""]]] },
				{ "name": "ArgumentDateTooEarly", "type": [[["\"dateTooEarly\""]]] },
				{ "name": "ArgumentDateTooFar", "type": [[["\"dateTooFar\""]]] },
				{ "name": "ArgumentFloatError", "type": [[["\"floatError\""]]] },
				{ "name": "ArgumentFloatTooLarge", "type": [[["\"floatTooLarge\""]]] },
				{ "name": "ArgumentFloatTooSmall", "type": [[["\"floatTooSmall\""]]] },
				{ "name": "ArgumentGuildCategoryChannelError", "type": [[["\"categoryChannelError\""]]] },
				{ "name": "ArgumentGuildChannelError", "type": [[["\"guildChannelError\""]]] },
				{ "name": "ArgumentGuildChannelMissingGuildError", "type": [[["\"guildChannelMissingGuildError\""]]] },
				{ "name": "ArgumentGuildNewsChannelError", "type": [[["\"guildNewsChannelError\""]]] },
				{ "name": "ArgumentGuildNewsThreadChannelError", "type": [[["\"guildNewsChannelError\""]]] },
				{ "name": "ArgumentGuildPrivateThreadChannelError", "type": [[["\"guildPrivateThreadChannelError\""]]] },
				{ "name": "ArgumentGuildPublicThreadChannelError", "type": [[["\"guildPublicThreadChannelError\""]]] },
				{ "name": "ArgumentGuildStageVoiceChannelError", "type": [[["\"guildStageVoiceChannelError\""]]] },
				{ "name": "ArgumentGuildTextChannelError", "type": [[["\"guildTextChannelError\""]]] },
				{ "name": "ArgumentGuildThreadChannelError", "type": [[["\"guildThreadChannelError\""]]] },
				{ "name": "ArgumentGuildVoiceChannelError", "type": [[["\"guildVoiceChannelError\""]]] },
				{ "name": "ArgumentHyperlinkError", "type": [[["\"hyperlinkError\""]]] },
				{ "name": "ArgumentIntegerError", "type": [[["\"integerError\""]]] },
				{ "name": "ArgumentIntegerTooLarge", "type": [[["\"integerTooLarge\""]]] },
				{ "name": "ArgumentIntegerTooSmall", "type": [[["\"integerTooSmall\""]]] },
				{ "name": "ArgumentMemberError", "type": [[["\"memberError\""]]] },
				{ "name": "ArgumentMemberMissingGuild", "type": [[["\"memberMissingGuild\""]]] },
				{ "name": "ArgumentMessageError", "type": [[["\"messageError\""]]] },
				{ "name": "ArgumentNumberError", "type": [[["\"numberError\""]]] },
				{ "name": "ArgumentNumberTooLarge", "type": [[["\"numberTooLarge\""]]] },
				{ "name": "ArgumentNumberTooSmall", "type": [[["\"numberTooSmall\""]]] },
				{ "name": "ArgumentRoleError", "type": [[["\"roleError\""]]] },
				{ "name": "ArgumentRoleMissingGuild", "type": [[["\"roleMissingGuild\""]]] },
				{ "name": "ArgumentStringTooLong", "type": [[["\"stringTooLong\""]]] },
				{ "name": "ArgumentStringTooShort", "type": [[["\"stringTooShort\""]]] },
				{ "name": "ArgumentUserError", "type": [[["\"userError\""]]] },
				{ "name": "CommandDisabled", "type": [[["\"commandDisabled\""]]] },
				{ "name": "PreconditionClientPermissions", "type": [[["\"preconditionClientPermissions\""]]] },
				{ "name": "PreconditionClientPermissionsNoClient", "type": [[["\"preconditionClientPermissionsNoClient\""]]] },
				{
					"name": "PreconditionClientPermissionsNoPermissions",
					"type": [[["\"preconditionClientPermissionsNoPermissions\""]]]
				},
				{ "name": "PreconditionCooldown", "type": [[["\"preconditionCooldown\""]]] },
				{ "name": "PreconditionDMOnly", "type": [[["\"preconditionDmOnly\""]]] },
				{ "name": "PreconditionGuildNewsOnly", "type": [[["\"preconditionGuildNewsOnly\""]]] },
				{ "name": "PreconditionGuildNewsThreadOnly", "type": [[["\"preconditionGuildNewsThreadOnly\""]]] },
				{ "name": "PreconditionGuildOnly", "type": [[["\"preconditionGuildOnly\""]]] },
				{ "name": "PreconditionGuildPrivateThreadOnly", "type": [[["\"preconditionGuildPrivateThreadOnly\""]]] },
				{ "name": "PreconditionGuildPublicThreadOnly", "type": [[["\"preconditionGuildPublicThreadOnly\""]]] },
				{ "name": "PreconditionGuildTextOnly", "type": [[["\"preconditionGuildTextOnly\""]]] },
				{ "name": "PreconditionNSFW", "type": [[["\"preconditionNsfw\""]]] },
				{ "name": "PreconditionThreadOnly", "type": [[["\"preconditionThreadOnly\""]]] },
				{ "name": "PreconditionUserPermissions", "type": [[["\"preconditionUserPermissions\""]]] },
				{
					"name": "PreconditionUserPermissionsNoPermissions",
					"type": [[["\"preconditionUserPermissionsNoPermissions\""]]]
				}
			]
		},
		{
			"name": "LogLevel",
			"description": "The logger levels for the {@link ILogger}.",
			"meta": { "line": 4, "file": "ILogger.ts", "path": "src/lib/utils/logger" },
			"props": [
				{
					"name": "Debug",
					"description": "The debug level, used when calling {@link ILogger.debug}.",
					"type": [[["20"]]]
				},
				{
					"name": "Error",
					"description": "The error level, used when calling {@link ILogger.error}.",
					"type": [[["50"]]]
				},
				{
					"name": "Fatal",
					"description": "The critical level, used when calling {@link ILogger.fatal}.",
					"type": [[["60"]]]
				},
				{
					"name": "Info",
					"description": "The info level, used when calling {@link ILogger.info}.",
					"type": [[["30"]]]
				},
				{ "name": "None", "description": "An unknown or uncategorized level.", "type": [[["100"]]] },
				{
					"name": "Trace",
					"description": "The lowest log level, used when calling {@link ILogger.trace}.",
					"type": [[["10"]]]
				},
				{
					"name": "Warn",
					"description": "The warning level, used when calling {@link ILogger.warn}.",
					"type": [[["40"]]]
				}
			]
		},
		{
			"name": "PluginHook",
			"meta": { "line": 7, "file": "Enums.ts", "path": "src/lib/types" },
			"props": [
				{ "name": "PostInitialization", "type": [[["\"postInitialization\""]]] },
				{ "name": "PostLogin", "type": [[["\"postLogin\""]]] },
				{ "name": "PreGenericsInitialization", "type": [[["\"preGenericsInitialization\""]]] },
				{ "name": "PreInitialization", "type": [[["\"preInitialization\""]]] },
				{ "name": "PreLogin", "type": [[["\"preLogin\""]]] }
			]
		},
		{
			"name": "PreconditionRunCondition",
			"description": "The condition for a {@link PreconditionContainerArray}.",
			"meta": { "line": 38, "file": "PreconditionContainerArray.ts", "path": "src/lib/utils/preconditions" },
			"props": [
				{
					"name": "And",
					"description": "Defines a condition where all the entries must pass. This uses {@link PreconditionConditionAnd}.",
					"type": [[["0"]]]
				},
				{
					"name": "Or",
					"description": "Defines a condition where at least one entry must pass. This uses {@link PreconditionConditionOr}.",
					"type": [[["1"]]]
				}
			]
		},
		{
			"name": "PreconditionRunMode",
			"description": "The run mode for a {@link PreconditionContainerArray}.",
			"see": [],
			"deprecated": false,
			"meta": { "line": 19, "file": "PreconditionContainerArray.ts", "path": "src/lib/utils/preconditions" },
			"props": [
				{
					"name": "Parallel",
					"description": "All entries are run in parallel using `Promise.all`, then the results are processed after all of them have\ncompleted.",
					"type": [[["1"]]]
				},
				{
					"name": "Sequential",
					"description": "The entries are run sequentially, this is the default behaviour and can be slow when doing long asynchronous\ntasks, but is performance savvy.",
					"type": [[["0"]]]
				}
			]
		},
		{
			"name": "AliasPieceOptions",
			"meta": { "line": 669, "file": "index.d.ts", "path": "node_modules/@sapphire/pieces/dist" },
			"props": [
				{
					"name": "aliases",
					"description": "The aliases for the piece.",
					"optional": true,
					"default": "[]",
					"type": [
						[
							["readonly", " "],
							["Array", "<"],
							["string", ">"]
						]
					]
				},
				{
					"name": "enabled",
					"description": "Whether or not the piece should be enabled. If set to false, the piece will be unloaded.",
					"optional": true,
					"default": "true",
					"type": [[["boolean"]]]
				},
				{
					"name": "name",
					"description": "The name for the piece.",
					"optional": true,
					"default": "''",
					"type": [[["string"]]]
				}
			]
		},
		{ "name": "ArgOptions", "meta": { "line": 714, "file": "Args.ts", "path": "src/lib/parsers" } },
		{
			"name": "ArgType",
			"meta": { "line": 687, "file": "Args.ts", "path": "src/lib/parsers" },
			"props": [
				{ "name": "boolean", "optional": false, "type": [[["boolean"]]] },
				{ "name": "channel", "optional": false, "type": [[["ChannelTypes"]]] },
				{ "name": "date", "optional": false, "type": [[["Date"]]] },
				{ "name": "dmChannel", "optional": false, "type": [[["DMChannel"]]] },
				{ "name": "float", "optional": false, "type": [[["number"]]] },
				{ "name": "guildCategoryChannel", "optional": false, "type": [[["CategoryChannel"]]] },
				{ "name": "guildChannel", "optional": false, "type": [[["GuildBasedChannelTypes"]]] },
				{ "name": "guildNewsChannel", "optional": false, "type": [[["NewsChannel"]]] },
				{
					"name": "guildNewsThreadChannel",
					"optional": false,
					"type": [
						[
							["ThreadChannel", " & {"],
							["\nparent", ": "],
							["null", " | "],
							["NewsChannel", ","],
							["\ntype", ": "],
							["'GUILD", "_"],
							["NEWS", "_"],
							["THREAD'\n", "}"]
						]
					]
				},
				{
					"name": "guildPrivateThreadChannel",
					"optional": false,
					"type": [
						[
							["ThreadChannel", " & {"],
							["\nparent", ": "],
							["null", " | "],
							["TextChannel", ","],
							["\ntype", ": "],
							["'GUILD", "_"],
							["PRIVATE", "_"],
							["THREAD'\n", "}"]
						]
					]
				},
				{
					"name": "guildPublicThreadChannel",
					"optional": false,
					"type": [
						[
							["ThreadChannel", " & {"],
							["\nparent", ": "],
							["null", " | "],
							["TextChannel", ","],
							["\ntype", ": "],
							["'GUILD", "_"],
							["PUBLIC", "_"],
							["THREAD'\n", "}"]
						]
					]
				},
				{ "name": "guildStageVoiceChannel", "optional": false, "type": [[["StageChannel"]]] },
				{ "name": "guildTextChannel", "optional": false, "type": [[["TextChannel"]]] },
				{ "name": "guildThreadChannel", "optional": false, "type": [[["ThreadChannel"]]] },
				{ "name": "guildVoiceChannel", "optional": false, "type": [[["VoiceChannel"]]] },
				{ "name": "hyperlink", "optional": false, "type": [[["URL"]]] },
				{ "name": "integer", "optional": false, "type": [[["number"]]] },
				{ "name": "member", "optional": false, "type": [[["GuildMember"]]] },
				{
					"name": "message",
					"optional": false,
					"type": [
						[
							["Message", "<"],
							["boolean", ">"]
						]
					]
				},
				{ "name": "number", "optional": false, "type": [[["number"]]] },
				{ "name": "role", "optional": false, "type": [[["Role"]]] },
				{ "name": "string", "optional": false, "type": [[["string"]]] },
				{ "name": "url", "optional": false, "type": [[["URL"]]] },
				{ "name": "user", "optional": false, "type": [[["User"]]] }
			]
		},
		{
			"name": "ArgsNextCallback",
			"description": "The value to be mapped.",
			"meta": { "line": 727, "file": "Args.ts", "path": "src/lib/parsers" },
			"params": [{ "name": "value", "optional": false, "type": [[["string"]]] }],
			"returns": [
				[
					["Maybe", "<"],
					["T", ">"]
				]
			]
		},
		{
			"name": "ArgumentContext",
			"meta": { "line": 114, "file": "Argument.ts", "path": "src/lib/structures" },
			"props": [
				{ "name": "args", "optional": false, "type": [[["Args"]]] },
				{
					"name": "argument",
					"optional": false,
					"type": [
						[
							["IArgument", "<"],
							["T", ">"]
						]
					]
				},
				{
					"name": "command",
					"optional": false,
					"type": [
						[
							["Command", "<"],
							["Args", ", "],
							["CommandOptions", ">"]
						]
					]
				},
				{ "name": "commandContext", "optional": false, "type": [[["CommandContext"]]] },
				{ "name": "inclusive", "optional": true, "type": [[["boolean"]]] },
				{ "name": "maximum", "optional": true, "type": [[["number"]]] },
				{
					"name": "message",
					"optional": false,
					"type": [
						[
							["Message", "<"],
							["boolean", ">"]
						]
					]
				},
				{ "name": "minimum", "optional": true, "type": [[["number"]]] }
			]
		},
		{
			"name": "ArgumentOptions",
			"meta": { "line": 112, "file": "Argument.ts", "path": "src/lib/structures" },
			"props": [
				{
					"name": "aliases",
					"description": "The aliases for the piece.",
					"optional": true,
					"default": "[]",
					"type": [
						[
							["readonly", " "],
							["Array", "<"],
							["string", ">"]
						]
					]
				},
				{
					"name": "enabled",
					"description": "Whether or not the piece should be enabled. If set to false, the piece will be unloaded.",
					"optional": true,
					"default": "true",
					"type": [[["boolean"]]]
				},
				{
					"name": "name",
					"description": "The name for the piece.",
					"optional": true,
					"default": "''",
					"type": [[["string"]]]
				}
			]
		},
		{
			"name": "ClientLoggerOptions",
			"meta": { "line": 299, "file": "SapphireClient.ts", "path": "src/lib" },
			"props": [
				{ "name": "instance", "optional": true, "type": [[["ILogger"]]] },
				{ "name": "level", "optional": true, "type": [[["LogLevel"]]] }
			]
		},
		{
			"name": "CommandAcceptedPayload",
			"meta": { "line": 113, "file": "Events.ts", "path": "src/lib/types" },
			"props": [
				{
					"name": "command",
					"optional": false,
					"type": [
						[
							["Command", "<"],
							["Args", ", "],
							["CommandOptions", ">"]
						]
					]
				},
				{ "name": "context", "optional": false, "type": [[["CommandContext"]]] },
				{
					"name": "message",
					"optional": false,
					"type": [
						[
							["Message", "<"],
							["boolean", ">"]
						]
					]
				},
				{ "name": "parameters", "optional": false, "type": [[["string"]]] }
			]
		},
		{
			"name": "CommandContext",
			"meta": { "line": 513, "file": "Command.ts", "path": "src/lib/structures" },
			"props": [
				{
					"name": "commandName",
					"description": "The alias used to run this command.",
					"optional": false,
					"type": [[["string"]]]
				},
				{
					"name": "commandPrefix",
					"description": "The matched prefix, this will always be the same as {@link Command.RunContext.prefix} if it was a string, otherwise it is\nthe result of doing `prefix.exec(content)[0]`.",
					"optional": false,
					"type": [[["string"]]]
				},
				{
					"name": "prefix",
					"description": "The prefix used to run this command.",
					"optional": false,
					"type": [[["string", " | "], ["RegExp"]]]
				}
			]
		},
		{
			"name": "CommandDeniedPayload",
			"meta": { "line": 108, "file": "Events.ts", "path": "src/lib/types" },
			"props": [
				{
					"name": "command",
					"optional": false,
					"type": [
						[
							["Command", "<"],
							["Args", ", "],
							["CommandOptions", ">"]
						]
					]
				},
				{ "name": "context", "optional": false, "type": [[["CommandContext"]]] },
				{
					"name": "message",
					"optional": false,
					"type": [
						[
							["Message", "<"],
							["boolean", ">"]
						]
					]
				},
				{ "name": "parameters", "optional": false, "type": [[["string"]]] }
			]
		},
		{
			"name": "CommandErrorPayload",
			"meta": { "line": 124, "file": "Events.ts", "path": "src/lib/types" },
			"props": [
				{ "name": "args", "optional": false, "type": [[["T"]]] },
				{
					"name": "command",
					"optional": false,
					"type": [
						[
							["Command", "<"],
							["Args", ", "],
							["CommandOptions", ">"]
						]
					]
				},
				{ "name": "context", "optional": false, "type": [[["CommandContext"]]] },
				{
					"name": "message",
					"optional": false,
					"type": [
						[
							["Message", "<"],
							["boolean", ">"]
						]
					]
				},
				{ "name": "parameters", "optional": false, "type": [[["string"]]] },
				{
					"name": "piece",
					"optional": false,
					"type": [
						[
							["Command", "<"],
							["Args", ", "],
							["CommandOptions", ">"]
						]
					]
				}
			]
		},
		{
			"name": "CommandFinishPayload",
			"meta": { "line": 122, "file": "Events.ts", "path": "src/lib/types" },
			"props": [
				{ "name": "args", "optional": false, "type": [[["T"]]] },
				{
					"name": "command",
					"optional": false,
					"type": [
						[
							["Command", "<"],
							["Args", ", "],
							["CommandOptions", ">"]
						]
					]
				},
				{ "name": "context", "optional": false, "type": [[["CommandContext"]]] },
				{
					"name": "message",
					"optional": false,
					"type": [
						[
							["Message", "<"],
							["boolean", ">"]
						]
					]
				},
				{ "name": "parameters", "optional": false, "type": [[["string"]]] }
			]
		},
		{
			"name": "CommandJSON",
			"meta": { "line": 531, "file": "Command.ts", "path": "src/lib/structures" },
			"props": [
				{
					"name": "aliases",
					"optional": false,
					"type": [
						[
							["Array", "<"],
							["string", ">"]
						]
					]
				},
				{ "name": "category", "optional": false, "type": [[["null", " | "], ["string"]]] },
				{ "name": "description", "optional": false, "type": [[["string"]]] },
				{ "name": "detailedDescription", "optional": false, "type": [[["string"]]] },
				{ "name": "enabled", "optional": false, "type": [[["boolean"]]] },
				{ "name": "location", "optional": false, "type": [[["PieceLocationJSON"]]] },
				{ "name": "name", "optional": false, "type": [[["string"]]] },
				{ "name": "options", "optional": false, "type": [[["AliasPieceOptions"]]] }
			]
		},
		{
			"name": "CommandOptions",
			"description": "The {@link Command} options.",
			"see": [],
			"deprecated": false,
			"meta": { "line": 391, "file": "Command.ts", "path": "src/lib/structures" },
			"props": [
				{
					"name": "aliases",
					"description": "The aliases for the piece.",
					"optional": true,
					"default": "[]",
					"type": [
						[
							["readonly", " "],
							["Array", "<"],
							["string", ">"]
						]
					]
				},
				{
					"name": "cooldownDelay",
					"description": "The time in milliseconds for the cooldown entries to reset, if set to a non-zero value alongside {@link Command.Options.cooldownLimit}, the `Cooldown` precondition will be added to the list.",
					"optional": true,
					"default": "0",
					"type": [[["number"]]]
				},
				{
					"name": "cooldownFilteredUsers",
					"description": "The users that are exempt from the Cooldown precondition.\nUse this to filter out someone like a bot owner",
					"optional": true,
					"default": "undefined",
					"type": [
						[
							["Array", "<"],
							["string", ">"]
						]
					]
				},
				{
					"name": "cooldownLimit",
					"description": "The amount of entries the cooldown can have before filling up, if set to a non-zero value alongside {@link Command.Options.cooldownDelay}, the `Cooldown` precondition will be added to the list.",
					"optional": true,
					"default": "1",
					"type": [[["number"]]]
				},
				{
					"name": "cooldownScope",
					"description": "The scope of the cooldown entries.",
					"optional": true,
					"default": "BucketScope.User",
					"type": [[["BucketScope"]]]
				},
				{
					"name": "description",
					"description": "The description for the command.",
					"optional": true,
					"default": "''",
					"type": [[["string"]]]
				},
				{
					"name": "detailedDescription",
					"description": "The detailed description for the command.",
					"optional": true,
					"default": "''",
					"type": [[["string"]]]
				},
				{
					"name": "enabled",
					"description": "Whether or not the piece should be enabled. If set to false, the piece will be unloaded.",
					"optional": true,
					"default": "true",
					"type": [[["boolean"]]]
				},
				{
					"name": "flags",
					"description": "The accepted flags. Flags are key-only identifiers that can be placed anywhere in the command. Two different types are accepted:\n* An array of strings, e.g. [`silent`].\n* A boolean defining whether the strategy should accept all keys (`true`) or none at all (`false`).",
					"optional": true,
					"default": "[]",
					"type": [
						[
							["boolean", " | "],
							["readonly", " "],
							["Array", "<"],
							["string", ">"]
						]
					]
				},
				{
					"name": "fullCategory",
					"description": "The full category path for the command",
					"optional": true,
					"default": "'An array of folder names that lead back to the folder that is registered for in the commands store'",
					"type": [
						[
							["Array", "<"],
							["string", ">"]
						]
					]
				},
				{
					"name": "generateDashLessAliases",
					"description": "Whether to add aliases for commands with dashes in them",
					"optional": true,
					"default": "false",
					"type": [[["boolean"]]]
				},
				{
					"name": "name",
					"description": "The name for the piece.",
					"optional": true,
					"default": "''",
					"type": [[["string"]]]
				},
				{
					"name": "nsfw",
					"description": "Sets whether or not the command should be treated as NSFW. If set to true, the `NSFW` precondition will be added to the list.",
					"optional": true,
					"default": "false",
					"type": [[["boolean"]]]
				},
				{
					"name": "options",
					"description": "The accepted options. Options are key-value identifiers that can be placed anywhere in the command. Two different types are accepted:\n* An array of strings, e.g. [`silent`].\n* A boolean defining whether the strategy should accept all keys (`true`) or none at all (`false`).",
					"optional": true,
					"default": "[]",
					"type": [
						[
							["boolean", " | "],
							["readonly", " "],
							["Array", "<"],
							["string", ">"]
						]
					]
				},
				{
					"name": "preconditions",
					"description": "The {@link Precondition}s to be run, accepts an array of their names.",
					"optional": true,
					"default": "[]",
					"type": [
						[
							["readonly", " "],
							["Array", "<"],
							["PreconditionEntryResolvable", ">"]
						]
					]
				},
				{
					"name": "prefixes",
					"description": "The prefixes for both flags and options.",
					"optional": true,
					"default": "['--', '-', '—']",
					"type": [
						[
							["Array", "<"],
							["string", ">"]
						]
					]
				},
				{
					"name": "quotes",
					"description": "The quotes accepted by this command, pass `[]` to disable them.",
					"optional": true,
					"default": "[\n  ['\"', '\"'], // Double quotes\n  ['“', '”'], // Fancy quotes (on iOS)\n  ['「', '」'] // Corner brackets (CJK)\n]",
					"type": [
						[
							["Array", "<["],
							["string", ", "],
							["string", "]>"]
						]
					]
				},
				{
					"name": "requiredClientPermissions",
					"description": "The required permissions for the client.",
					"optional": true,
					"default": "0",
					"type": [[["PermissionResolvable"]]]
				},
				{
					"name": "requiredUserPermissions",
					"description": "The required permissions for the user.",
					"optional": true,
					"default": "0",
					"type": [[["PermissionResolvable"]]]
				},
				{
					"name": "runIn",
					"description": "The channels the command should run in. If set to `null`, no precondition entry will be added. Some optimizations are applied when given an array to reduce the amount of preconditions run (e.g. `'GUILD_TEXT'` and `'GUILD_NEWS'` becomes `'GUILD_ANY'`, and if both `'DM'` and `'GUILD_ANY'` are defined, then no precondition entry is added as it runs in all channels).",
					"optional": true,
					"default": "null",
					"type": [
						[
							["null", " | "],
							["CommandOptionsRunType", " | "],
							["CommandOptionsRunTypeEnum", " | "],
							["readonly", " "],
							["Array", "<"],
							["CommandOptionsRunType", " | "],
							["CommandOptionsRunTypeEnum", ">"]
						]
					]
				},
				{
					"name": "separators",
					"description": "The flag separators.",
					"optional": true,
					"default": "['=', ':']",
					"type": [
						[
							["Array", "<"],
							["string", ">"]
						]
					]
				},
				{
					"name": "typing",
					"description": "If {@link SapphireClient.typing} is true, this option will override it.\nOtherwise, this option has no effect - you may call {@link Channel#sendTyping}` in the run method if you want specific commands to display the typing status.",
					"optional": true,
					"default": "true",
					"type": [[["boolean"]]]
				}
			]
		},
		{
			"name": "CommandRunPayload",
			"meta": { "line": 118, "file": "Events.ts", "path": "src/lib/types" },
			"props": [
				{ "name": "args", "optional": false, "type": [[["T"]]] },
				{
					"name": "command",
					"optional": false,
					"type": [
						[
							["Command", "<"],
							["Args", ", "],
							["CommandOptions", ">"]
						]
					]
				},
				{ "name": "context", "optional": false, "type": [[["CommandContext"]]] },
				{
					"name": "message",
					"optional": false,
					"type": [
						[
							["Message", "<"],
							["boolean", ">"]
						]
					]
				},
				{ "name": "parameters", "optional": false, "type": [[["string"]]] }
			]
		},
		{
			"name": "CommandSuccessPayload",
			"meta": { "line": 128, "file": "Events.ts", "path": "src/lib/types" },
			"props": [
				{ "name": "args", "optional": false, "type": [[["T"]]] },
				{
					"name": "command",
					"optional": false,
					"type": [
						[
							["Command", "<"],
							["Args", ", "],
							["CommandOptions", ">"]
						]
					]
				},
				{ "name": "context", "optional": false, "type": [[["CommandContext"]]] },
				{
					"name": "message",
					"optional": false,
					"type": [
						[
							["Message", "<"],
							["boolean", ">"]
						]
					]
				},
				{ "name": "parameters", "optional": false, "type": [[["string"]]] },
				{ "name": "result", "optional": false, "type": [[["unknown"]]] }
			]
		},
		{
			"name": "CommandTypingErrorPayload",
			"meta": { "line": 132, "file": "Events.ts", "path": "src/lib/types" },
			"props": [
				{ "name": "args", "optional": false, "type": [[["T"]]] },
				{
					"name": "command",
					"optional": false,
					"type": [
						[
							["Command", "<"],
							["Args", ", "],
							["CommandOptions", ">"]
						]
					]
				},
				{ "name": "context", "optional": false, "type": [[["CommandContext"]]] },
				{
					"name": "message",
					"optional": false,
					"type": [
						[
							["Message", "<"],
							["boolean", ">"]
						]
					]
				},
				{ "name": "parameters", "optional": false, "type": [[["string"]]] }
			]
		},
		{
			"name": "CooldownContext",
			"meta": { "line": 8, "file": "Cooldown.ts", "path": "src/preconditions" },
			"props": [
				{ "name": "delay", "optional": false, "type": [[["number"]]] },
				{ "name": "external", "optional": true, "type": [[["boolean"]]] },
				{
					"name": "filteredUsers",
					"optional": true,
					"type": [
						[
							["Array", "<"],
							["string", ">"]
						]
					]
				},
				{ "name": "limit", "optional": true, "type": [[["number"]]] },
				{ "name": "scope", "optional": true, "type": [[["BucketScope"]]] }
			]
		},
		{
			"name": "CooldownOptions",
			"meta": { "line": 304, "file": "SapphireClient.ts", "path": "src/lib" },
			"props": [
				{ "name": "delay", "optional": true, "type": [[["number"]]] },
				{
					"name": "filteredCommands",
					"optional": true,
					"type": [
						[
							["Array", "<"],
							["string", ">"]
						]
					]
				},
				{
					"name": "filteredUsers",
					"optional": true,
					"type": [
						[
							["Array", "<"],
							["string", ">"]
						]
					]
				},
				{ "name": "limit", "optional": true, "type": [[["number"]]] },
				{ "name": "scope", "optional": true, "type": [[["BucketScope"]]] }
			]
		},
		{
			"name": "ExtendedArgumentContext",
			"see": [],
			"deprecated": true,
			"meta": { "line": 106, "file": "ExtendedArgument.ts", "path": "src/lib/structures" },
			"props": [
				{ "name": "args", "optional": false, "type": [[["Args"]]] },
				{
					"name": "argument",
					"optional": false,
					"type": [
						[
							["IArgument", "<"],
							["unknown", ">"]
						]
					]
				},
				{
					"name": "command",
					"optional": false,
					"type": [
						[
							["Command", "<"],
							["Args", ", "],
							["CommandOptions", ">"]
						]
					]
				},
				{ "name": "commandContext", "optional": false, "type": [[["CommandContext"]]] },
				{ "name": "inclusive", "optional": true, "type": [[["boolean"]]] },
				{ "name": "maximum", "optional": true, "type": [[["number"]]] },
				{
					"name": "message",
					"optional": false,
					"type": [
						[
							["Message", "<"],
							["boolean", ">"]
						]
					]
				},
				{ "name": "minimum", "optional": true, "type": [[["number"]]] },
				{
					"name": "parameter",
					"description": "The canonical parameter specified by the user in the command, as\na string, equivalent to the first parameter of {@link Argument#run}.\nThis allows {@link ExtendedArgument#handle} to access the original\nargument, which is useful for returning {@link Argument#error} so\nthat you don't have to convert the parsed argument back into a\nstring.",
					"optional": false,
					"type": [[["string"]]]
				}
			]
		},
		{
			"name": "ExtendedArgumentOptions",
			"see": [],
			"deprecated": true,
			"meta": { "line": 95, "file": "ExtendedArgument.ts", "path": "src/lib/structures" },
			"props": [
				{
					"name": "aliases",
					"description": "The aliases for the piece.",
					"optional": true,
					"default": "[]",
					"type": [
						[
							["readonly", " "],
							["Array", "<"],
							["string", ">"]
						]
					]
				},
				{
					"name": "baseArgument",
					"description": "The name of the underlying argument whose value is used to compute\nthe extended argument value; see {@link ArgType} for valid keys.",
					"optional": false,
					"type": [[["K"]]]
				},
				{
					"name": "enabled",
					"description": "Whether or not the piece should be enabled. If set to false, the piece will be unloaded.",
					"optional": true,
					"default": "true",
					"type": [[["boolean"]]]
				},
				{
					"name": "name",
					"description": "The name for the piece.",
					"optional": true,
					"default": "''",
					"type": [[["string"]]]
				}
			]
		},
		{
			"name": "IArgument",
			"meta": { "line": 20, "file": "Argument.ts", "path": "src/lib/structures" },
			"props": [
				{
					"name": "name",
					"description": "The name of the argument, this is used to make the identification of an argument easier.",
					"optional": false,
					"type": [[["string"]]]
				},
				{
					"name": "run",
					"description": "The method which is called when invoking the argument.",
					"optional": false,
					"type": [
						[
							["("],
							["parameter", ": "],
							["string", ", "],
							["context", ": "],
							["Context", "<"],
							["T", ">) => "],
							["Result", "<"],
							["T", ">"]
						]
					]
				}
			]
		},
		{
			"name": "ICommandPayload",
			"meta": { "line": 101, "file": "Events.ts", "path": "src/lib/types" },
			"props": [
				{
					"name": "command",
					"optional": false,
					"type": [
						[
							["Command", "<"],
							["Args", ", "],
							["CommandOptions", ">"]
						]
					]
				},
				{
					"name": "message",
					"optional": false,
					"type": [
						[
							["Message", "<"],
							["boolean", ">"]
						]
					]
				}
			]
		},
		{
			"name": "ILogger",
			"meta": { "line": 41, "file": "ILogger.ts", "path": "src/lib/utils/logger" },
			"props": [
				{
					"name": "debug",
					"description": "Alias of {@link ILogger.write} with {@link LogLevel.Debug} as level.",
					"optional": false,
					"type": [[["("], ["values", ": "], ["readonly", " "], ["Array", "<"], ["unknown", ">) => "], ["void"]]]
				},
				{
					"name": "error",
					"description": "Alias of {@link ILogger.write} with {@link LogLevel.Error} as level.",
					"optional": false,
					"type": [[["("], ["values", ": "], ["readonly", " "], ["Array", "<"], ["unknown", ">) => "], ["void"]]]
				},
				{
					"name": "fatal",
					"description": "Alias of {@link ILogger.write} with {@link LogLevel.Fatal} as level.",
					"optional": false,
					"type": [[["("], ["values", ": "], ["readonly", " "], ["Array", "<"], ["unknown", ">) => "], ["void"]]]
				},
				{
					"name": "has",
					"description": "Checks whether a level is supported.",
					"optional": false,
					"type": [[["("], ["level", ": "], ["LogLevel", ") => "], ["boolean"]]]
				},
				{
					"name": "info",
					"description": "Alias of {@link ILogger.write} with {@link LogLevel.Info} as level.",
					"optional": false,
					"type": [[["("], ["values", ": "], ["readonly", " "], ["Array", "<"], ["unknown", ">) => "], ["void"]]]
				},
				{
					"name": "trace",
					"description": "Alias of {@link ILogger.write} with {@link LogLevel.Trace} as level.",
					"optional": false,
					"type": [[["("], ["values", ": "], ["readonly", " "], ["Array", "<"], ["unknown", ">) => "], ["void"]]]
				},
				{
					"name": "warn",
					"description": "Alias of {@link ILogger.write} with {@link LogLevel.Warn} as level.",
					"optional": false,
					"type": [[["("], ["values", ": "], ["readonly", " "], ["Array", "<"], ["unknown", ">) => "], ["void"]]]
				},
				{
					"name": "write",
					"description": "Writes the log message given a level and the value(s).",
					"optional": false,
					"type": [
						[
							["("],
							["level", ": "],
							["LogLevel", ", "],
							["values", ": "],
							["readonly", " "],
							["Array", "<"],
							["unknown", ">) => "],
							["void"]
						]
					]
				}
			]
		},
		{
			"name": "IPieceError",
			"meta": { "line": 83, "file": "Events.ts", "path": "src/lib/types" },
			"props": [
				{
					"name": "piece",
					"optional": false,
					"type": [
						[
							["Piece", "<"],
							["PieceOptions", ">"]
						]
					]
				}
			]
		},
		{
			"name": "IPreconditionCondition",
			"description": "Defines the condition for {@link PreconditionContainerArray}s to run.",
			"see": [],
			"deprecated": false,
			"meta": { "line": 10, "file": "IPreconditionCondition.ts", "path": "src/lib/utils/preconditions/conditions" },
			"props": [
				{
					"name": "parallel",
					"description": "Runs all the containers using `Promise.all`, then checks the results once all tasks finished running.",
					"optional": false,
					"type": [
						[
							["("],
							["message", ": "],
							["Message", "<"],
							["boolean", ">, "],
							["command", ": "],
							["Command", "<"],
							["Args", ", "],
							["CommandOptions", ">, "],
							["entries", ": "],
							["readonly", " "],
							["Array", "<"],
							["IPreconditionContainer", ">, "],
							["context", ": "],
							["PreconditionContext", ") => "],
							["PreconditionContainerReturn"]
						]
					]
				},
				{
					"name": "sequential",
					"description": "Runs the containers one by one.",
					"optional": false,
					"type": [
						[
							["("],
							["message", ": "],
							["Message", "<"],
							["boolean", ">, "],
							["command", ": "],
							["Command", "<"],
							["Args", ", "],
							["CommandOptions", ">, "],
							["entries", ": "],
							["readonly", " "],
							["Array", "<"],
							["IPreconditionContainer", ">, "],
							["context", ": "],
							["PreconditionContext", ") => "],
							["PreconditionContainerReturn"]
						]
					]
				}
			]
		},
		{
			"name": "IPreconditionContainer",
			"description": "An abstracted precondition container to be implemented by classes.",
			"see": [],
			"deprecated": false,
			"meta": { "line": 30, "file": "IPreconditionContainer.ts", "path": "src/lib/utils/preconditions" },
			"props": [
				{
					"name": "run",
					"description": "Runs a precondition container.",
					"optional": false,
					"type": [
						[
							["("],
							["message", ": "],
							["Message", "<"],
							["boolean", ">, "],
							["command", ": "],
							["Command", "<"],
							["Args", ", "],
							["CommandOptions", ">, "],
							["context", ": "],
							["PreconditionContext", ") => "],
							["PreconditionContainerReturn"]
						]
					]
				}
			]
		},
		{
			"name": "ListenerErrorPayload",
			"meta": { "line": 87, "file": "Events.ts", "path": "src/lib/types" },
			"props": [
				{
					"name": "piece",
					"optional": false,
					"type": [
						[
							["Listener", "<"],
							["''", ", "],
							["ListenerOptions", ">"]
						]
					]
				}
			]
		},
		{
			"name": "ListenerJSON",
			"meta": { "line": 142, "file": "Listener.ts", "path": "src/lib/structures" },
			"props": [
				{ "name": "enabled", "optional": false, "type": [[["boolean"]]] },
				{ "name": "event", "optional": false, "type": [[["string"]]] },
				{ "name": "location", "optional": false, "type": [[["PieceLocationJSON"]]] },
				{ "name": "name", "optional": false, "type": [[["string"]]] },
				{ "name": "once", "optional": false, "type": [[["boolean"]]] },
				{ "name": "options", "optional": false, "type": [[["PieceOptions"]]] }
			]
		},
		{
			"name": "ListenerOptions",
			"meta": { "line": 136, "file": "Listener.ts", "path": "src/lib/structures" },
			"props": [
				{
					"name": "emitter",
					"optional": true,
					"type": [
						[
							["EventEmitter", " | "],
							["keyof", " "],
							["Client", "<"],
							["boolean", ">"]
						]
					]
				},
				{
					"name": "enabled",
					"description": "Whether or not the piece should be enabled. If set to false, the piece will be unloaded.",
					"optional": true,
					"default": "true",
					"type": [[["boolean"]]]
				},
				{ "name": "event", "optional": true, "type": [[["string"]]] },
				{
					"name": "name",
					"description": "The name for the piece.",
					"optional": true,
					"default": "''",
					"type": [[["string"]]]
				},
				{ "name": "once", "optional": true, "type": [[["boolean"]]] }
			]
		},
		{
			"name": "PieceContext",
			"description": "The context for the piece, contains extra information from the store,\nthe piece's path, and the store that loaded it.",
			"meta": { "line": 386, "file": "index.d.ts", "path": "node_modules/@sapphire/pieces/dist" },
			"props": [
				{
					"name": "name",
					"description": "The module's name extracted from the path.",
					"optional": false,
					"type": [[["string"]]]
				},
				{
					"name": "path",
					"description": "The path the module was loaded from, relative to {@link PieceContext.root}.",
					"optional": false,
					"type": [[["string"]]]
				},
				{
					"name": "root",
					"description": "The root directory the piece was loaded from.",
					"optional": false,
					"type": [[["string"]]]
				},
				{
					"name": "store",
					"description": "The store that loaded the piece.",
					"optional": false,
					"type": [
						[
							["Store", "<"],
							["Piece", "<"],
							["PieceOptions", ">>"]
						]
					]
				}
			]
		},
		{
			"name": "PieceOptions",
			"description": "The options for the {@link Piece}.",
			"meta": { "line": 407, "file": "index.d.ts", "path": "node_modules/@sapphire/pieces/dist" },
			"props": [
				{
					"name": "enabled",
					"description": "Whether or not the piece should be enabled. If set to false, the piece will be unloaded.",
					"optional": true,
					"default": "true",
					"type": [[["boolean"]]]
				},
				{
					"name": "name",
					"description": "The name for the piece.",
					"optional": true,
					"default": "''",
					"type": [[["string"]]]
				}
			]
		},
		{
			"name": "PreCommandRunPayload",
			"meta": { "line": 106, "file": "Events.ts", "path": "src/lib/types" },
			"props": [
				{
					"name": "command",
					"optional": false,
					"type": [
						[
							["Command", "<"],
							["Args", ", "],
							["CommandOptions", ">"]
						]
					]
				},
				{ "name": "context", "optional": false, "type": [[["CommandContext"]]] },
				{
					"name": "message",
					"optional": false,
					"type": [
						[
							["Message", "<"],
							["boolean", ">"]
						]
					]
				},
				{ "name": "parameters", "optional": false, "type": [[["string"]]] }
			]
		},
		{
			"name": "PreconditionArrayResolvableDetails",
			"description": "Defines the detailed options for the {@link PreconditionContainerArray}, where both the {@link PreconditionRunMode} and the\nentries can be defined.",
			"see": [],
			"deprecated": false,
			"meta": { "line": 57, "file": "PreconditionContainerArray.ts", "path": "src/lib/utils/preconditions" },
			"props": [
				{
					"name": "entries",
					"description": "The data that will be used to resolve {@link IPreconditionContainer} dependent of this one.",
					"optional": false,
					"type": [
						[
							["readonly", " "],
							["Array", "<"],
							["PreconditionEntryResolvable", ">"]
						]
					]
				},
				{
					"name": "mode",
					"description": "The mode the {@link PreconditionContainerArray} will run.",
					"optional": false,
					"type": [[["PreconditionRunMode"]]]
				}
			]
		},
		{
			"name": "PreconditionContext",
			"meta": { "line": 117, "file": "Precondition.ts", "path": "src/lib/structures" },
			"props": [{ "name": "external", "optional": true, "type": [[["boolean"]]] }]
		},
		{
			"name": "PreconditionOptions",
			"meta": { "line": 108, "file": "Precondition.ts", "path": "src/lib/structures" },
			"props": [
				{
					"name": "enabled",
					"description": "Whether or not the piece should be enabled. If set to false, the piece will be unloaded.",
					"optional": true,
					"default": "true",
					"type": [[["boolean"]]]
				},
				{
					"name": "name",
					"description": "The name for the piece.",
					"optional": true,
					"default": "''",
					"type": [[["string"]]]
				},
				{
					"name": "position",
					"description": "The position for the precondition to be set at in the global precondition list. If set to `null`, this\nprecondition will not be set as a global one.",
					"optional": true,
					"default": "null",
					"type": [[["null", " | "], ["number"]]]
				}
			]
		},
		{
			"name": "PreconditionSingleResolvableDetails",
			"description": "Defines the detailed options for the {@link PreconditionContainerSingle}, where both the {@link PreconditionContext} and the\nname of the precondition can be defined.",
			"see": [],
			"deprecated": false,
			"meta": { "line": 25, "file": "PreconditionContainerSingle.ts", "path": "src/lib/utils/preconditions" },
			"props": [
				{
					"name": "context",
					"description": "The context to be set at {@link PreconditionContainerSingle.context}.",
					"optional": false,
					"type": [
						[
							["Preconditions", "["],
							["K", "]"]
						]
					]
				},
				{
					"name": "name",
					"description": "The name of the precondition to retrieve from {@link SapphireClient.preconditions}.",
					"optional": false,
					"type": [[["K"]]]
				}
			]
		},
		{
			"name": "Preconditions",
			"description": "The registered preconditions and their contexts, if any. When registering new ones, it is recommended to use\n[module augmentation](https://www.typescriptlang.org/docs/handbook/declaration-merging.html#module-augmentation) so\ncustom ones are registered.",
			"see": [],
			"deprecated": false,
			"meta": { "line": 83, "file": "Precondition.ts", "path": "src/lib/structures" },
			"props": [
				{
					"name": "ClientPermissions",
					"optional": false,
					"type": [[["{"], ["\npermissions", ": "], ["Permissions\n", "}"]]]
				},
				{ "name": "Cooldown", "optional": false, "type": [[["CooldownContext"]]] },
				{ "name": "DMOnly", "optional": false, "type": [[["never"]]] },
				{ "name": "Enabled", "optional": false, "type": [[["never"]]] },
				{ "name": "GuildNewsOnly", "optional": false, "type": [[["never"]]] },
				{ "name": "GuildNewsThreadOnly", "optional": false, "type": [[["never"]]] },
				{ "name": "GuildOnly", "optional": false, "type": [[["never"]]] },
				{ "name": "GuildPrivateThreadOnly", "optional": false, "type": [[["never"]]] },
				{ "name": "GuildPublicThreadOnly", "optional": false, "type": [[["never"]]] },
				{ "name": "GuildTextOnly", "optional": false, "type": [[["never"]]] },
				{ "name": "GuildThreadOnly", "optional": false, "type": [[["never"]]] },
				{ "name": "NSFW", "optional": false, "type": [[["never"]]] },
				{
					"name": "UserPermissions",
					"optional": false,
					"type": [[["{"], ["\npermissions", ": "], ["Permissions\n", "}"]]]
				}
			]
		},
		{
			"name": "RepeatArgOptions",
			"meta": { "line": 716, "file": "Args.ts", "path": "src/lib/parsers" },
			"props": [
				{
					"name": "times",
					"description": "The maximum amount of times the argument can be repeated.",
					"optional": true,
					"default": "Infinity",
					"type": [[["number"]]]
				}
			]
		},
		{
			"name": "SapphireClientOptions",
			"meta": { "line": 28, "file": "SapphireClient.ts", "path": "src/lib" },
			"props": [
				{
					"name": "baseUserDirectory",
					"description": "The base user directory, if set to `null`, Sapphire will not call {@link StoreRegistry.registerPath},\nmeaning that you will need to manually set each folder for each store. Please read the aforementioned method's\ndocumentation for more information.",
					"optional": true,
					"default": "undefined",
					"type": [[["null", " | "], ["string"]]]
				},
				{
					"name": "caseInsensitiveCommands",
					"description": "Whether commands can be case insensitive",
					"optional": true,
					"default": "false",
					"type": [[["null", " | "], ["boolean"]]]
				},
				{
					"name": "caseInsensitivePrefixes",
					"description": "Whether prefixes can be case insensitive",
					"optional": true,
					"default": "false",
					"type": [[["null", " | "], ["boolean"]]]
				},
				{
					"name": "defaultCooldown",
					"description": "Sets the default cooldown time for all commands.",
					"optional": true,
					"default": "\"No cooldown options\"",
					"type": [[["CooldownOptions"]]]
				},
				{
					"name": "defaultPrefix",
					"description": "The default prefix, in case of `null`, only mention prefix will trigger the bot's commands.",
					"optional": true,
					"default": "null",
					"type": [[["SapphirePrefix"]]]
				},
				{
					"name": "enableLoaderTraceLoggings",
					"description": "Whether or not trace logging should be enabled.",
					"optional": true,
					"default": "container.logger.has(LogLevel.Trace)",
					"type": [[["boolean"]]]
				},
				{
					"name": "fetchPrefix",
					"description": "The prefix hook, by default it is a callback function that returns {@link SapphireClientOptions.defaultPrefix}.",
					"optional": true,
					"default": "() => client.options.defaultPrefix",
					"type": [[["SapphirePrefixHook"]]]
				},
				{
					"name": "id",
					"description": "The client's ID, this is automatically set by the CoreReady event.",
					"optional": true,
					"default": "this.client.user?.id ?? null",
					"type": [[["string"]]]
				},
				{
					"name": "loadDefaultErrorListeners",
					"description": "If Sapphire should load our pre-included error event listeners that log any encountered errors to the {@link SapphireClient.logger} instance",
					"optional": true,
					"default": "true",
					"type": [[["boolean"]]]
				},
				{
					"name": "logger",
					"description": "The logger options, defaults to an instance of {@link Logger} when {@link ClientLoggerOptions.instance} is not specified.",
					"optional": true,
					"default": "{ instance: new Logger(LogLevel.Info) }",
					"type": [[["ClientLoggerOptions"]]]
				},
				{
					"name": "regexPrefix",
					"description": "The regex prefix, an alternative to a mention or regular prefix to allow creating natural language command messages",
					"optional": true,
					"type": [[["RegExp"]]]
				},
				{
					"name": "typing",
					"description": "Controls whether the bot will automatically appear to be typing when a command is accepted.",
					"optional": true,
					"default": "false",
					"type": [[["boolean"]]]
				}
			]
		},
		{
			"name": "SapphirePluginAsyncHook",
			"meta": { "line": 9, "file": "PluginManager.ts", "path": "src/lib/plugins" },
			"params": [{ "name": "options", "optional": false, "type": [[["ClientOptions"]]] }],
			"returns": [[["unknown"]]]
		},
		{
			"name": "SapphirePluginHook",
			"meta": { "line": 14, "file": "PluginManager.ts", "path": "src/lib/plugins" },
			"params": [{ "name": "options", "optional": false, "type": [[["ClientOptions"]]] }],
			"returns": [[["unknown"]]]
		},
		{
			"name": "SapphirePluginHookEntry",
			"meta": { "line": 18, "file": "PluginManager.ts", "path": "src/lib/plugins" },
			"props": [
				{ "name": "hook", "optional": false, "type": [[["T"]]] },
				{ "name": "name", "optional": true, "type": [[["string"]]] },
				{ "name": "type", "optional": false, "type": [[["PluginHook"]]] }
			]
		},
		{
			"name": "SapphirePrefixHook",
			"meta": { "line": 24, "file": "SapphireClient.ts", "path": "src/lib" },
			"params": [
				{
					"name": "message",
					"optional": false,
					"type": [
						[
							["Message", "<"],
							["boolean", ">"]
						]
					]
				}
			],
			"returns": [
				[
					["Awaitable", "<"],
					["SapphirePrefix", ">"]
				]
			]
		},
		{
			"name": "SimplePreconditionSingleResolvableDetails",
			"description": "Defines the simple options for the {@link PreconditionContainerSingle}, where only the name of the precondition can\nbe defined.",
			"see": [],
			"deprecated": false,
			"meta": { "line": 12, "file": "PreconditionContainerSingle.ts", "path": "src/lib/utils/preconditions" },
			"props": [
				{
					"name": "name",
					"description": "The name of the precondition to retrieve from {@link SapphireClient.preconditions}.",
					"optional": false,
					"type": [[["SimplePreconditionKeys"]]]
				}
			]
		},
		{
			"name": "StoreOptions",
			"description": "The options for the store, this features both hooks (changes the behaviour) and handlers (similar to event listeners).",
			"meta": { "line": 247, "file": "index.d.ts", "path": "node_modules/@sapphire/pieces/dist" },
			"props": [
				{ "name": "name", "description": "The name for this store.", "optional": false, "type": [[["string"]]] },
				{
					"name": "paths",
					"description": "The paths to load pieces from, should be absolute.",
					"optional": true,
					"default": "[]",
					"type": [
						[
							["readonly", " "],
							["Array", "<"],
							["string", ">"]
						]
					]
				},
				{
					"name": "strategy",
					"description": "The strategy to be used for the loader.",
					"optional": true,
					"default": "Store.defaultStrategy",
					"type": [
						[
							["ILoaderStrategy", "<"],
							["T", ">"]
						]
					]
				}
			]
		},
		{
			"name": "StoreRegistryEntries",
			"description": "The {@link StoreRegistry}'s registry, use module augmentation against this interface when adding new stores.",
			"see": [],
			"deprecated": false,
			"meta": { "line": 565, "file": "index.d.ts", "path": "node_modules/@sapphire/pieces/dist" },
			"props": [
				{ "name": "arguments", "optional": false, "type": [[["ArgumentStore"]]] },
				{ "name": "commands", "optional": false, "type": [[["CommandStore"]]] },
				{ "name": "listeners", "optional": false, "type": [[["ListenerStore"]]] },
				{ "name": "preconditions", "optional": false, "type": [[["PreconditionStore"]]] }
			]
		},
		{
			"name": "UnknownCommandNamePayload",
			"meta": { "line": 91, "file": "Events.ts", "path": "src/lib/types" },
			"props": [
				{ "name": "commandPrefix", "optional": false, "type": [[["string"]]] },
				{
					"name": "message",
					"optional": false,
					"type": [
						[
							["Message", "<"],
							["boolean", ">"]
						]
					]
				},
				{ "name": "prefix", "optional": false, "type": [[["string", " | "], ["RegExp"]]] }
			]
		},
		{
			"name": "UnknownCommandPayload",
			"meta": { "line": 97, "file": "Events.ts", "path": "src/lib/types" },
			"props": [
				{ "name": "commandName", "optional": false, "type": [[["string"]]] },
				{ "name": "commandPrefix", "optional": false, "type": [[["string"]]] },
				{
					"name": "message",
					"optional": false,
					"type": [
						[
							["Message", "<"],
							["boolean", ">"]
						]
					]
				},
				{ "name": "prefix", "optional": false, "type": [[["string", " | "], ["RegExp"]]] }
			]
		},
		{
			"name": "ArgumentResult",
			"description": "Defines a synchronous result of an {@link Argument}, check {@link Argument.AsyncResult} for the asynchronous version.",
			"type": [
				[
					["Awaitable", "<"],
					["Result", "<"],
					["T", ", "],
					["UserError", ">>"]
				]
			],
			"meta": { "line": 13, "file": "Argument.ts", "path": "src/lib/structures" }
		},
		{
			"name": "AsyncArgumentResult",
			"description": "Defines an asynchronous result of an {@link Argument}, check {@link Argument.Result} for the synchronous version.",
			"type": [
				[
					["Promise", "<"],
					["Result", "<"],
					["T", ", "],
					["UserError", ">>"]
				]
			],
			"meta": { "line": 18, "file": "Argument.ts", "path": "src/lib/structures" }
		},
		{
			"name": "AsyncPluginHooks",
			"type": [[["PluginHook", "."], ["PreLogin", " | "], ["PluginHook", "."], ["PostLogin"]]],
			"meta": { "line": 8, "file": "PluginManager.ts", "path": "src/lib/plugins" }
		},
		{
			"name": "AsyncPreconditionContainerReturn",
			"description": "Async-only version of {@link PreconditionContainerReturn}, to be used when the run method is async.",
			"see": [],
			"deprecated": false,
			"type": [
				[
					["Promise", "<"],
					["PreconditionContainerResult", ">"]
				]
			],
			"meta": { "line": 24, "file": "IPreconditionContainer.ts", "path": "src/lib/utils/preconditions" }
		},
		{
			"name": "AsyncPreconditionResult",
			"type": [
				[
					["Promise", "<"],
					["Result", "<"],
					["unknown", ", "],
					["UserError", ">>"]
				]
			],
			"meta": { "line": 11, "file": "Precondition.ts", "path": "src/lib/structures" }
		},
		{
			"name": "Awaitable",
			"description": "ReturnType for a function that can return either a value or a `Promise` with that value",
			"type": [[["PromiseLike", "<"], ["T", "> | "], ["T"]]],
			"meta": { "line": 44, "file": "utilityTypes.d.ts", "path": "node_modules/@sapphire/utilities/dist/lib" }
		},
		{
			"name": "CommandOptionsRunType",
			"description": "The allowed values for {@link Command.Options.runIn}.",
			"see": [],
			"deprecated": false,
			"type": [
				[
					["'DM'", " | "],
					["'GUILD", "_"],
					["TEXT'", " | "],
					["'GUILD", "_"],
					["NEWS'", " | "],
					["'GUILD", "_"],
					["NEWS", "_"],
					["THREAD'", " | "],
					["'GUILD", "_"],
					["PUBLIC", "_"],
					["THREAD'", " | "],
					["'GUILD", "_"],
					["PRIVATE", "_"],
					["THREAD'", " | "],
					["'GUILD", "_"],
					["ANY'"]
				]
			],
			"meta": { "line": 345, "file": "Command.ts", "path": "src/lib/structures" }
		},
		{
			"name": "Err",
			"description": "The computation failed.",
			"type": [
				[
					["Lexure", "."],
					["Err", "<"],
					["E", ">"]
				]
			],
			"meta": { "line": 21, "file": "Result.ts", "path": "src/lib/parsers" }
		},
		{
			"name": "LogMethods",
			"type": [[["'trace'", " | "], ["'debug'", " | "], ["'info'", " | "], ["'warn'", " | "], ["'error'"]]],
			"meta": { "line": 54, "file": "Logger.ts", "path": "src/lib/utils/logger" }
		},
		{
			"name": "Maybe",
			"description": "A type used to express a value that may or may not exist.",
			"type": [[["Some", "<"], ["T", "> | "], ["None"]]],
			"meta": { "line": 7, "file": "Maybe.ts", "path": "src/lib/parsers" }
		},
		{
			"name": "None",
			"description": "An empty value.",
			"type": [[["option", "."], ["None"]]],
			"meta": { "line": 18, "file": "Maybe.ts", "path": "src/lib/parsers" }
		},
		{
			"name": "Ok",
			"description": "The computation is successful.",
			"type": [
				[
					["Lexure", "."],
					["Ok", "<"],
					["T", ">"]
				]
			],
			"meta": { "line": 15, "file": "Result.ts", "path": "src/lib/parsers" }
		},
		{
			"name": "PreconditionArrayResolvable",
			"description": "Defines the data accepted by {@link PreconditionContainerArray}'s constructor.",
			"see": [],
			"deprecated": false,
			"type": [[["readonly", " "], ["Array", "<"], ["PreconditionEntryResolvable", "> | "], ["PreconditionArrayResolvableDetails"]]],
			"meta": { "line": 75, "file": "PreconditionContainerArray.ts", "path": "src/lib/utils/preconditions" }
		},
		{
			"name": "PreconditionContainerResult",
			"description": "Defines the result's value for a PreconditionContainer.",
			"see": [],
			"deprecated": false,
			"type": [
				[
					["Result", "<"],
					["unknown", ", "],
					["UserError", ">"]
				]
			],
			"meta": { "line": 12, "file": "IPreconditionContainer.ts", "path": "src/lib/utils/preconditions" }
		},
		{
			"name": "PreconditionContainerReturn",
			"description": "Defines the return type of the generic {@link IPreconditionContainer.run}.",
			"see": [],
			"deprecated": false,
			"type": [
				[
					["Awaitable", "<"],
					["PreconditionContainerResult", ">"]
				]
			],
			"meta": { "line": 18, "file": "IPreconditionContainer.ts", "path": "src/lib/utils/preconditions" }
		},
		{
			"name": "PreconditionEntryResolvable",
			"description": "Defines the data accepted for each entry of the array.",
			"see": [],
			"deprecated": false,
			"type": [[["PreconditionSingleResolvable", " | "], ["PreconditionArrayResolvable"]]],
			"meta": { "line": 83, "file": "PreconditionContainerArray.ts", "path": "src/lib/utils/preconditions" }
		},
		{
			"name": "PreconditionKeys",
			"type": [[["keyof", " "], ["Preconditions"]]],
			"meta": { "line": 103, "file": "Precondition.ts", "path": "src/lib/structures" }
		},
		{
			"name": "PreconditionResult",
			"type": [
				[
					["Awaitable", "<"],
					["Result", "<"],
					["unknown", ", "],
					["UserError", ">>"]
				]
			],
			"meta": { "line": 10, "file": "Precondition.ts", "path": "src/lib/structures" }
		},
		{
			"name": "PreconditionSingleResolvable",
			"description": "Defines the data accepted by {@link PreconditionContainerSingle}'s constructor.",
			"see": [],
			"deprecated": false,
			"type": [
				[["SimplePreconditionKeys", " | "], ["SimplePreconditionSingleResolvableDetails", " | "], ["PreconditionSingleResolvableDetails"]]
			],
			"meta": { "line": 43, "file": "PreconditionContainerSingle.ts", "path": "src/lib/utils/preconditions" }
		},
		{
			"name": "Result",
			"description": "A type used to express computations that can fail.",
			"type": [
				[
					["Ok", "<"],
					["T", "> | "],
					["Err", "<"],
					["E", ">"]
				]
			],
			"meta": { "line": 9, "file": "Result.ts", "path": "src/lib/parsers" }
		},
		{
			"name": "SapphirePrefix",
			"description": "A valid prefix in Sapphire.\n* `string`: a single prefix, e.g. `'!'`.\n* `string[]`: an array of prefixes, e.g. `['!', '.']`.\n* `null`: disabled prefix, locks the bot's command usage to mentions only.",
			"type": [[["string", " | "], ["readonly", " "], ["Array", "<"], ["string", "> | "], ["null"]]],
			"meta": { "line": 22, "file": "SapphireClient.ts", "path": "src/lib" }
		},
		{
			"name": "SimplePreconditionKeys",
			"type": [
				[
					["unknown", "["],
					["PreconditionKeys", "]"]
				]
			],
			"meta": { "line": 104, "file": "Precondition.ts", "path": "src/lib/structures" }
		},
		{
			"name": "Some",
			"description": "A value that exists.",
			"type": [
				[
					["option", "."],
					["Some", "<"],
					["T", ">"]
				]
			],
			"meta": { "line": 13, "file": "Maybe.ts", "path": "src/lib/parsers" }
		},
		{
			"name": "SyncPluginHooks",
			"type": [
				[
					["Exclude", "<"],
					["PluginHook", ", "],
					["AsyncPluginHooks", ">"]
				]
			],
			"meta": { "line": 13, "file": "PluginManager.ts", "path": "src/lib/plugins" }
		}
	]
}
